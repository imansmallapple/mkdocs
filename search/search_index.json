{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Oniro Project documentation!","text":"<p>Oniro\u2122 is a registered trademark of Eclipse Foundation.</p> <p>In 2023, the Oniro project underwent a significant transition. For those seeking information on the project's previous developments, including the state of the art IP compliance toolchain, please consult our legacy documentation.</p>"},{"location":"#about-oniro","title":"About Oniro","text":"<p>Oniro is an open-source, vendor-neutral Operating System (OS) managed by the Eclipse Foundation. It is built upon the foundational layers of OpenHarmony, an open-source project incubated and operated by the OpenAtom Foundation. OpenHarmony is known for its distributed OS features that cater to a wide range of smart devices, regardless of their size. Oniro extends OpenHarmony code base with add-ons for the European and Global markets, such as ReactNative support, Eclipse Theia based IDE, Servo web engine, and more that are coming.</p>"},{"location":"#the-project","title":"The Project","text":"<p>The Oniro Project was established through a first-of-its-kind agreement between two major global open-source foundations - The Eclipse Foundation and The OpenAtom Foundation. The collaboration aims to drive the development and global adoption of OpenHarmony. Operating within the framework of the Eclipse Foundation as a dedicated project and Working Group, the project leverages the Eclipse Foundation\u2019s extensive experience in open-source governance. This approach fosters transparency and encourages active community participation in the project's development and ongoing evolution.</p> <p>The project encompasses a diverse array of enhancements, with a particular emphasis on application frameworks, system-level OS components, and integrated development environments (IDE). It also incorporates an advanced toolchain dedicated to ensuring compliance with intellectual property and licensing standards. At its heart, Oniro is committed to providing seamless interoperability, modularization, and an intuitive, visually appealing user interface. As a versatile platform, Oniro offers comprehensive support for a variety of global technologies and applications across multiple sectors, including Consumer Electronics, Home Appliances, Industrial IoT, Smart Home, and Multimedia.</p> <p>You can learn more about Oniro Project by going to https://oniroproject.org.</p>"},{"location":"#the-code","title":"The Code","text":"<p>The Oniro code is hosted in GitHub Eclipse Oniro for OpenHarmony organization. Additionally, the project mirrors all repositories from Gitee OpenHarmony organization to GitHub Eclipse Oniro Mirrors organization. These mirrored repositories are read-only and consumed by Eclipse Oniro build system. The mirroring aims to enhance speed and reliability of the repositories' access. Additionally, it simplifies forking and consumption on GitHub. To keep the mirrors current, a synchronization CI workflow runs every 24 hours, updating them with the latest changes.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>To quickly start working with the code and building Oniro please follow our concise tutorial. For those interested in experiencing its functionality on actual hardware, as a starting point, we recommend the HiHope HH-SCDAYU200 development kit, which is based on Rockchip's RK3568 processor. This kit is readily accessible in Europe and the USA, offering convenience for developers in these regions.</p>"},{"location":"#chat-with-us","title":"Chat with Us","text":"<p>The Oniro Project engages in community discussions primarily through Eclipse Matrix rooms, and we warmly welcome everyone to join. Whether you seek assistance, wish to contribute, or are keen on interacting with our maintainers, contributors, and community members, the Oniro Project room is the ideal starting point. You can find a full list of Eclipse Oniro chat rooms here. Matrix provides a secure, decentralized communication network, allowing the use of existing accounts from any server. Don\u2019t have a Matrix account? Your Eclipse Foundation account can seamlessly fulfill this role. Creating an Eclipse Foundation account is a straightforward process, ensuring quick and easy access.</p>"},{"location":"#issue-reporting","title":"Issue Reporting","text":"<p>We welcome feedback and issue reports for continuous improvement of the project. If you encounter any problems or bugs, kindly report them on our GitHub issues page. Your contributions are valuable to the project\u2019s development.</p>"},{"location":"application-development/","title":"Development Overview","text":"<p>Portions of this documentation are adapted from OpenHarmony docs by OpenHarmony community, licensed under CC BY 4.0.</p>"},{"location":"application-development/#development-overview","title":"Development Overview","text":""},{"location":"application-development/#welcome-to-oniro-application-development","title":"Welcome to Oniro Application Development","text":"<p>Oniro is a modern, flexible operating system designed for diverse device scenarios. This documentation is your starting point for Oniro application development. It provides clear, concise tutorials and practical examples, enabling you to get started quickly without needing to understand all underlying complexities immediately.</p> <p>By following this documentation, you'll learn how to:</p> <ul> <li>Set up a straightforward development environment.</li> <li>Build and run your first simple Oniro application.</li> <li>Gradually master essential concepts to advance your development journey.</li> </ul>"},{"location":"application-development/#development-environment","title":"Development Environment","text":"<p>To start developing Oniro applications, you first need to set up the development environment by installing <code>DevEco Studio</code>.</p> <p>For detailed instructions, please refer to the Environment Setup Guide.</p>"},{"location":"application-development/#learning-path","title":"Learning Path","text":"<p>To support your application development, we provide comprehensive development guidelines.</p> <p>You can familiarize yourself with the application development process by getting started with a simple project.</p>"},{"location":"application-development/basic-concepts/","title":"Basic Concepts","text":"<p>This section introduces the core concepts essential for application development on the Oniro/OpenHarmony platform. It provides foundational knowledge that helps developers understand the application architecture, programming languages, and key development patterns used throughout the platform.</p>"},{"location":"application-development/basic-concepts/#what-you-will-learn","title":"What You Will Learn","text":"<ul> <li>Application Package Structure: Understand how application files are organized in the Stage Model.</li> <li>ArkTS Language Introduction: Get to know ArkTS, the primary programming language for building UI and logic in Oniro/OpenHarmony applications.</li> <li>Declarative UI Development with ArkTS: Learn how to build dynamic, reactive user interfaces using ArkTS-based declarative programming.</li> <li>UIAbility: Understand the concept of UIAbility, the fundamental unit of user interaction in applications.</li> </ul> <p>These basic principles will prepare you to move confidently into more complex topics and start building powerful applications.</p>"},{"location":"application-development/basic-concepts/app-pack-structure/","title":"Application Package Structure in Stage Model","text":"<p>This topic explores the structure of an application package in the phase of application development.</p> <p>Content table: - Application Model Overview - Package Structure in the Development Phase - Selecting a File Type </p>"},{"location":"application-development/basic-concepts/app-pack-structure/#application-model-overview","title":"Application Model Overview","text":"<p>The system has provided two application models:</p> <ul> <li> <p>Feature Ability (FA) model: This model is supported by API versions 7 and 8, and no longer recommended.</p> </li> <li> <p>Stage model: This model is supported since API version 9. It is the mainstream model with a long evolution plan. In this model, classes such as AbilityStage and WindowStage are provided as the stage of application components and windows. That's why it is named stage model.</p> </li> </ul>"},{"location":"application-development/basic-concepts/app-pack-structure/#package-structure-in-the-development-phase","title":"Package Structure in the Development Phase","text":"<p>To have a clearer idea on the application package structure, it would be helpful if you have a project directory at hand. As such, first create a project in DevEco Studio and add modules of different types to the project.</p> <p>Figure 1 Project structure (for reference only) </p> <p>The table below lists the main file types in the project structure.</p> <p>NOTE</p> <ul> <li>The AppScope directory is automatically generated by DevEco Studio and its name cannot be changed.</li> <li>The module directory name can be automatically generated by DevEco Studio (for example, entry and library) or customized. For ease of description, Module_name is used below to represent the module directory name.</li> </ul> File Type Description Configuration files A collection of application-level and module-level configurations. - AppScope &gt; app.json5: application-wide configuration, such as the bundle name, version number, application icon, application name, and dependent SDK version number. - Module_name &gt; src &gt; main &gt; module.json5: basic information, supported device types, component information, and required permissions of the module. ArkTS source code files Module_name &gt; src &gt; main &gt; ets: ArkTS source code files of the module. Resource files A collection of application-level and module-level resource files, including images, multimedia, strings, and layout files. For details, see Resource Categories and Access. - AppScope &gt; resources: resource files required for the application. - Module_name &gt; src &gt; main &gt; resources: resource files required for the module. Other configuration files A collection of files used for compilation and building, including build configuration files, build scripts, obfuscation rule files, and files declaring dependencies. - build-profile.json5: project-level or module-level build configurations, including application signatures and product configurations. - hvigorfile.ts: application-level or module-level build script. You can specify the compilation and build tool version and configuration parameters for controlling build behavior. - obfuscation-rules.txt: obfuscation rule file. When obfuscation is enabled, DevEco Studio compiles, obfuscates, and compresses code during builds in Release mode. - oh-package.json5: information about dependencies, including dependent third-party libraries and shared packages."},{"location":"application-development/basic-concepts/app-pack-structure/#selecting-a-file-type","title":"Selecting a File Type","text":"<p>There are two types of modules by usage scenario:</p> <ul> <li>Modules of the ability type: used to implement application functionality. Each module of the ability type is built into a Harmony Ability Package (HAP), in .hap format. As a basic unit for application installation, a HAP can be installed and run separately. An application contains one or more HAPs. Depending on the module from each it is built, a HAP is of the entry or feature type.</li> <li>Entry HAP: built from an entry module, which serves as the application's main module and implements the application's entry screen, entry icon, or headline feature. Each application package distributed to devices of the same type may contain either zero or one entry HAP.</li> <li> <p>Feature HAP: built from a dynamic feature module. An application can contain zero, one, or more feature HAPs.</p> </li> <li> <p>Modules of the library type: used to implement code and resource sharing. This type of module can be referenced by other modules multiple times and, when used smartly, can reduce development and maintenance costs. Modules of the library type are classified as static or shared. Each is built into a shared package.</p> </li> <li>Static: static shared library. This type of library is built into a Harmony Archive (HAR), in .har format.</li> <li>Shared: dynamic shared library. This type of library is built into a Harmony Shared Package (HSP), in .hsp format.</li> </ul> <p>NOTE</p> <p>Actually, a build of the shared library generates a HAR as well as an HSP. The HAR contains the interfaces exported from the HSP and is used by other modules in the application to reference the features of the HSP. For convenience purposes, it is usually considered that a shared library is built into an HSP.</p> <p>The table below lists the differences between the HAR and HSP.</p> Shared Package Type Build and Running Release and Reference HAR The code and resources in the HAR are built with the invoking module, and if there are multiple invoking modules, the build product contains multiple copies of the same code and resources.Note: When building a HAR, you are advised to enable the obfuscation capability to protect code assets. The HAR can be referenced inside the application and, by being released independently, can be referenced across applications. HSP The code and resources in the HSP are built independently, and the build product contains only one copy of the code and resources. Generally, the HSP is packaged with the application. Intra-application HSP and integrated HSP are supported. The intra-app HSP can only be referenced in an application; the integrated HSP can be published to the ohpm private repository and referenced in cross-applications. <p>Figure 2 HAR and HSP in the App Pack </p>"},{"location":"application-development/basic-concepts/app-pack-structure/#reference","title":"Reference","text":"<p>For additional information please refer to Overview of Application Configuration Files in Stage Model and Application Models</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/","title":"ArkTS Language Reference","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#declarations","title":"Declarations","text":"<p>Declarations in ArkTS introduce:</p> <ul> <li>Variables</li> <li>Constants</li> <li>Functions</li> <li>Types</li> </ul>"},{"location":"application-development/basic-concepts/arkts-language-reference/#variable-declaration","title":"Variable Declaration","text":"<p>A declaration starting with the keyword <code>let</code> introduces a variable that can have different values during program execution.</p> <pre><code>let hi: string = 'hello';\nhi = 'hello, world';\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#constant-declaration","title":"Constant Declaration","text":"<p>A declaration starting with the keyword <code>const</code> introduces a read-only constant that can be assigned only once.</p> <pre><code>const hello: string = 'hello';\n</code></pre> <p>A compile-time error occurs if a new value is assigned to a constant.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#automatic-type-inference","title":"Automatic Type Inference","text":"<p>As ArkTS is a statically typed language, the types of all entities, like variables and constants, must be known at compile time.</p> <p>However, developers do not need to explicitly specify the type of a declared entity if a variable or a constant declaration contains an initial value.</p> <p>All cases that allow the type to be inferred automatically are specified in the ArkTS Specification.</p> <p>Both variable declarations are valid, and both variables are of the <code>string</code> type:</p> <pre><code>let hi1: string = 'hello';\nlet hi2 = 'hello, world';\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#types","title":"Types","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#numeric-types","title":"Numeric Types","text":"<p>ArkTS has numeric types. Any integer and floating-point values can be assigned to a variable of these types.</p> <p>Numeric literals include integer literals and floating-point literals with the decimal base.</p> <p>Integer literals include the following:</p> <ul> <li>Decimal integers that consist of a sequence of digits. For example: <code>0</code>, <code>117</code>, <code>-345</code>.</li> <li>Hexadecimal integers that start with 0x (or 0X), and can contain digits (0-9) and letters a-f or A-F. For example: <code>0x1123</code>, <code>0x00111</code>, <code>-0xF1A7</code>.</li> <li>Octal integers that start with 0o (or 0O) and can only contain digits (0-7). For example: <code>0o777</code>.</li> <li>Binary integers that start with 0b (or 0B), and can only contain the digits 0 and 1. For example: <code>0b11</code>, <code>0b0011</code>, <code>-0b11</code>.</li> </ul> <p>A floating-point literal includes the following:</p> <ul> <li>Decimal integer, optionally signed (i.e., prefixed with \"+\" or \"-\");</li> <li>Decimal point (\".\").</li> <li>Fractional part (represented by a string of decimal digits).</li> <li>Exponent part that starts with \"e\" or \"E\", followed by an optionally signed (i.e., prefixed with \"+\" or \"-\") integer.</li> </ul> <p>Example:</p> <pre><code>let n1 = 3.14;\nlet n2 = 3.141592;\nlet n3 = .5;\nlet n4 = 1e2;\n\nfunction factorial(n: number): number {\n  if (n &lt;= 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}\n\nfactorial(n1);  // 7.660344000000002 \nfactorial(n2);  // 7.680640444893748 \nfactorial(n3);  // 1 \nfactorial(n4);  // 9.33262154439441e+157 \n</code></pre> <p>The <code>number</code> type tends to lose precision when it represents very large integers. You can use <code>BigInt</code> to ensure precision as required.</p> <pre><code>let bigInteger: BigInt = BigInt('999999999999999999999999999999999999999999999999999999999999');\nconsole.log('bigInteger: ' + bigInteger.toString());\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#boolean","title":"<code>Boolean</code>","text":"<p>The <code>boolean</code> type represents logical values that are either <code>true</code> or <code>false</code>.</p> <p>Usually, variables of this type are used in conditional statements:</p> <pre><code>let isDone: boolean = false;\n\n// ...\n\nif (isDone) {\n  console.log('Done!');\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#string","title":"<code>String</code>","text":"<p>A <code>string</code> is a sequence of characters; some characters can be set by using escape sequences.</p> <p>A <code>string</code> literal consists of zero or more characters enclosed in single (') or double quotes (\"). The special form of string literals is template literals enclosed in backtick quotes (`).</p> <pre><code>let s1 = 'Hello, world!\\n';\nlet s2 = 'this is a string';\nlet a = 'Success';\nlet s3 = `The result is ${a}`;\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#void-type","title":"<code>Void</code> Type","text":"<p>The <code>void</code> type is used to specify that a function does not return a value. This type has only one value, which is also <code>void</code>. As <code>void</code> is a reference type, it can be used as a type argument for generic types.</p> <pre><code>class Class&lt;T&gt; {\n  //...\n}\nlet instance: Class&lt;void&gt;;\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#object-type","title":"<code>Object</code> Type","text":"<p>An <code>Object</code> class type is a base type for all reference types. Any value, including values of primitive types (they will be automatically boxed), can be directly assigned to variables of the type <code>Object</code>. The <code>object</code> type is used to represent types other than the primitive types.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#array-type","title":"<code>Array</code> Type","text":"<p>An <code>array</code> is an object comprised of elements of data types assignable to the element type specified in the array declaration. A value of an <code>array</code> is set by using an array composite literal, which is a list of zero or more expressions enclosed in square brackets ([]). Each expression represents an element of the <code>array</code>. The length of the <code>array</code> is set by the number of expressions. The index of the first array element is 0.</p> <p>The following example creates an <code>array</code> with three elements:</p> <pre><code>let names: string[] = ['Alice', 'Bob', 'Carol'];\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#enum-type","title":"<code>Enum</code> Type","text":"<p>An <code>enum</code> type is a value type with a defined set of named values called enum constants. In order to be used, an <code>enum</code> constant must be prefixed with an enum <code>type</code> name.</p> <pre><code>enum ColorSet { Red, Green, Blue }\nlet c: ColorSet = ColorSet.Red;\n</code></pre> <p>A constant expression can be used to explicitly set the value of an <code>enum</code> constant.</p> <pre><code>enum ColorSet { White = 0xFF, Grey = 0x7F, Black = 0x00 }\nlet c: ColorSet = ColorSet.Black;\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#union-type","title":"<code>Union</code> Type","text":"<p>A <code>union</code> type is a reference type that is created as a combination of other types. Values of union types can be valid values of all types a union was created from.</p> <pre><code>class Cat {\n  name: string = 'cat';\n  // ...\n}\nclass Dog {\n  name: string = 'dog';\n  // ...\n}\nclass Frog {\n  name: string = 'frog';\n  // ...\n}\ntype Animal = Cat | Dog | Frog | number;\n// Cat, Dog, and Frog are some types (class or interface ones)\n\nlet animal: Animal = new Cat();\nanimal = new Frog();\nanimal = 42;\n// One may assign the variable of the union type with any valid value\n</code></pre> <p>There are different mechanisms to get a value of a particular type from a union.</p> <p>Example:</p> <pre><code>class Cat { sleep() {}; meow() {} }\nclass Dog { sleep() {}; bark() {} }\nclass Frog { sleep() {}; leap() {} }\n\ntype Animal = Cat | Dog | Frog;\n\nfunction foo(animal: Animal) {\n  if (animal instanceof Frog) {\n    animal.leap();  // animal is of type Frog here\n  }\n  animal.sleep(); // Any animal can sleep\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#type-aliases","title":"Type <code>Aliases</code>","text":"<p>Type <code>aliases</code> provide names for anonymous types (array, function, object literal, or union types) or alternative names for existing types.</p> <pre><code>type Matrix = number[][];\ntype Handler = (s: string, no: number) =&gt; string;\ntype Predicate&lt;T&gt; = (x: T) =&gt; boolean;\ntype NullableObject = Object | null;\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#operators","title":"Operators","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#assignment-operators","title":"Assignment Operators","text":"<p>The simple assignment operator '=' is used as in \"x = y\".</p> <p>Compound assignment operators combine an assignment with an operator, where <code>x op = y</code> equals <code>x = x op y</code>.</p> <p>Compound assignment operators are as follows: <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, <code>%=</code>, <code>&lt;&lt;=</code>, <code>&gt;&gt;=</code>, <code>&gt;&gt;&gt;=</code>, <code>&amp;=</code>, <code>|=</code>, <code>^=</code>.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#comparison-operators","title":"Comparison Operators","text":"Operator Description <code>===</code> Returns true if both operands are strictly equal. <code>!==</code> Returns true if both operands are not strictly equal. <code>==</code> Returns true if both operands are equal. <code>!=</code> Returns true if both operands are not equal. <code>&gt;</code> Returns true if the left operand is greater than the right. <code>&gt;=</code> Returns true if the left operand is greater than or equal to the right. <code>&lt;</code> Returns true if the left operand is less than the right. <code>&lt;=</code> Returns true if the left operand is less than or equal to the right."},{"location":"application-development/basic-concepts/arkts-language-reference/#arithmetic-operators","title":"Arithmetic Operators","text":"<p>Unary operators are <code>-</code>, <code>+</code>, <code>--</code> and <code>++</code>.</p> <p>Binary operators are as follows:</p> Operator Description <code>+</code> addition <code>-</code> subtraction <code>*</code> multiplication <code>/</code> division <code>%</code> remainder after division"},{"location":"application-development/basic-concepts/arkts-language-reference/#bitwise-operators","title":"Bitwise Operators","text":"Operator Description <code>a &amp; b</code> Bitwise AND: sets each bit to 1 if the corresponding bits of both operands are 1, otherwise to 0. <code>a \\| b</code> Bitwise OR: sets each bit to 1 if at least one of the corresponding bits of both operands is 1, otherwise to 0. <code>a ^ b</code> Bitwise XOR: sets each bit to 1 if the corresponding bits of both operands are different, otherwise to 0. <code>~ a</code> Bitwise NOT: inverts the bits of the operand. <code>a &lt;&lt; b</code> Shift left: shifts the binary representation of a to the left by b bits. <code>a &gt;&gt; b</code> Arithmetic right shift: shifts the binary representation of a to the right by b bits with sign-extension. <code>a &gt;&gt;&gt; b</code> Logical right shift: shifts the binary representation of a to the right by b bits with zero-extension."},{"location":"application-development/basic-concepts/arkts-language-reference/#logical-operators","title":"Logical Operators","text":"Operator Description <code>a &amp;&amp; b</code> Logical AND <code>a \\|\\| b</code> Logical OR <code>! a</code> Logical NOT"},{"location":"application-development/basic-concepts/arkts-language-reference/#statements","title":"Statements","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#if-statements","title":"<code>If</code> Statements","text":"<p>An <code>if</code> statement is used to execute a sequence of statements when a logical condition is <code>true</code>, or another set of statements (if provided) otherwise.</p> <p>The <code>else</code> part can also contain more <code>if</code> statements.</p> <p>An <code>if</code> statement looks as follows:</p> <pre><code>if (condition1) {\n  // statements1\n} else if (condition2) {\n  // statements2\n} else {\n  // else_statements\n}\n</code></pre> <p>All conditional expressions must be of the type <code>boolean</code> or other types (<code>string</code>, <code>number</code>, etc.). For types other than <code>boolean</code>, implicit conversion rules apply:</p> <pre><code>let s1 = 'Hello';\nif (s1) {\n  console.log(s1); // prints 'Hello'\n}\n\nlet s2 = 'World';\nif (s2.length != 0) {\n  console.log(s2); // prints 'World'\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#switch-statements","title":"<code>Switch</code> Statements","text":"<p>A <code>switch</code> statement is used to execute a sequence of statements that match the value of a switch expression.</p> <p>A <code>switch</code> statement looks as follows:</p> <pre><code>switch (expression) {\n  case label1: // will be executed if label1 is matched\n    // ...\n    // statements1\n    // ...\n    break; // Can be omitted\n  case label2:\n  case label3: // will be executed if label2 or label3 is matched\n    // ...\n    // statements23\n    // ...\n    break; // Can be omitted\n  default:\n    // default_statements\n}\n</code></pre> <p>If the value of a <code>switch</code> expression equals the value of some label, then the corresponding statements are executed.</p> <p>If there is no match, and the <code>switch</code> has the default clause, then the default statements are executed.</p> <p>An optional <code>break</code> statement allows you to break out of the <code>switch</code> and continue executing the statement that follows the <code>switch</code>.</p> <p>If there is no <code>break</code>, then the next statements in the <code>switch</code> are executed.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#conditional-expressions","title":"Conditional Expressions","text":"<p>The conditional expression <code>? :</code> uses the <code>boolean</code> value of the first expression to decide which of two other expressions to evaluate.</p> <p>A conditional expression looks as follows:</p> <pre><code>condition ? expression1 : expression2\n</code></pre> <p>If that logical expression is truthy (a value that is considered <code>true</code>), then the first expression is used as the result of the ternary expression; otherwise, the second expression is used.</p> <p>Example:</p> <pre><code>let message = Math.random() &gt; 0.5 ? 'Valid' : 'Failed';\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#for-statements","title":"<code>For</code> Statements","text":"<p>A <code>for</code> statement is executed repeatedly until the specified loop exit condition is <code>false</code>.</p> <p>A <code>for</code> statement looks as follows:</p> <pre><code>for ([init]; [condition]; [update]) {\n  statements\n}\n</code></pre> <p>When a <code>for</code> statement is executed, the following process takes place:</p> <ol> <li>An <code>init</code> expression is executed, if any. This expression usually initializes one or more loop counters.</li> <li>The condition is evaluated. If the value of condition is truthy(a value that is considered <code>true</code>), or if the conditional expression is omitted, then the statements in the <code>for</code> body are to be executed. If the value of condition is falsy(a value that is considered <code>false</code>), then the <code>for</code> loop terminates.</li> <li>The statements of the <code>for</code> body are executed.</li> <li>If there is an <code>update</code> expression, then the <code>update</code> expression is executed.</li> <li>Go back to step 2.</li> </ol> <p>Example:</p> <pre><code>let sum = 0;\nfor (let i = 0; i &lt; 10; i += 2) {\n  sum += i;\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#for-of-statements","title":"<code>For-of</code> Statements","text":"<p><code>for-of</code> statements are used to iterate over an array or string.</p> <p>A <code>for-of</code> statement looks as follows:</p> <pre><code>for (forVar of expression) {\n  statements\n}\n</code></pre> <p>Example:</p> <pre><code>for (let ch of 'a string object') {\n  /* process ch */\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#while-statements","title":"<code>While</code> Statements","text":"<p>A <code>while</code> statement has its body statements executed as long as the specified condition evaluates to <code>true</code>.</p> <p>A <code>while</code> statement looks as follows:</p> <pre><code>while (condition) {\n  statements\n}\n</code></pre> <p>Example:</p> <pre><code>let n = 0;\nlet x = 0;\nwhile (n &lt; 3) {\n  n++;\n  x += n;\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#do-while-statements","title":"<code>Do-while</code> Statements","text":"<p><code>do-while</code> statements are executed repetitively until a specified condition evaluates to <code>false</code>.</p> <p>A <code>do-while</code> statement looks as follows:</p> <pre><code>do {\n  statements\n} while (condition)\n</code></pre> <p>Example:</p> <pre><code>let i = 0;\ndo {\n  i += 1;\n} while (i &lt; 10)\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#break-statements","title":"<code>Break</code> Statements","text":"<p>A <code>break</code> statement is used to terminate any <code>loop</code> statement or <code>switch</code>.</p> <p>Example:</p> <pre><code>let x = 0;\nwhile (true) {\n  x++;\n  if (x &gt; 5) {\n    break;\n  }\n}\n</code></pre> <p>A <code>break</code> statement with a label identifier transfers control out of the enclosing statement to the one which has the same label identifier.</p> <p>Example:</p> <pre><code>let x = 1;\nlabel: while (true) {\n  switch (x) {\n    case 1:\n      // statements\n      break label; // breaks the while\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#continue-statements","title":"<code>Continue</code> Statements","text":"<p>A <code>continue</code> statement stops the execution of the current loop iteration and passes control to the next iteration.</p> <p>Example:</p> <pre><code>let sum = 0;\nfor (let x = 0; x &lt; 100; x++) {\n  if (x % 2 == 0) {\n    continue;\n  }\n  sum += x;\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#throw-and-try-statements","title":"<code>Throw</code> and <code>Try</code> Statements","text":"<p>A <code>throw</code> statement is used to throw an exception or an error:</p> <pre><code>throw new Error('this error')\n</code></pre> <p>A <code>try</code> statement is used to catch and handle an exception or an error:</p> <pre><code>try {\n  // try block\n} catch (e) {\n  // handle the situation\n}\n</code></pre> <p>The example below shows the <code>throw</code> and <code>try</code> statements used to handle the zero division case:</p> <pre><code>class ZeroDivisor extends Error {}\n\nfunction divide(a: number, b: number): number {\n  if (b == 0) throw new ZeroDivisor();\n  return a / b;\n}\n\nfunction process(a: number, b: number) {\n  try {\n    let res = divide(a, b);\n    console.log('result: ' + res);\n  } catch (x) {\n    console.log('some error');\n  }\n}\n</code></pre> <p><code>finally</code> clause is also supported:</p> <pre><code>function processData(s: string) {\n  let error: Error | null = null;\n\n  try {\n    console.log('Data processed: ' + s);\n    // ...\n    // Throwing operations\n    // ...\n  } catch (e) {\n    error = e as Error;\n    // ...\n    // More error handling\n    // ...\n  } finally {\n    if (error != null) {\n      console.log(`Error caught: input='${s}', message='${error.message}'`);\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#functions","title":"Functions","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#function-declarations","title":"Function Declarations","text":"<p>A function declaration introduces a named function, specifying its name, parameters, return type and body.</p> <p>Below is a simple function with two string parameters and string return type:</p> <pre><code>function add(x: string, y: string): string {\n  let z: string = `${x} ${y}`;\n  return z;\n}\n</code></pre> <p>For every parameter its type annotation must be specified. An optional parameter allows you to omit the corresponding argument when calling a function. The last parameter of a function can be a rest parameter.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#optional-parameters","title":"Optional Parameters","text":"<p>An optional parameter has the form <code>name?: Type</code>.</p> <pre><code>function hello(name?: string) {\n  if (name == undefined) {\n    console.log('Hello!');\n  } else {\n    console.log(`Hello, ${name}!`);\n  }\n}\n</code></pre> <p>Another form contains an expression that specifies a default value. If the corresponding argument to such parameter is omitted in a function call, then this parameter's value is default.</p> <pre><code>function multiply(n: number, coeff: number = 2): number {\n  return n * coeff;\n}\nmultiply(2);  // returns 2*2\nmultiply(2, 3); // returns 2*3\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#the-rest-parameter","title":"The Rest Parameter","text":"<p>The last parameter of a function can be a rest parameter. It allows functions or methods to take unlimited number of arguments.</p> <pre><code>function sum(...numbers: number[]): number {\n  let res = 0;\n  for (let n of numbers)\n    res += n;\n  return res;\n}\n\nsum(); // returns 0\nsum(1, 2, 3); // returns 6\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#return-types","title":"Return Types","text":"<p>If function return type can be inferred from its body content, then it can be omitted from the function declaration.</p> <pre><code>// Explicit return type\nfunction foo(): string { return 'foo'; }\n\n// Implicit return type inferred as string\nfunction goo() { return 'goo'; }\n</code></pre> <p>The return type of a function that does not need to return a value can be explicitly specified as <code>void</code> or omitted altogether. No return statement is needed for such functions.</p> <p>Both notations below are valid:</p> <pre><code>function hi1() { console.log('hi'); }\nfunction hi2(): void { console.log('hi'); }\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#function-scope","title":"Function Scope","text":"<p>Variables and other entities defined in a function are local to the function and cannot be accessed from the outside.</p> <p>If the name of a variable defined in the function is equal to the name of an entity in the outer scope, then the local definition shadows the outer entity.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#function-calls","title":"Function Calls","text":"<p>Calling a function actually leads to the execution of its body, while the arguments of the call are assigned to the function parameters.</p> <p>If the function is defined as follows:</p> <pre><code>function join(x: string, y: string): string {\n  let z: string = `${x} ${y}`;\n  return z;\n}\n</code></pre> <p>then it is called with two arguments of the type <code>string</code>:</p> <pre><code>let x = join('hello', 'world');\nconsole.log(x);\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#function-types","title":"Function Types","text":"<p>Function types are commonly used as follows to define callbacks:</p> <pre><code>type trigFunc = (x: number) =&gt; number // this is a function type\n\nfunction do_action(f: trigFunc) {\n   f(3.141592653589); // call the function\n}\n\ndo_action(Math.sin); // pass the function as the parameter\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#arrow-functions-lambda-functions","title":"Arrow Functions (Lambda Functions)","text":"<p>A function can be defined as an arrow function, for example:</p> <pre><code>let sum = (x: number, y: number): number =&gt; {\n  return x + y;\n}\n</code></pre> <p>An arrow function return type can be omitted; in such case, it is inferred from the function body.</p> <p>An expression can be specified as an arrow function to make the notation shorter, i.e., the following two notations are equivalent:</p> <pre><code>let sum1 = (x: number, y: number) =&gt; { return x + y; }\nlet sum2 = (x: number, y: number) =&gt; x + y\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#closure","title":"Closure","text":"<p>A closure is the combination of a function and the lexical environment within which that function was declared. This environment consists of any local variables that were in-scope at the time the closure was created.</p> <p>In the following example, z is a reference to the instance of the function g that is created when f is executed. The instance of g maintains a reference to its lexical environment, within which the variable count exists. For this reason, when z is invoked, the variable count remains available for use.</p> <pre><code>function f(): () =&gt; number {\n  let count = 0;\n  let g = (): number =&gt; { count++; return count; };\n  return g;\n}\n\nlet z = f();\nz(); // output: 1\nz(); // output: 2\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#function-overload-signatures","title":"Function Overload Signatures","text":"<p>A function can be specified to be called in different ways by writing overload signatures. To do so, several functions' headers that have the same name but different signatures are written and immediately followed by the single implementation function.</p> <pre><code>function foo(x: number): void;            /* 1st signature */\nfunction foo(x: string): void;            /* 2nd signature */\nfunction foo(x: number | string): void {  /* Implementation signature */\n}\n\nfoo(123);   // ok, 1st signature is used\nfoo('aa');  // ok, 2nd signature is used\n</code></pre> <p>An error occurs if two overload signatures have identical parameter lists.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#classes","title":"Classes","text":"<p>A class declaration introduces a new type and defines its fields, methods and constructors.</p> <p>In the following example, class <code>Person</code> is defined, which has fields name and surname, constructor, and a method <code>fullName</code>:</p> <pre><code>class Person {\n  name: string = '';\n  surname: string = '';\n  constructor (n: string, sn: string) {\n    this.name = n;\n    this.surname = sn;\n  }\n  fullName(): string {\n    return this.name + ' ' + this.surname;\n  }\n}\n</code></pre> <p>After the class is defined, its instances can be created by using the keyword <code>new</code>:</p> <pre><code>let p = new Person('John', 'Smith');\nconsole.log(p.fullName());\n</code></pre> <p>or an instance can be created by using object literals:</p> <pre><code>class Point {\n  x: number = 0;\n  y: number = 0;\n}\nlet p: Point = {x: 42, y: 42};\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#fields","title":"Fields","text":"<p>A field is a variable of some type that is declared directly in a class.</p> <p>Classes may have instance fields, static fields or both.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#instance-fields","title":"Instance Fields","text":"<p>Instance fields exist on every instance of a class. Each instance has its own set of instance fields.</p> <p>An instance of the class is used to access an instance field.</p> <pre><code>class Person {\n  name: string = '';\n  age: number = 0;\n  constructor(n: string, a: number) {\n    this.name = n;\n    this.age = a;\n  }\n\n  getName(): string {\n    return this.name;\n  }\n}\n\nlet p1 = new Person('Alice', 25);\np1.name;\nlet p2 = new Person('Bob', 28);\np2.getName();\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#static-fields","title":"Static Fields","text":"<p>The keyword <code>static</code> is used to declare a field as static. Static fields belong to the class itself, and all instances of the class share one static field.</p> <p>The class name is used to access a static field:</p> <pre><code>class Person {\n  static numberOfPersons = 0;\n  constructor() {\n     // ...\n     Person.numberOfPersons++;\n     // ...\n  }\n}\n\nPerson.numberOfPersons;\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#field-initializers","title":"Field Initializers","text":"<p>ArkTS requires that all fields are explicitly initialized with some values either when the field is declared or in the <code>constructor</code>. This is similar to <code>strictPropertyInitialization</code> mode of the standard TypeScript. Such behavior is enforced to minimize the number of unexpected runtime errors and achieve better performance.</p> <p>The following code (invalid in ArkTS) is error-prone:</p> <pre><code>class Person {\n  name: string; // undefined\n\n  setName(n:string): void {\n    this.name = n;\n  }\n\n  getName(): string {\n    // Return type \"string\" hides from the developers the fact\n    // that name can be undefined. The most correct would be\n    // to write the return type as \"string | undefined\". By doing so\n    // we tell the users of our API about all possible return values.\n    return this.name;\n  }\n}\n\nlet jack = new Person();\n// Let's assume that the developer forgets to call setName:\n// jack.setName('Jack')\njack.getName().length; // runtime exception: name is undefined\n</code></pre> <p>Here is how it should look in ArkTS:</p> <pre><code>class Person {\n  name: string = '';\n\n  setName(n:string): void {\n    this.name = n;\n  }\n\n  // The type is always string, no other \"hidden options\".\n  getName(): string {\n    return this.name;\n  }\n}\n\n\nlet jack = new Person();\n// Let's assume that the developer forgets to call setName:\n// jack.setName('Jack')\njack.getName().length; // 0, no runtime error\n</code></pre> <p>And here how our code behaves if the field <code>name</code> can be <code>undefined</code></p> <pre><code>class Person {\n  name?: string; // The field may be undefined\n\n  setName(n:string): void {\n    this.name = n;\n  }\n\n  // Compile-time error:\n  // name can be \"undefined\", so we cannot say to those who use this API\n  // that it returns only strings:\n  getNameWrong(): string {\n    return this.name;\n  }\n\n  getName(): string | undefined { // Return type matches the type of name\n    return this.name;\n  }\n}\n\nlet jack = new Person()\n// Let's assume that the developer forgets to call setName:\n// jack.setName('Jack')\n\n// Compile-time(!) error: Compiler suspects that we\n// may possibly access something undefined and won't build the code:\njack.getName().length; // The code won't build and run\n\njack.getName()?.length; // Builds ok, no runtime error\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#getters-and-setters","title":"Getters and Setters","text":"<p>Setters and getters can be used to provide controlled access to object properties.</p> <p>In the following example, a setter is used to forbid setting invalid values of the '_age' property:</p> <pre><code>class Person {\n  name: string = '';\n  private _age: number = 0;\n  get age(): number { return this._age; }\n  set age(x: number) {\n    if (x &lt; 0) {\n      throw Error('Invalid age argument');\n    }\n    this._age = x;\n  }\n}\n\nlet p = new Person();\np.age; // 0\np.age = -42; // Error will be thrown as an attempt to set incorrect age\n</code></pre> <p>A class can define a getter, a setter or both.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#methods","title":"Methods","text":"<p>A method is a function that belongs to a class. A class can define instance methods, static methods or both. A static method belongs to the class itself, and can have access to static fields only. A <code>while</code> instance method has access to both static (class) fields and instance fields including private ones of its class.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#instance-methods","title":"Instance Methods","text":"<p>The example below illustrates how instanced methods work. The <code>calculateArea</code> method calculates the area of a rectangle by multiplying the height by the width:</p> <pre><code>class RectangleSize {\n  private height: number = 0;\n  private width: number = 0;\n  constructor(height: number, width: number) {\n    this.height = height;\n    this.width = width;\n  }\n  calculateArea(): number {\n    return this.height * this.width;\n  }\n}\n</code></pre> <p>To use an instance method, it must be called on an instance of the class:</p> <pre><code>let square = new RectangleSize(10, 10);\nsquare.calculateArea(); // output: 100\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#static-methods","title":"Static Methods","text":"<p>The keyword <code>static</code> is used to declare a method as static. Static methods belong to the class itself and have access to static fields only. A static method defines a common behavior of the class as a whole.</p> <p>The class name is used to call a static method:</p> <pre><code>class Cl {\n  static staticMethod(): string {\n    return 'this is a static method.';\n  }\n}\nconsole.log(Cl.staticMethod());\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#inheritance","title":"Inheritance","text":"<p>A class can extend another class. The class that is being extended by another class is called \u2018base class\u2019, \u2018parent class\u2019, or \u2018superclass\u2019. The class that extends another class is called \u2018extended class\u2019, \u2018derived class\u2019, or \u2018subclass\u2019.</p> <p>An extended class can implement several interfaces by using the following syntax:</p> <pre><code>class [extends BaseClassName] [implements listOfInterfaces] {\n  // ...\n}\n</code></pre> <p>An extended class inherits fields and methods, but not constructors from the base class, and can add its own fields and methods, as well as override methods defined by the base class.</p> <p>Example:</p> <pre><code>class Person {\n  name: string = '';\n  private _age = 0;\n  get age(): number {\n    return this._age;\n  }\n}\nclass Employee extends Person {\n  salary: number = 0;\n  calculateTaxes(): number {\n    return this.salary * 0.42;\n  }\n}\n</code></pre> <p>A class containing the <code>implements</code> clause must implement all methods defined in all listed interfaces, except the methods defined with default implementation.</p> <pre><code>interface DateInterface {\n  now(): string;\n}\nclass MyDate implements DateInterface {\n  now(): string {\n    // implementation is here\n    return 'now';\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#access-to-super","title":"Access to Super","text":"<p>The keyword <code>super</code> can be used to access instance fields, instance methods and constructors from the super class.</p> <p>It is often used to extend basic functionality of subclass with the required behavior taken from the super class:</p> <pre><code>class RectangleSize {\n  protected height: number = 0;\n  protected width: number = 0;\n\n  constructor (h: number, w: number) {\n    this.height = h;\n    this.width = w;\n  }\n\n  draw() {\n    /* draw bounds */\n  }\n}\nclass FilledRectangle extends RectangleSize {\n  color = ''\n  constructor (h: number, w: number, c: string) {\n    super(h, w); // call of super constructor\n    this.color = c;\n  }\n\n  draw() {\n    super.draw(); // call of super methods\n    // super.height - can be used here\n    /* fill rectangle */\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#override-methods","title":"Override Methods","text":"<p>A subclass can override implementation of a method defined in its superclass. An overridden method must have the same types of parameters, and same or derived return type as the original method.</p> <pre><code>class RectangleSize {\n  // ...\n  area(): number {\n    // implementation\n    return 0;\n  }\n}\nclass Square extends RectangleSize {\n  private side: number = 0;\n  area(): number {\n    return this.side * this.side;\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#method-overload-signatures","title":"Method Overload Signatures","text":"<p>A method can be specified to be called in different ways by writing overload signatures. To do so, several method headers that have the same name but different signatures are written and immediately followed by the single implementation method.</p> <pre><code>class C {\n  foo(x: number): void;            /* 1st signature */\n  foo(x: string): void;            /* 2nd signature */\n  foo(x: number | string): void {  /* implementation signature */\n  }\n}\nlet c = new C();\nc.foo(123);   // ok, 1st signature is used\nc.foo('aa');  // ok, 2nd signature is used\n</code></pre> <p>An error occurs if two overload signatures have the same name and identical parameter lists.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#constructors","title":"Constructors","text":"<p>A class declaration may contain a constructor that is used to initialize object state.</p> <p>A constructor is defined as follows:</p> <pre><code>constructor ([parameters]) {\n  // ...\n}\n</code></pre> <p>If no constructor is defined, then a default constructor with an empty parameter list is created automatically, for example:</p> <pre><code>class Point {\n  x: number = 0;\n  y: number = 0;\n}\nlet p = new Point();\n</code></pre> <p>In this case the default constructor fills the instance fields with default values for the field types.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#constructors-in-derived-classes","title":"Constructors in Derived Classes","text":"<p>The first statement of a constructor body can use the keyword <code>super</code> to explicitly call a constructor of the direct superclass.</p> <pre><code>class RectangleSize {\n  constructor(width: number, height: number) {\n    // ...\n  }\n}\nclass Square extends RectangleSize {\n  constructor(side: number) {\n    super(side, side);\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#constructor-overload-signatures","title":"Constructor Overload Signatures","text":"<p>A constructor can be specified to be called in different ways by writing overload signatures. To do so, several constructor headers that have the same name but different signatures are written and immediately followed by the single implementation constructor.</p> <pre><code>class C {\n  constructor(x: number)             /* 1st signature */\n  constructor(x: string)             /* 2nd signature */\n  constructor(x: number | string) {  /* Implementation signature */\n  }\n}\nlet c1 = new C(123);    // ok, 1st signature is used\nlet c2 = new C('abc');  // ok, 2nd signature is used\n</code></pre> <p>An error occurs if two overload signatures have the same name and identical parameter lists.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#visibility-modifiers","title":"Visibility Modifiers","text":"<p>Both methods and properties of a class can have visibility modifiers.</p> <p>There are several visibility modifiers:</p> <ul> <li><code>private</code></li> <li><code>protected</code></li> <li><code>public</code></li> </ul> <p>The default visibility is <code>public</code>.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#public-visibility","title":"Public Visibility","text":"<p>The <code>public</code> members (fields, methods, constructors) of a class are visible in any part of the program, where their class is visible.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#private-visibility","title":"Private Visibility","text":"<p>A <code>private</code> member cannot be accessed outside the class it is declared in. Example:</p> <pre><code>class C {\n  public x: string = '';\n  private y: string = '';\n  set_y (new_y: string) {\n    this.y = new_y // ok, as y is accessible within the class itself\n  }\n}\nlet c = new C();\nc.x = 'a'; // ok, the field is public\nc.y = 'b'; // compile-time error: 'y' is not visible\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#protected-visibility","title":"Protected Visibility","text":"<p>The modifier <code>protected</code> acts much like the modifier <code>private</code>, but the <code>protected</code> members are also accessible in derived classes. Example:</p> <pre><code>class Base {\n  protected x: string = '';\n  private y: string = '';\n}\nclass Derived extends Base {\n  foo() {\n    this.x = 'a'; // ok, access to protected member\n    this.y = 'b'; // compile-time error, 'y' is not visible, as it is private\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#object-literals","title":"Object Literals","text":"<p>An object literal is an expression that can be used to create a class instance and provide some initial values. It can be used instead of the expression <code>new</code> as it is more convenient in some cases.</p> <p>A class composite is written as a comma-separated list of name-value pairs enclosed in '{' and '}'.</p> <pre><code>class C {\n  n: number = 0;\n  s: string = '';\n}\n\nlet c: C = {n: 42, s: 'foo'};\n</code></pre> <p>Due to the static typing of the ArkTS, object literals can be used in a context where the class or interface type of the object literal can be inferred as in the example above. Other valid cases are illustrated below:</p> <pre><code>class C {\n  n: number = 0;\n  s: string = '';\n}\n\nfunction foo(c: C) {}\n\nlet c: C;\n\nc = {n: 42, s: 'foo'};  // type of the variable is used\nfoo({n: 42, s: 'foo'}); // type of the parameter is used\n\nfunction bar(): C {\n  return {n: 42, s: 'foo'}; // return type is used\n}\n</code></pre> <p>The type of an array element or of a class field can also be used:</p> <pre><code>class C {\n  n: number = 0;\n  s: string = '';\n}\nlet cc: C[] = [{n: 1, s: 'a'}, {n: 2, s: 'b'}];\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#object-literals-of-record-type","title":"Object Literals of Record Type","text":"<p>The generic Record type is used to map the properties of a type (Key type) to another type (Value type). <p>A special form of object literal is used to initialize the value of such type:</p> <pre><code>let map: Record&lt;string, number&gt; = {\n  'John': 25,\n  'Mary': 21,\n}\n\nmap['John']; // 25\n</code></pre> <p>The K type can be either string or number, while V can be any type.</p> <pre><code>interface PersonInfo {\n  age: number;\n  salary: number;\n}\nlet map: Record&lt;string, PersonInfo&gt; = {\n  'John': { age: 25, salary: 10},\n  'Mary': { age: 21, salary: 20}\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#abstract-classes","title":"Abstract Classes","text":"<p>A class with the modifier abstract is known as abstract class. Abstract classes can be used to represent notions that are common to some set of more concrete notions.</p> <p>A compile-time error occurs if an attempt is made to create an instance of an abstract class:</p> <pre><code>abstract class X {\n  field: number;\n  constructor(p: number) {\n    this.field = p; \n  }\n}\n\nlet x = new X(666)  // Compile-time error: Cannot create an instance of an abstract class.\n</code></pre> <p>Subclasses of an abstract class can be non-abstract or in turn abstract. A non-abstract subclass of an abstract superclass can be instantiated. As a result, a constructor for the abstract class, and field initializers for non-static fields of that class are executed\uff1a</p> <pre><code>abstract class Base {\n  field: number;\n  constructor(p: number) {\n    this.field = p; \n  }\n}\n\nclass Derived extends Base {\n  constructor(p: number) {\n    super(p); \n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#abstract-methods","title":"Abstract Methods","text":"<p>A method with the modifier abstract is considered an abstract method. Abstract methods do not have bodies, i.e., they can be declared but not implemented.</p> <p>Only abstract classes can have abstract methods. A compile-time error occurs if a non-abstract class has an abstract method:</p> <pre><code>class Y {\n  abstract method(p: string)  //Compile-time error: Abstract methods can only appear within an abstract class.\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#interfaces","title":"Interfaces","text":"<p>An interface declaration introduces a new type. Interfaces are a common way of defining contracts between various part of codes.</p> <p>Interfaces are used to write polymorphic code, which can be applied to any class instances that implement a particular interface.</p> <p>An interface usually contains properties and method headers.</p> <p>Examples:</p> <pre><code>interface Style {\n  color: string; // property\n}\ninterface AreaSize {\n  calculateAreaSize(): number; // method header\n  someMethod(): void;    // method header\n}\n</code></pre> <p>Examples of a class implementing an interface:</p> <pre><code>// Interface:\ninterface AreaSize {\n  calculateAreaSize(): number; // method header\n  someMethod(): void;    // method header\n}\n\n// Implementation:\nclass RectangleSize implements AreaSize {\n  private width: number = 0;\n  private height: number = 0;\n  someMethod(): void {\n    console.log('someMethod called');\n  }\n  calculateAreaSize(): number {\n    this.someMethod(); // calls another method and returns result\n    return this.width * this.height;\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#interface-properties","title":"Interface Properties","text":"<p>An interface property can be in a form of field, getter, setter, or both getter and setter.</p> <p>A property field is just a shortcut notation of a getter/setter pair, and the following notations are equal:</p> <pre><code>interface Style {\n  color: string;\n}\n</code></pre> <pre><code>interface Style {\n  get color(): string\n  set color(x: string)\n}\n</code></pre> <p>A class that implements an interface may also use a short or a long notation:</p> <pre><code>interface Style {\n  color: string;\n}\n\nclass StyledRectangle implements Style {\n  color: string = '';\n}\n</code></pre> <pre><code>interface Style {\n  color: string;\n}\n\nclass StyledRectangle implements Style {\n  private _color: string = '';\n  get color(): string { return this._color; }\n  set color(x: string) { this._color = x; }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#interface-inheritance","title":"Interface Inheritance","text":"<p>An interface may extend other interfaces like in the example below:</p> <pre><code>interface Style {\n  color: string;\n}\n\ninterface ExtendedStyle extends Style {\n  width: number;\n}\n</code></pre> <p>An extended interface contains all properties and methods of the interface it extends, and can also add its own properties and methods.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#abstract-classes-and-interfaces","title":"Abstract Classes and Interfaces","text":"<p>Abstract classes and interfaces cannot be instantiated. Abstract classes are abstractions of classes, used to capture the general characteristics of subclasses, and interfaces are abstractions of behavior. The difference between abstract classes and interfaces in ArkTS is as follows:</p> <ul> <li>Abstract classes can only inherit from a single source, while interfaces can be implemented in multiple layers;</li> <li>In abstract classes, there can be implementations of methods, but interfaces are completely abstract and there is no implementation of methods;</li> <li>The interface cannot contain static code blocks and static methods, while abstract classes can have static code blocks and static functions;</li> <li>Abstract classes can have constructors, while interfaces cannot have constructors.</li> </ul>"},{"location":"application-development/basic-concepts/arkts-language-reference/#generic-types-and-functions","title":"Generic Types and Functions","text":"<p>Generic types and functions allow creating the code capable to work over a variety of types rather than a single type.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#generic-classes-and-interfaces","title":"Generic Classes and Interfaces","text":"<p>A class and an interface can be defined as generics, adding parameters to the type definition, like the type parameter <code>Element</code> in the following example:</p> <pre><code>class CustomStack&lt;Element&gt; {\n  public push(e: Element):void {\n    // ...\n  }\n}\n</code></pre> <p>To use type CustomStack, the type argument must be specified for each type parameter:</p> <pre><code>let s = new CustomStack&lt;string&gt;();\ns.push('hello');\n</code></pre> <p>Compiler ensures type safety while working with generic types and functions. See below:</p> <pre><code>let s = new CustomStack&lt;string&gt;();\ns.push(55); // That will be a compile-time error as 55 is not compatible with type string.\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#generic-constraints","title":"Generic Constraints","text":"<p>Type parameters of generic types can be bounded. For example, the <code>Key</code> type parameter in the <code>MyHashMap&lt;Key, Value&gt;</code> container must have the <code>hash</code> method.</p> <pre><code>interface Hashable {\n  hash(): number;\n}\nclass MyHashMap&lt;Key extends Hashable, Value&gt; {\n  public set(k: Key, v: Value) {\n    let h = k.hash();\n    // ... other code ...\n  }\n}\n</code></pre> <p>In the above example, the <code>Key</code> type extends <code>Hashable</code>, and all methods of <code>Hashable</code> interface can be called for keys.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#generic-functions","title":"Generic Functions","text":"<p>Use a generic function to create a more universal code. Consider a function that returns the last element of the array:</p> <pre><code>function last(x: number[]): number {\n  return x[x.length - 1];\n}\nlast([1, 2, 3]); // output: 3\n</code></pre> <p>If the same function needs to be defined for any array, then define it as a generic with a type parameter:</p> <pre><code>function last&lt;T&gt;(x: T[]): T {\n  return x[x.length - 1];\n}\n</code></pre> <p>Now, the function can be used with any array.</p> <p>In a function call, type argument can be set explicitly or implicitly:</p> <pre><code>// Explicit type argument\nlast&lt;string&gt;(['aa', 'bb']);\nlast&lt;number&gt;([1, 2, 3]);\n\n// Implicit type argument:\n// Compiler understands the type argument based on the type of the call arguments\nlast([1, 2, 3]);\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#generic-defaults","title":"Generic Defaults","text":"<p>Type parameters of generic types can have defaults. It allows using just the generic type name instead of specifying the actual type arguments. The example below illustrates this for both classes and functions.</p> <pre><code>class SomeType {}\ninterface Interface &lt;T1 = SomeType&gt; { }\nclass Base &lt;T2 = SomeType&gt; { }\nclass Derived1 extends Base implements Interface { }\n// Derived1 is semantically equivalent to Derived2\nclass Derived2 extends Base&lt;SomeType&gt; implements Interface&lt;SomeType&gt; { }\n\nfunction foo&lt;T = number&gt;(): T {\n  // ...\n}\nfoo();\n// such function is semantically equivalent to the call below\nfoo&lt;number&gt;();\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#null-safety","title":"Null Safety","text":"<p>All types in ArkTS by default are non-nullable, so the value of a type cannot be null. It is similar to TypeScript behavior in strict null checking mode (<code>strictNullChecks</code>), but the rules are stricter.</p> <p>In the example below, all lines cause a compile-time error:</p> <pre><code>let x: number = null;    // Compile-time error\nlet y: string = null;    // Compile-time error\nlet z: number[] = null;  // Compile-time error\n</code></pre> <p>A variable that can have a null value is defined with a union type <code>T | null</code>.</p> <pre><code>let x: number | null = null;\nx = 1;    // ok\nx = null; // ok\nif (x != null) { /* do something */ }\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#non-null-assertion-operator","title":"Non-Null Assertion Operator","text":"<p>A postfix operator <code>!</code> can be used to assert that its operand is non-null.</p> <p>If applied to a null value, the operator throws an error. Otherwise, the type of the value is changed from <code>T | null</code> to <code>T</code>:</p> <pre><code>class A {\n  value: number = 0;\n}\n\nfunction foo(a: A | null) {\n  a.value;   // compile time error: cannot access to a nullable value\n\n  // ok, if the value of a is not null at runtime, the fields of a can be accessed;\n  // If the value of runtime a is empty, a runtime exception occurs.\n  a!.value;  \n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#null-coalescing-operator","title":"Null-Coalescing Operator","text":"<p>The null-coalescing binary operator <code>??</code> checks whether the evaluation of the left-hand-side expression is equal to <code>null</code> or <code>undefined</code>. If it is, then the result of the expression is the right-hand-side expression; otherwise, it is the left-hand-side expression.</p> <p>In other words, <code>a ?? b</code> equals the ternary operator <code>(a != null &amp;&amp; a != undefined) ? a : b</code>.</p> <p>In the following example, the method <code>getNick</code> returns a nickname if it is set; otherwise, an empty string is returned:</p> <pre><code>class Person {\n  // ...\n  nick: string | null = null;\n  getNick(): string {\n    return this.nick ?? '';\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#optional-chaining","title":"Optional Chaining","text":"<p>Optional chaining operator <code>?.</code> allows writing code where the evaluation stops at an expression that is partially evaluated to <code>null</code> or <code>undefined</code>.</p> <pre><code>class Person {\n  nick: string | null = null;\n  spouse?: Person;\n\n  setSpouse(spouse: Person): void {\n    this.spouse = spouse;\n  }\n\n  getSpouseNick(): string | null | undefined {\n    return this.spouse?.nick;\n  }\n\n  constructor(nick: string) {\n    this.nick = nick;\n    this.spouse = undefined;\n  }\n}\n</code></pre> <p>Note: The return type of <code>getSpouseNick</code> must be <code>string | null | undefined</code>, as the method can return <code>null</code> or <code>undefined</code>.</p> <p>An optional chain can be of any length and contain any number of <code>?.</code> operators.</p> <p>In the following sample, the output is a person's spouse nickname if that person has a spouse, and the spouse has a nickname.</p> <p>Otherwise, the output is <code>undefined</code>:</p> <pre><code>class Person {\n  nick: string | null = null;\n  spouse?: Person;\n\n  constructor(nick: string) {\n    this.nick = nick;\n    this.spouse = undefined;\n  }\n}\n\nlet p: Person = new Person('Alice');\np.spouse?.nick; // undefined\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#modules","title":"Modules","text":"<p>Programs are organized as sets of compilation units or modules.</p> <p>Each module creates its own scope, i.e., any declarations (variables, functions, classes, etc.) declared in the module are not visible outside that module unless they are explicitly exported.</p> <p>Conversely, a variable, function, class, interface, etc. exported from another module must first be imported to a module.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#export","title":"Export","text":"<p>A top-level declaration can be exported by using the keyword <code>export</code>.</p> <p>A declared name that is not exported is considered private and can be used only in the module where it is declared.</p> <pre><code>export class Point {\n  x: number = 0;\n  y: number = 0;\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n}\nexport let Origin = new Point(0, 0);\nexport function Distance(p1: Point, p2: Point): number {\n  return Math.sqrt((p2.x - p1.x) * (p2.x - p1.x) + (p2.y - p1.y) * (p2.y - p1.y));\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#import","title":"Import","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#static-import","title":"Static Import","text":"<p>Import declarations are used to import entities exported from other modules and provide their bindings in the current module. An import declaration consists of two parts:</p> <ul> <li>Import path that determines the module to import from.</li> <li>Import bindings that define the set of usable entities in the imported module, and the form of use (i.e., qualified or unqualified use).</li> </ul> <p>Import bindings may have several forms.</p> <p>Let's assume a module has the path './utils' and export entities 'X' and 'Y'.</p> <p>An import binding of the form <code>* as A</code> binds the name 'A', and all entities exported from the module defined by the import path can be accessed by using the qualified name <code>A.name</code>:</p> <pre><code>import * as Utils from './utils';\nUtils.X // denotes X from Utils\nUtils.Y // denotes Y from Utils\n</code></pre> <p>An import binding of the form <code>{ ident1, ..., identN }</code> binds an exported entity with a specified name, which can be used as a simple name:</p> <pre><code>import { X, Y } from './utils';\nX // denotes X from Utils\nY // denotes Y from Utils\n</code></pre> <p>If a list of identifiers contains aliasing of the form <code>ident as alias</code>, then entity <code>ident</code> is bound under the name <code>alias</code>:</p> <pre><code>import { X as Z, Y } from './utils';\nZ // denotes X from Utils\nY // denotes Y from Utils\nX // Compile-time error: 'X' is not visible\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#dynamic-import","title":"Dynamic Import","text":"<p>Unlike static import, static import allows you to load a module conditionally or on demand. The import() syntax, commonly called dynamic import, is a function-like expression that allows for dynamic loading of a module. It returns a promise. In the following example, import(modulePath) loads the module and returns a promise that resolves into a module object that contains all its exports. This expression can be called from any place in the code.</p> <pre><code>// Calc.ts\nexport function add(a:number, b:number):number {\n  let c = a + b;\n  console.info('Dynamic import, %d + %d = %d', a, b, c);\n  return c;\n}\n// Index.ts\nimport(\"./Calc\").then((obj: ESObject) =&gt; {\n  console.info(obj.add(3, 5));  \n}).catch((err: Error) =&gt; {\n  console.error(\"Module dynamic import error: \", err);\n});\n</code></pre> <p>You can also use let module = await import(modulePath) inside an async function.</p> <pre><code>// say.ts\nexport function hi() {\n  console.log('Hello');\n}\nexport function bye() {\n  console.log('Bye');\n}\n</code></pre> <p>Then dynamic import can be like this:</p> <pre><code>async function test() {\n  let ns = await import('./say');\n  let hi = ns.hi;\n  let bye = ns.bye;\n  hi();\n  bye();\n}\n</code></pre>"},{"location":"application-development/basic-concepts/arkts-language-reference/#top-level-statements","title":"Top-Level Statements","text":"<p>A module can contain any statements at the module level, except <code>return</code> ones.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#keywords","title":"Keywords","text":""},{"location":"application-development/basic-concepts/arkts-language-reference/#this","title":"this","text":"<p>The keyword <code>this</code> can only be used in instance methods of a class.</p> <p>Example</p> <pre><code>class A {\n  count: string = 'a';\n  m(i: string): void {\n    this.count = i;\n  }\n}\n</code></pre> <p>Constraints:</p> <ul> <li>Type notation using <code>this</code> is not supported.</li> <li>Using <code>this</code> inside standalone functions is not supported.</li> </ul> <p>Example</p> <pre><code>class A {\n  n: number = 0;\n  f1(arg1: this) {} // Compile-time error. Type notation using this is not supported.\n  static f2(arg1: number) {\n    this.n = arg1;  // Compile-time error. Using this inside standalone functions is not supported.\n  }\n}\n\nfunction foo(arg1: number) {\n  this.n = i;       // Compile-time error. Using this inside standalone functions is not supported.\n}\n</code></pre> <p>The keyword <code>this</code> used as a primary expression denotes a value that is a reference to the following:</p> <ul> <li>Object for which the instance method is called; or</li> <li>Object being constructed.</li> </ul> <p>The value denoted by <code>this</code> in a lambda body and in the surrounding context is the same.</p>"},{"location":"application-development/basic-concepts/arkts-language-reference/#reference","title":"Reference","text":"<p>For additional information please refer to the ArkTS Basics</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/","title":"Introduction to ArkTS","text":"<p>Welcome to the tutorial for ArkTS, a TypeScript-based programming language designed specifically for building high-performance mobile applications.</p> <p>ArkTS is optimized to provide better performance and efficiency while maintaining the familiar syntax of TypeScript.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#basic-syntax-overview","title":"Basic Syntax Overview","text":"<p>With a basic understanding of the ArkTS language, let's explore its composition through an example. As shown below, when the user clicks the button, the text content changes from \"Hello World\" to \"Hello ArkUI.\"  </p> <p>Portions of this documentation are adapted from OpenHarmony Documentation by OpenHarmony community, licensed under CC BY 4.0.</p> <p>Figure 1 Example effect drawing </p> <p>In this example, the basic composition of ArkTS is as follows:</p> <p>Figure 2 Basic composition of ArkTS </p> <p>NOTE</p> <p>The name of a custom variable cannot be the same as that of any universal attribute or event.</p> <ul> <li>Decorator: A design pattern used to decorate classes, structs, methods, and variables to assign special meanings to them. In the preceding sample code, <code>@Entry</code>, <code>@Component</code>, and <code>@State</code> are decorators. </li> <li><code>@Component</code> indicates a custom component.</li> <li><code>@Entry</code> indicates that the custom component is an entry component.</li> <li> <p><code>@State</code> indicates a state variable in the component, whose change will trigger the UI to re-render.</p> </li> <li> <p>UI description: A declarative description of the UI structure, such as the code block of the build() method.</p> </li> <li> <p>Custom component: A reusable UI unit that can be used with other components, such as the struct Hello decorated by <code>@Component</code>.</p> </li> <li> <p>Built-in component: A default basic or container component preset in ArkTS, which can be directly invoked, such as Column, Text, Divider, and Button components in the sample code.</p> </li> <li> <p>Attribute method: A method used to configure component attributes, such as fontSize(), width(), height(), and backgroundColor(). You can configure multiple attributes of a component in method chaining mode.</p> </li> <li> <p>Event method: A method used to add the logic for a component to respond to an event. In the sample code, onClick() following Button is an event method. You can configure response logic for multiple events in method chaining mode.</p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#key-features","title":"Key Features","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#declarative-ui","title":"Declarative UI","text":"<p>ArkTS declaratively combines and extends components to describe the UI of an application. It also provides basic methods for configuring attributes, events, and child components to help you implement application interaction logic.</p> <p>Portions of this documentation are adapted from OpenHarmony Documentation by OpenHarmony community, licensed under CC BY 4.0.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#creating-a-component","title":"Creating a Component","text":"<p>Depending on the builder, you can create components with or without mandatory parameters.</p> <p>NOTE  The new operator is not required when you create a component.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#without-mandatory-parameters","title":"Without Mandatory Parameters","text":"<p>A struct without mandatory parameters is a component defined with empty parentheses. For example, the Divider component:</p> <pre><code>Column() {\n  Text('item 1')\n  Divider()\n  Text('item 2')\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#with-mandatory-parameters","title":"With Mandatory Parameters","text":"<p>A struct with mandatory parameters is a component whose API definition expects parameters enclosed in parentheses.</p> <ul> <li>Set the mandatory parameter src of the Image component as follows:</li> </ul> <pre><code>Image('https://xyz/test.jpg')\n</code></pre> <ul> <li>Set the optional parameter content of the Text component.</li> </ul> <pre><code>// Parameter of the string type\nText('test')\n// Add application resources in $r format, which can be used in multi-language scenarios.\nText($r('app.string.title_value'))\n// No mandatory parameters\nText()\n</code></pre> <ul> <li> <p>You can also use variables or expressions to assign values to parameters. The result type returned by an expression must meet the parameter type requirements.     For example, to set a variable or expression to construct the Image and Text components:</p> <pre><code>Image(this.imagePath)\nImage('https://' + this.imageUrl)\nText(`count: ${this.count}`)\n</code></pre> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#configuring-attributes","title":"Configuring Attributes","text":"<p>Use chainable attribute methods to configure the style and other attributes of built-in components. It is recommended that a separate line be used for each attribute method.</p> <ul> <li>Example of configuring the fontSize attribute for the Text component:</li> </ul> <pre><code>Text('test')\n  .fontSize(12)\n</code></pre> <ul> <li>Example of configuring multiple attributes for the Image component:</li> </ul> <pre><code>Image('test.jpg')\n  .alt('error.jpg')    \n  .width(100)    \n  .height(100)\n</code></pre> <ul> <li>Attribute methods accept expressions and variables as well constant parameters.</li> </ul> <pre><code>Text('hello')\n  .fontSize(this.size)\nImage('test.jpg')\n  .width(this.count % 2 === 0 ? 100 : 200)    \n  .height(this.offset + 100)\n</code></pre> <ul> <li>For built-in components, ArkUI also predefines some enumeration types. These enumeration types can be passed as parameters, as long as they meet the parameter type requirements.   Example of configuring the font color and style of the Text component:</li> </ul> <pre><code>Text('hello')\n  .fontSize(20)\n  .fontColor(Color.Red)\n  .fontWeight(FontWeight.Bold)\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#handling-events","title":"Handling Events","text":"<p>Use chainable event methods to configure events supported by built-in components. It is recommended that a separate line be used for each event method.</p> <ul> <li>Example of using an arrow function expression to configure the event of a component:</li> </ul> <pre><code>Button('Click me')\n  .onClick(() =&gt; {\n    this.myText = 'ArkUI';\n  })\n</code></pre> <ul> <li>Example of using an arrow function expression to configure the event of a component (() =&gt; {...} must be used to ensure that the function is bound to the component and complies with the ArkTS syntax specifications):</li> </ul> <pre><code>Button('add counter')\n  .onClick(() =&gt; {\n    this.counter += 2;\n  })\n</code></pre> <ul> <li>Example of using a component's member function to configure the event of the component, where this binding is needed: (This usage is not recommended in ArkTS.)</li> </ul> <pre><code>myClickHandler(): void {\n  this.counter += 2;\n}\n...\nButton('add counter')\n  .onClick(this.myClickHandler.bind(this))\n</code></pre> <ul> <li>Example of using an arrow function expression for a declaration, where this binding is not needed:</li> </ul> <pre><code>fn = () =&gt; {\n  console.info(`counter: ${this.counter}`)\n  this.counter++\n}\n...\nButton('add counter')\n  .onClick(this.fn)\n</code></pre> <p>NOTE In arrow functions, this inherits its value from the surrounding (lexical) scope in which they are defined. This means that, in anonymous functions, this may present an unclear reference and is therefore not allowed in ArkTS.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#configuring-child-components","title":"Configuring Child Components","text":"<p>For a component with child components, for example, a container component, add the UI descriptions of the child components inside parentheses. The Column, Row, Stack, Grid, and List components are all container components.</p> <ul> <li>Simple example of configuring child components for the Column component:</li> </ul> <pre><code>Column() {\n  Text('Hello')\n    .fontSize(100)\n  Divider()\n  Text(this.myText)\n    .fontSize(100)\n    .fontColor(Color.Red)\n}\n</code></pre> <ul> <li>Example of nested child components in the Column component:.</li> </ul> <pre><code>Column() {\n  Row() {\n    Image('test1.jpg')\n      .width(100)\n      .height(100)\n    Button('click +1')\n      .onClick(() =&gt; {\n        console.info('+1 clicked!');\n      })\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#componentization","title":"Componentization","text":"<p>Components are the fundamental building blocks of a user interface. Everything you see on the screen is created by combining multiple components. Designing a user interface is essentially about assembling these components in a meaningful way. ArkTS provides a wide range of built-in components, such as <code>Text</code>, <code>Button</code>, and <code>Image</code>. Moreover, it allows developers to create custom components to better suit specific requirements.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#basic-component","title":"Basic Component","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#row-component","title":"Row Component","text":"<p>The &lt;Row&gt; component lays out child components horizontally.</p> <p>NOTE</p> <p>This component is supported since API version 7. Updates will be marked with a superscript to indicate their earliest API version.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#child-components","title":"Child Components","text":"<p>Supported</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#apis","title":"APIs","text":"<pre><code>Row(value?:{space?:  number | string })\n</code></pre> <p>This API can be used in ArkTS widgets since API version 9.</p> <p>Parameters</p> Name Type Mandatory Description space number | string No Horizontal spacing between two adjacent child components.Since API version 9, this parameter does not take effect when it is set to a negative number or when justifyContent is set to FlexAlign.SpaceBetween, FlexAlign.SpaceAround or FlexAlign.SpaceEvenly.Default value: 0, in vpNOTEThe value can be a number greater than or equal to 0 or a string that can be converted to a number."},{"location":"application-development/basic-concepts/introduction-to-arkts/#attributes","title":"Attributes","text":"Name Type Description alignItems VerticalAlign Alignment mode of child components in the vertical direction.Default value: VerticalAlign.CenterThis API can be used in ArkTS widgets since API version 9. justifyContent FlexAlign Alignment mode of the child components in the horizontal direction.Default value: FlexAlign.StartThis API can be used in ArkTS widgets since API version 9. <p>NOTE </p> <p>During row layout, child components do not shrink if flexShrink is not set for them. In this case, the total size of the child components on the main axis can exceed the size of the container on the main axis.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#example","title":"Example","text":"<pre><code>// xxx.ets\n@Entry\n@Component\nstruct RowExample {\n  build() {\n    Column({ space: 5 }) {\n      // Set the horizontal spacing between two adjacent child components to 5.\n      Text('space').width('90%')\n      Row({ space: 5 }) {\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE)\n        Row().width('30%').height(50).backgroundColor(0x00FFFF)\n      }.width('90%').height(107).border({ width: 1 })\n\n      // Set the alignment mode of the child components in the vertical direction.\n      Text('alignItems(Bottom)').width('90%')\n      Row() {\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE)\n        Row().width('30%').height(50).backgroundColor(0x00FFFF)\n      }.width('90%').alignItems(VerticalAlign.Bottom).height('15%').border({ width: 1 })\n\n      Text('alignItems(Center)').width('90%')\n      Row() {\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE)\n        Row().width('30%').height(50).backgroundColor(0x00FFFF)\n      }.width('90%').alignItems(VerticalAlign.Center).height('15%').border({ width: 1 })\n\n      // Set the alignment mode of the child components in the horizontal direction.\n      Text('justifyContent(End)').width('90%')\n      Row() {\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE)\n        Row().width('30%').height(50).backgroundColor(0x00FFFF)\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.End)\n\n      Text('justifyContent(Center)').width('90%')\n      Row() {\n        Row().width('30%').height(50).backgroundColor(0xAFEEEE)\n        Row().width('30%').height(50).backgroundColor(0x00FFFF)\n      }.width('90%').border({ width: 1 }).justifyContent(FlexAlign.Center)\n    }.width('100%')\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#column-component","title":"Column Component","text":"<p>The &lt;Column&gt; component lays out child components vertically.</p> <p>NOTE</p> <p>This component is supported since API version 7. Updates will be marked with a superscript to indicate their earliest API version.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#child-components_1","title":"Child Components","text":"<p>Supported</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#apis_1","title":"APIs","text":"<pre><code>Column(value?: {space?: string | number})\n</code></pre> <p>This API can be used in ArkTS widgets since API version 9.</p> <p>Parameters</p> Name Type Mandatory Description space string | number No Vertical spacing between two adjacent child components.Since API version 9, this parameter does not take effect when it is set to a negative number or when justifyContent is set to FlexAlign.SpaceBetween, FlexAlign.SpaceAround or FlexAlign.SpaceEvenly.Default value: 0Unit: vpNOTEThe value can be a number greater than or equal to 0 or a string that can be converted to a number."},{"location":"application-development/basic-concepts/introduction-to-arkts/#attributes_1","title":"Attributes","text":"Name Type Description alignItems HorizontalAlign Alignment mode of the child components in the horizontal direction.Default value: HorizontalAlign.CenterThis API can be used in ArkTS widgets since API version 9. justifyContent FlexAlign Alignment mode of the child components in the vertical direction.Default value: FlexAlign.StartThis API can be used in ArkTS widgets since API version 9. <p>NOTE </p> <p>During column layout, child components do not shrink if flexShrink is not set for them. In this case, the total size of the child components on the main axis can exceed the size of the container on the main axis.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#example_1","title":"Example","text":"<pre><code>// xxx.ets\n@Entry\n@Component\nstruct ColumnExample {\n  build() {\n    Column({ space: 5 }) {\n      // Set the vertical spacing between two adjacent child components to 5.\n      Text('space').width('90%')\n      Column({ space: 5 }) {\n        Column().width('100%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('100%').height(30).backgroundColor(0x00FFFF)\n      }.width('90%').height(100).border({ width: 1 })\n\n      // Set the alignment mode of the child components in the horizontal direction.\n      Text('alignItems(Start)').width('90%')\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('50%').height(30).backgroundColor(0x00FFFF)\n      }.alignItems(HorizontalAlign.Start).width('90%').border({ width: 1 })\n\n      Text('alignItems(End)').width('90%')\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('50%').height(30).backgroundColor(0x00FFFF)\n      }.alignItems(HorizontalAlign.End).width('90%').border({ width: 1 })\n\n      Text('alignItems(Center)').width('90%')\n      Column() {\n        Column().width('50%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('50%').height(30).backgroundColor(0x00FFFF)\n      }.alignItems(HorizontalAlign.Center).width('90%').border({ width: 1 })\n\n      // Set the alignment mode of the child components in the vertical direction.\n      Text('justifyContent(Center)').width('90%')\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('90%').height(30).backgroundColor(0x00FFFF)\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.Center)\n\n      Text('justifyContent(End)').width('90%')\n      Column() {\n        Column().width('90%').height(30).backgroundColor(0xAFEEEE)\n        Column().width('90%').height(30).backgroundColor(0x00FFFF)\n      }.height(100).border({ width: 1 }).justifyContent(FlexAlign.End)\n    }.width('100%').padding({ top: 5 })\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#custom-component","title":"Custom Component","text":"<p>In ArkUI, components are the visual elements of the interface, divided into built-in components provided by the framework and custom components created by developers. Relying solely on built-in components can lead to rigid, hard-to-maintain designs. Custom components help improve code reusability, separate UI from business logic, and support version upgrades. They offer key features such as: - Combinable: Combine built-in and custom components with shared properties and methods.</p> <ul> <li> <p>Reusable: Easily reused across different parts of the app.</p> </li> <li> <p>Data-driven updates: Maintain internal state and update the UI when state changes.</p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#create-a-custom-component","title":"Create a Custom Component","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#basic-usage-of-custom-component","title":"Basic Usage of Custom Component","text":"<p>The following example shows the basic usage of a custom component. <pre><code> // xxx.ets\n@Component\nstruct HelloComponent {\n  @State message: string = 'Hello, World!';\n\n  build() {\n    // The HelloComponent custom component combines the &lt;Row&gt; and &lt;Text&gt; built-in components.\n    Row() {\n      Text(this.message)\n        .onClick(() =&gt; {\n          // The change of the state variable message drives the UI to be re-rendered. As a result, the text changes from \"Hello, World!\" to \"Hello, ArkUI!\".\n          this.message = 'Hello, ArkUI!';\n        })\n    }\n  }\n}\n</code></pre> On <code>Previewer</code>, click <code>Hello, World!</code>, the text will change into <code>Hello, ArkUI!</code>.</p> <p>NOTE</p> <p>To reference the custom component in another file, use the keyword export to export the component and then use import to import it to the target file.</p> <p>Multiple HelloComponent instances can be created in build() of other custom components. In this way, HelloComponent is reused by those custom components.</p> <pre><code>@Entry\n@Component\nstruct ParentComponent {\n  build() {\n    Column() {\n      Text('ArkUI message')\n      HelloComponent({ message: 'Hello World!' });\n      Divider()\n      HelloComponent({message: 'Hello, World!'});\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#basic-structure-of-a-custom-component","title":"Basic Structure of a Custom Component","text":"<p>Basic structure are listed below: - struct The definition of a custom component must start with the @Component struct followed by the component name, and then component body enclosed by curly brackets. No inheritance is allowed. You can omit the new operator when instantiating a struct.</p> <p>NOTE</p> <p>The name or its class or function name of a custom component must be different from that of any built-in components.</p> <ul> <li>@Component The @Component decorator can decorate only the structs declared by the struct keyword. When being decorated by @Component, a struct has the componentization capability. You must implement the build function for it to describe the UI. Each struct can be decorated by only one @Component. @Component can accept an optional parameter of the Boolean type.</li> </ul> <p>NOTE</p> <p>This decorator can be used in ArkTS widgets since API version 9.</p> <p>An optional parameter of the Boolean type can be used in the @Component since API version 11.</p> <p><pre><code>@Component\nstruct MyComponent {\n}\n</code></pre> - The build Function The build function is used to define the declarative UI description of a custom component. Every custom component must define a build function.</p> <pre><code>@Component\nstruct MyComponent {\n  build() {\n  }\n}\n</code></pre> <ul> <li>@Entry A custom component decorated with @Entry is used as the default entry component of the page. Only one component can be decorated with @Entry in a single page. The @Entry decorator accepts an optional parameter of type LocalStorage.</li> </ul> <p>NOTE</p> <p>This decorator can be used in ArkTS widgets since API version 9.</p> <p>Since API version 10, the @Entry decorator accepts an optional parameter of type LocalStorage or type EntryOptions.</p> <p>This decorator can be used in atomic services since API version 11.</p> <pre><code>@Entry\n@Component\nstruct MyComponent {\n}\n</code></pre> <ul> <li>@Reusable Custom components decorated by @Reusable can be reused.</li> </ul> <p>NOTE</p> <p>This decorator can be used in ArkTS widgets since API version 10.</p> <pre><code>@Reusable\n@Component\nstruct MyComponent {\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#rules-for-custom-component-parameters","title":"Rules for Custom Component Parameters","text":"<p>As can be learnt from preceding examples, a custom component can be created from a build method. During the creation, the custom component's parameters are initialized based on the decorator rules.</p> <p><pre><code>@Component\nstruct MyComponent {\n  private countDownFrom: number = 0;\n  private color: Color = Color.Blue;\n\n  build() {\n  }\n}\n\n@Entry\n@Component\nstruct ParentComponent {\n  private someColor: Color = Color.Pink;\n\n  build() {\n    Column() {\n      // Create an instance of MyComponent and initialize its countDownFrom variable with the value 10 and its color variable with the value this.someColor.\n      MyComponent({ countDownFrom: 10, color: this.someColor })\n    }\n  }\n}\n</code></pre> In the following example, a function in the parent component is passed to the child component and called there.</p> <p><pre><code>@Entry\n@Component\nstruct Parent {\n  @State cnt: number = 0\n  submit: () =&gt; void = () =&gt; {\n    this.cnt++;\n  }\n\n  build() {\n    Column() {\n      Text(`${this.cnt}`)\n      Son({ submitArrow: this.submit })\n    }\n  }\n}\n\n@Component\nstruct Son {\n  submitArrow?: () =&gt; void\n\n  build() {\n    Row() {\n      Button('add')\n        .width(80)\n        .onClick(() =&gt; {\n          if (this.submitArrow) {\n            this.submitArrow()\n          }\n        })\n    }\n    .height(56)\n  }\n}\n</code></pre> Click the button defined in <code>Son</code>, <code>Text</code> result will be updated in <code>Parent</code>.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#rules-in-build-function","title":"Rules in build Function","text":"<p>Whatever declared in build() are called UI descriptions. UI descriptions must comply with the following rules: - For an @Entry decorated custom component, exactly one root component is required under build(). This root component must be a container component. ForEach is not allowed at the top level. For an @Component decorated custom component, exactly one root component is required under build(). This root component is not necessarily a container component. ForEach is not allowed at the top level.   <pre><code>@Entry\n@Component\nstruct MyComponent {\n  build() {\n    // Exactly one root component is required, and it must be a container component.\n    Row() {\n      ChildComponent() \n    }\n  }\n}\n\n@Component\nstruct ChildComponent {\n  build() {\n    // Exactly one root component is required, and it is not necessarily a container component.\n    Image('test.jpg')\n  }\n}\n</code></pre></p> <ul> <li>Local variable declaration is not allowed. The following example should be avoided:</li> </ul> <pre><code>build() {\n  // Avoid: declaring a local variable.\n  let num: number = 1;\n}\n</code></pre> <ul> <li><code>console.info</code> can be used in the UI description only when it is in a method or function. The following example should be avoided:</li> </ul> <pre><code>build() {\n  // Avoid: using console.info directly in UI description.\n  console.info('print debug log');\n}\n</code></pre> <ul> <li>Creation of a local scope is not allowed. The following example should be avoided:</li> </ul> <pre><code>build() {\n  // Avoid: creating a local scope.\n  {\n    // ...\n  }\n}\n</code></pre> <ul> <li>Only methods decorated by @Builder can be called. The parameters of built-in components can be the return values of TS methods.</li> </ul> <pre><code>@Component\nstruct ParentComponent {\n  doSomeCalculations() {\n  }\n\n  calcTextValue(): string {\n    return 'Hello World';\n  }\n\n  @Builder doSomeRender() {\n    Text(`Hello World`)\n  }\n\n  build() {\n    Column() {\n      // Avoid: calling a method not decorated by @Builder.\n      this.doSomeCalculations();\n      // Prefer: Call an @Builder decorated method.\n      this.doSomeRender();\n      // Prefer: Pass the return value of a TS method as the parameter.\n      Text(this.calcTextValue())\n    }\n  }\n}\n</code></pre> <ul> <li>The switch syntax is not allowed. If conditional judgment is required, use the if statement. Refer to the code snippet below.</li> </ul> <pre><code>build() {\n  Column() {\n    // Avoid: using the switch syntax.\n    switch (expression) {\n      case 1:\n        Text('...')\n        break;\n      case 2:\n        Image('...')\n        break;\n      default:\n        Text('...')\n        break;\n    }\n    // Correct usage: Use if.\n    if(expression == 1) {\n      Text('...')\n    } else if(expression == 2) {\n      Image('...')\n    } else {\n      Text('...')\n    }\n  }\n}\n</code></pre> <ul> <li>Expressions are not allowed except for the if component. Refer to the code snippet below.</li> </ul> <pre><code>build() {\n  Column() {\n    // Avoid: expressions.\n    (this.aVar &gt; 10) ? Text('...') : Image('...')\n\n    // Positive example: Use if for judgment.\n    if(this.aVar &gt; 10) {\n      Text('...')\n    } else {\n      Image('...')\n    }\n  }\n}\n</code></pre> <ul> <li>Directly changing a state variable is not allowed. The following example should be avoided:</li> </ul> <p><pre><code>@Component\nstruct MyComponent {\n  @State textColor: Color = Color.Yellow;\n  @State columnColor: Color = Color.Green;\n  @State count: number = 1;\n  build() {\n    Column() {\n      // Avoid: directly changing the value of count in the &lt;Text&gt; component.\n      Text(`${this.count++}`)\n        .width(50)\n        .height(50)\n        .fontColor(this.textColor)\n        .onClick(() =&gt; {\n          this.columnColor = Color.Red;\n        })\n      Button(\"change textColor\").onClick(() =&gt;{\n        this.textColor = Color.Pink;\n      })\n    }\n    .backgroundColor(this.columnColor)\n  }\n}\n</code></pre> In ArkUI state management, UI re-render is driven by state.</p> <p>Therefore, do not change any state variable in the build() or @Builder decorated method of a custom component. Otherwise, loop rendering may result.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#universal-style-of-a-custom-component","title":"Universal Style of a Custom Component","text":"<p>The universal style of a custom component is configured by the chain call. <pre><code>@Component\nstruct ChildComponent {\n  build() {\n    Button(`Hello World`)\n  }\n}\n\n@Entry\n@Component\nstruct MyComponent {\n  build() {\n    Row() {\n      ChildComponent()\n        .width(200)\n        .height(300)\n        .backgroundColor(Color.Red)\n    }\n  }\n}\n</code></pre></p> <p></p> <p>NOTE</p> <p>When ArkUI sets styles for custom components, an invisible container component is set for ChildComponent. These styles are set on the container component instead of the Button component of ChildComponent. As seen from the rendering result, the red background color is not directly applied to the button. Instead, it is applied to the container component that is invisible to users where the button is located.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#page-and-custom-component-lifecycle","title":"Page and Custom Component Lifecycle","text":"<p>Before we dive into the page and custom component lifecycle, it would be helpful to learn the relationship between custom components and pages.</p> <ul> <li> <p>Custom component: @Component decorated UI unit, which can combine multiple built-in components for component reusability and invoke component lifecycle callbacks.</p> </li> <li> <p>Page: UI page of an application. A page can consist of one or more custom components. A custom component decorated with <code>@Entry</code> is used as the entry component of the page. Exactly one component is decorated with @Entry in a single source file. Only components decorated by @Entry can invoke the lifecycle callbacks of a page.</p> </li> </ul> <p>The following lifecycle callbacks are provided for a page, that is, a custom component decorated with @Entry:</p> <ul> <li> <p>onPageShow: Invoked each time the page is displayed, for example, during page redirection or when the application is switched to the foreground.</p> </li> <li> <p>onPageHide: Invoked each time the page is hidden, for example, during page redirection or when the application is switched to the background.</p> </li> <li> <p>onBackPress: Invoked when the user clicks the Back button.</p> </li> </ul> <p>The following lifecycle callbacks are provided for a custom component decorated with @Component:</p> <ul> <li> <p>aboutToAppear: Invoked when the custom component is about to appear. Specifically, it is invoked after a new instance of the custom component is created and before its build function is executed.</p> </li> <li> <p>aboutToDisappear: Invoked when the custom component is about to be destroyed. Do not change state variables in the aboutToDisappear function as doing this can cause unexpected errors. For example, the modification of the @Link decorated variable may cause unstable application running.</p> </li> </ul> <p>The following figure shows the lifecycle of a component (page) decorated with @Entry.</p> <p>The following example shows when the lifecycle callbacks are invoked:</p> <p><pre><code>// Index.ets\nimport router from '@ohos.router';\n\n@Entry\n@Component\nstruct MyComponent {\n  @State showChild: boolean = true;\n  @State btnColor:string = \"#FF007DFF\"\n\n  // Only components decorated by @Entry can call the lifecycle callbacks of a page.\n  onPageShow() {\n    console.info('Index onPageShow');\n  }\n  // Only components decorated by @Entry can call the lifecycle callbacks of a page.\n  onPageHide() {\n    console.info('Index onPageHide');\n  }\n\n  // Only components decorated by @Entry can call the lifecycle callbacks of a page.\n  onBackPress() {\n    console.info('Index onBackPress');\n    this.btnColor =\"#FFEE0606\"\n    return true // The value true means that the page executes its own return logic instead of the , and false (default) means that the default return logic is used.\n  }\n\n  // Component lifecycle\n  aboutToAppear() {\n    console.info('MyComponent aboutToAppear');\n  }\n\n  // Component lifecycle\n  aboutToDisappear() {\n    console.info('MyComponent aboutToDisappear');\n  }\n\n  build() {\n    Column() {\n      // When this.showChild is true, create the Child child component and invoke Child aboutToAppear.\n      if (this.showChild) {\n        Child()\n      }\n      // When this.showChild is false, delete the Child child component and invoke Child aboutToDisappear.\n      Button('delete Child')\n      .margin(20)\n      .backgroundColor(this.btnColor)\n      .onClick(() =&gt; {\n        this.showChild = false;\n      })\n      // Push to the page and execute onPageHide.\n      Button('push to next page')\n        .onClick(() =&gt; {\n          router.pushUrl({ url: 'pages/page' });\n        })\n    }\n\n  }\n}\n\n@Component\nstruct Child {\n  @State title: string = 'Hello World';\n  // Component lifecycle\n  aboutToDisappear() {\n    console.info('[lifeCycle] Child aboutToDisappear')\n  }\n\n  aboutToAppear() {\n    console.info('[lifeCycle] Child aboutToAppear')\n  }\n\n  build() {\n    Text(this.title).fontSize(50).margin(20).onClick(() =&gt; {\n      this.title = 'Hello ArkUI';\n    })\n  }\n}\n</code></pre> <pre><code>// page.ets\n@Entry\n@Component\nstruct page {\n  @State textColor: Color = Color.Black;\n  @State num: number = 0\n\n  onPageShow() {\n    this.num = 5\n  }\n\n  onPageHide() {\n    console.log(\"page onPageHide\");\n  }\n\n  onBackPress() {// If the value is not set, false is used.\n    this.textColor = Color.Grey\n    this.num = 0\n  }\n\n  aboutToAppear() {\n    this.textColor = Color.Blue\n  }\n\n  build() {\n    Column() {\n      Text (`num: ${this.num}`)\n        .fontSize(30)\n        .fontWeight(FontWeight.Bold)\n        .fontColor(this.textColor)\n        .margin(20)\n        .onClick(() =&gt; {\n          this.num += 5\n        })\n    }\n    .width('100%')\n  }\n}\n</code></pre></p> <p>In the preceding example, the Index page contains two custom components. One is MyComponent decorated with @Entry, which is also the entry component (root node) of the page. The other is Child, which is a child component of MyComponent. Only components decorated by @Entry can call the page lifecycle callbacks. Therefore, the lifecycle callbacks of the Index page \u2013 onPageShow, onPageHide, and onBackPress, are declared in MyComponent. In MyComponent and its child components, component lifecycle callbacks \u2013 aboutToAppear and aboutToDisappear \u2013  are also declared.</p> <ul> <li> <p>The initialization process of application cold start is as follows: MyComponent aboutToAppear -&gt; MyComponent build -&gt; Child aboutToAppear -&gt; Child build -&gt; Child build execution completed -&gt; MyComponent build execution completed -&gt; Index onPageShow</p> </li> <li> <p>When delete Child is clicked, the value of this.showChild linked to if changes to false. As a result, the Child component is deleted, and the Child aboutToDisappear callback is invoked.</p> </li> <li> <p>When push to next page is clicked, the router.pushUrl API is called to jump to the next page. As a result, the Index page is hidden, and the Index onPageHide callback is invoked. As the called API is router.pushUrl, which results in the Index page being hidden, but not destroyed, only the onPageHide callback is invoked. After a new page is displayed, the process of initializing the lifecycle of the new page is executed.</p> </li> <li> <p>If router.replaceUrl is called, the Index page is destroyed. In this case, the execution of lifecycle callbacks changes to: Index onPageHide -&gt; MyComponent aboutToDisappear -&gt; Child aboutToDisappear. As aforementioned, a component is destroyed by directly removing it from the component tree. Therefore, aboutToDisappear of the parent component is called first, followed by aboutToDisappear of the child component, and then the process of initializing the lifecycle of the new page is executed.</p> </li> <li> <p>When the Back button is clicked, the Index onBackPress callback is invoked, and the current Index page is destroyed.</p> </li> <li> <p>When the application is minimized or switched to the background, the Index onPageHide callback is invoked. As the current Index page is not destroyed, aboutToDisappear of the component is not executed. When the application returns to the foreground, the Index onPageShow callback is invoked.</p> </li> <li> <p>When the application exits, the following callbacks are executed in order: Index onPageHide -&gt; MyComponent aboutToDisappear -&gt; Child aboutToDisappear.</p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#more-usage","title":"More Usage","text":"<ul> <li>Custom Component Layout </li> <li>Freezing a Custom Component</li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#state-management","title":"State Management","text":"<p>In previous examples, most of the pages built are static pages, which are delivered to the end user without having to be processed. If you are building dynamic, interactive pages, you need to handle state management.</p> <p>Figure 1: State managed UI </p> <p>In the preceding example, the interaction between the user and the application triggers an update in the text state, which in turn triggers re-rendering of the UI. As a result, the Hello World text changes to Hello ArkUI.</p> <p>In a declarative UI framework, the UI is the result of the application\u2019s runtime state. You define a UI model with the state as a parameter, and when the state changes, the UI updates accordingly. This update process is known as the state management mechanism in ArkUI.</p> <p>For custom components, any variable that affects the UI must be decorated. Without a decorator, the UI renders only once at initialization and won\u2019t update with changes. The diagram below illustrates the relationship between state and view.</p> <ul> <li> <p>View (UI): UI rendering, which is visual representation of the UI description in the build method and @Builder decorated method.</p> </li> <li> <p>State: data that drives the UI to re-render. State data is changed by invoking the event method of the component. The change of the state data triggers the re-rendering of the UI.</p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#basic-concepts","title":"Basic Concepts","text":"<ul> <li>State Variables: A variable decorated by a state decorator. Its value change will trigger UI re-renders. For example: <pre><code>@State num: number = 1;  // 'num' is the state variable, '@State' is the decorator.\n</code></pre></li> <li> <p>Regular Variables: A variable that is not decorated by a state decorator and is usually used for auxiliary calculation. Its value change will not trigger UI re-renders.  In the following example, the increaseBy variable is a regular variable: <pre><code>private increaseBy: number = 1;  // 'increaseBy' is a regular variable.\n</code></pre></p> </li> <li> <p>Data Sources/Synchronization Sources: Original source of a state variable, which can be synchronized to different state data. Generally, it is the data passed from the parent component to the child component. For example: <pre><code>count: 1;  // 'count' is the data source.\n</code></pre></p> </li> <li> <p>Named Argument Mechanism: A mechanism where the parent component passes state variables to the child component by specifying parameters. It is the primary means of passing synchronization parameters from the parent component to the child component. Example: <pre><code>CompA: ({ aProp: this.aProp });\n</code></pre></p> </li> <li> <p>Initialization from Parent Component: A process where the parent component uses the named parameter mechanism to pass specified parameters to the child component. The default value used in local initialization will be overwritten by the value passed from the parent component. Example:</p> </li> </ul> <pre><code>@Component\nstruct MyComponent {\n  @State count: number = 0;       // State variable\n  private increaseBy: number = 1; // Regular variable\n\n  build() { }\n}\n\n@Component\nstruct Parent {\n  build() {\n    Column() {\n      // Initialize from parent, overriding local default values\n      MyComponent({ count: 1, increaseBy: 2 })  \n    }\n  }\n}\n</code></pre> <ul> <li> <p>Child Component Initialization: A capability to pass state variables to the child component to initialize the corresponding state variables therein. The example is the same as above.</p> </li> <li> <p>Local Initialization: A process where a value is assigned to a variable as its default value in the variable declaration. Example: <code>@State count: number = 0;</code></p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#decorator-overview","title":"Decorator Overview","text":"<p>ArkUI provides a diverse array of decorators. You can use these decorators to observe state variables changes within a component or globally and pass the changes between different component levels (for example, between parent and child components or grandparent and grandchild components). According to the scope of the state variable, decorators can be roughly classified into the following types:</p> <ul> <li> <p>Decorators for managing the state of a <code>component</code>: implement state management at the component level by allowing for observation of state changes within a component and changes at different component levels. The observation is limited to state changes in the same component tree, that is, on the same page.</p> </li> <li> <p>Decorators for managing the state of an <code>application</code>: implement global state management of an application by allowing for observation of state changes on different pages or even different UIAbility components.</p> </li> </ul> <p>According to the data transfer mode and synchronization type, decorators can also be classified into the following types:</p> <ul> <li> <p>Decorators that allow for one-way (read-only) transfer</p> </li> <li> <p>Decorators that allow for two-way (mutable) transfer</p> </li> </ul> <p>The following figure illustrates the decorators. You can use these decorators at your disposal to implement linkage between data and the UI.</p> <p>In the preceding figure, the decorators in the components area are used for state management at the <code>component level</code>, while others are used for state management at the <code>application level</code>. You can use @StorageLink/@LocalStorageLink to implement two-way synchronization of the application and component state, and @StorageProp/@LocalStorageProp to implement one-way synchronization.</p> <p>NOTE</p> <p>To start, use @State, @Prop and @Link decorator is enough for simple development.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#decorators-for-component-state-management","title":"Decorators for component state management","text":"<ul> <li> <p>@State: An @State decorated variable holds the state of the owning component. It can be the source of one- or two-way synchronization with child components. When the variable changes, the dependent component will be updated. </p> </li> <li> <p>@Prop: An @Prop decorated variable can create one-way synchronization with a variable of its parent component. @Prop decorated variables are mutable, but changes are not synchronized to the parent component.</p> </li> <li> <p>@Link: An @Link decorated variable creates two-way synchronization with a variable of its parent component. When the @Link decorated variable has its value changed, its source is updated as well; when the source updates, the @Link decorated variable will do as well.</p> </li> <li> <p>@Provide/@Consume: Variables decorated by @Provide/@Consume are used for data synchronization across component levels. The components can be bound to the variables through aliases or attribute names. Data does not need to be passed through the named parameter mechanism.</p> </li> <li> <p>@Observed: @Observed is a class decorator. You can use it to decorate the class that has multiple levels of nested objects or arrays to be observed. Note that @Observed must be used with @ObjectLink for two-way synchronization or with @Prop for one-way synchronization.</p> </li> <li> <p>@ObjectLink: An @ObjectLink decorated variable is used with an @Observed decorated class of the parent component for two-way data synchronization. It is applicable in scenarios involving multiple levels of nested objects or arrays in the class.</p> </li> </ul> <p>NOTE</p> <p>Only @Observed/@ObjectLink can be used to observe changes of nested attributes. Other decorators can be used to observe changes of attributes at the first layer only.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#decorators-for-application-state-management","title":"Decorators for application state management","text":"<ul> <li> <p>AppStorage: a special LocalStorage singleton instance. It is an application-wide database bound to the application process and can be linked to components through the @StorageProp and @StorageLink decorators.</p> </li> <li> <p>AppStorage is the hub for application state. Data that needs to interact with components (UI) is stored in AppStorage, including PersistentStorage and Environment data. The UI accesses the data through the decorators or APIs provided by AppStorage.</p> </li> <li> <p>LocalStorage: an in-memory \"database\" for the application state declared by the application and typically used to share state across pages. It can be linked to the UI through the @LocalStorageProp and @LocalStorageLink decorators.</p> </li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#other-state-management-features","title":"Other State Management Features","text":"<p>@Watch: listens for the changes of state variables.</p> <p>$$operator: provides a TS variable by-reference to a built-in component so that the variable value and the internal state of that component are kept in sync.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#event-binding","title":"Event Binding","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#universal-events","title":"Universal Events","text":"<p>This tutorial will introduce Touchscreen Event only, you can redirect the link to learn more like Focus Event and Keyboard and Mouse Event.</p> <p>Touchscreen events are events triggered when a finger or stylus is placed on, moved along, or lifted from a component. Events like click event, touch event are most often used.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#click-event","title":"Click Event","text":"<p>A click event is triggered when a complete press and lift action is performed by using a finger or a stylus. When a click event occurs, the following callback is triggered:</p> <pre><code>onClick(event: (event?: ClickEvent) =&gt; void)\n</code></pre> <p>The event parameter provides the coordinates of the click relative to the window or component as well as the event source where the click occurs, for example, a button, a click on which shows or hides an image.</p> <p><pre><code>@Entry\n@Component\nstruct IfElseTransition {\n  @State flag: boolean = true;\n  @State btnMsg: string = 'show';\n\n  build() {\n    Column() {\n      Button(this.btnMsg).width(80).height(30).margin(30)\n        .onClick(() =&gt; {\n          if (this.flag) {\n            this.btnMsg = 'hide';\n          } else {\n            this.btnMsg = 'show';\n          }\n          // Click the button to show or hide the image.\n          this.flag = !this.flag;\n        })\n      if (this.flag) {\n        Image($r('app.media.icon')).width(200).height(200)\n      }\n    }.height('100%').width('100%')\n  }\n}\n</code></pre> Figure 1 Showing or hiding an image through the click event of a button</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#touch-event","title":"Touch Event","text":"<p>A touch event is triggered when a finger or stylus is placed on, moved along, or lifted from a component.</p> <pre><code>onTouch(event: (event?: TouchEvent) =&gt; void)\n</code></pre> <ul> <li> <p>If event.type is TouchType.Down, the finger or stylus is placed on the component.</p> </li> <li> <p>If event.type is TouchType.Up, the finger or stylus is lifted from the component.</p> </li> <li> <p>If event.type is TouchType.Move, the finger or stylus is moved along the component.</p> </li> </ul> <p>The touch event supports single and multi-touch interactions. Information about the touch event can be obtained using the event parameter, such as the location of the finger that triggers the event, unique identifier of the finger, finger information changed, and the input device source.</p> <pre><code>// xxx.ets\n@Entry\n@Component\nstruct TouchExample {\n  @State text: string = '';\n  @State eventType: string = '';\n\n  build() {\n    Column() {\n      Button('Touch').height(40).width(100)\n        .onTouch((event?: TouchEvent) =&gt; {\n          if(event){\n            if (event.type === TouchType.Down) {\n              this.eventType = 'Down';\n            }\n            if (event.type === TouchType.Up) {\n              this.eventType = 'Up';\n            }\n            if (event.type === TouchType.Move) {\n              this.eventType = 'Move';\n            }\n            this.text = 'TouchType:' + this.eventType + '\\nDistance between touch point and touch element:\\nx: '\n            + event.touches[0].x + '\\n' + 'y: ' + event.touches[0].y + '\\nComponent globalPos:('\n            + event.target.area.globalPosition.x + ',' + event.target.area.globalPosition.y + ')\\nwidth:'\n            + event.target.area.width + '\\nheight:' + event.target.area.height\n          }\n        })\n      Button('Touch').height(50).width(200).margin(20)\n        .onTouch((event?: TouchEvent) =&gt; {\n          if(event){\n            if (event.type === TouchType.Down) {\n              this.eventType = 'Down';\n            }\n            if (event.type === TouchType.Up) {\n              this.eventType = 'Up';\n            }\n            if (event.type === TouchType.Move) {\n              this.eventType = 'Move';\n            }\n            this.text = 'TouchType:' + this.eventType + '\\nDistance between touch point and touch element:\\nx: '\n            + event.touches[0].x + '\\n' + 'y: ' + event.touches[0].y + '\\nComponent globalPos:('\n            + event.target.area.globalPosition.x + ',' + event.target.area.globalPosition.y + ')\\nwidth:'\n            + event.target.area.width + '\\nheight:' + event.target.area.height\n          }\n        })\n      Text(this.text)\n    }.width('100%').padding(30)\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#gesture-events","title":"Gesture Events","text":"<p>You can bind to each component different gesture events and design the logic for responding to these events. When a gesture is successfully recognized, the ArkUI framework notifies the component of the gesture recognition result through event callback.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#gesture-common-gesture-binding-method","title":"gesture (Common Gesture Binding Method)","text":"<pre><code>.gesture(gesture: GestureType, mask?: GestureMask)\n</code></pre> <p>gesture is a frequently used API for binding a gesture to a component.</p> <p>We don't expand it in this tutorial but you can check some examples here if interested.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#rendering-control","title":"Rendering Control","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#overview","title":"Overview","text":"<p>ArkUI uses the <code>build()</code> function of custom components and declarative UI description statements in the <code>@builder</code> decorator to build the corresponding UI. In declarative description statements, you can use rendering control statements in addition to system components to accelerate UI construction. </p> <p>These rendering control statements includes: - Conditional statements that control whether components are displayed - Loop statements for repeated content that quickly generate components based on array data - Lazy loading statements for scenarios involving a large amount of data.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#ifelse-conditional-rendering","title":"if/else: Conditional Rendering","text":"<p>ArkTS provides conditional rendering. It supports the use of the if, else, and else if statements to display different content based on the application state.</p> <p>NOTE</p> <p>This API can be used in ArkTS widgets since API version 9.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#rules-of-use","title":"Rules of Use","text":"<ul> <li> <p>The if, else, and else if statements are supported.</p> </li> <li> <p>The conditional statements following if and else if can use state variables.</p> </li> <li> <p>Conditional statements can be used within a container component to build different child components.</p> </li> <li> <p>Conditional statements are \"transparent\" when it comes to the parent-child relationship of components. Rules about permissible child components must be followed when there is one or more if statements between the parent and child components.</p> </li> <li> <p>The build function inside each conditional branch must follow the special rules for build functions. Each of such build functions must create one or more components. An empty build function that creates no components will result in a syntax error.</p> </li> <li> <p>Some container components impose restrictions on the type or number of child components. When conditional statements are used in such components, these restrictions also apply to the components to be created by using the conditional statements. For example, when a conditional statement is used in the \\ container component, whose child components can only be \\, only the \\ component can be used in the conditional statement."},{"location":"application-development/basic-concepts/introduction-to-arkts/#update-mechanism","title":"Update Mechanism","text":"<p>A conditional statement updates whenever a state variable used inside the if or else if condition changes. Specifically:</p> <ol> <li> <p>The conditional statement re-evaluates the conditions. If the evaluation of the conditions changes, steps 2 and 3 are performed. Otherwise, no follow-up operation is required.</p> </li> <li> <p>The ArkUI framework removes all child components that have been built.</p> </li> <li> <p>The ArkUI framework executes the build function of the conditional branch again to add the generated child component to its parent component. If an applicable else branch is missing, no new build function will be executed.</p> </li> </ol> <p>A condition can include Typescript expressions. As for any expression inside build functions, such an expression must not change any application state.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/introduction-to-arkts/#using-if-for-conditional-rendering","title":"Using if for Conditional Rendering","text":"<pre><code>@Entry\n@Component\nstruct ViewA {\n  @State count: number = 0;\n\n  build() {\n    Column() {\n      Text(`count=${this.count}`)\n\n      if (this.count &gt; 0) {\n        Text(`count is positive`)\n          .fontColor(Color.Green)\n      }\n\n      Button('increase count')\n        .onClick(() =&gt; {\n          this.count++;\n        })\n\n      Button('decrease count')\n        .onClick(() =&gt; {\n          this.count--;\n        })\n    }\n  }\n}\n</code></pre> <p>Each branch of the if statement includes a build function. Each of such build functions must create one or more components. On initial render, if will execute a build function and add the generated child component to its parent component.</p> <p>if updates whenever a state variable used inside the if or else if condition changes, and re-evaluates the conditions. If the evaluation of the conditions changes, it means that another branch of if needs to be built. In this case, the ArkUI framework will:</p> <ol> <li> <p>Remove all previously rendered components (of the earlier branch).</p> </li> <li> <p>Execute the build function of the branch and add the generated child component to its parent component.</p> </li> </ol> <p>In the preceding example, if count increases from 0 to 1, then if updates, the condition count &gt; 0 is re-evaluated, and the evaluation result changes from false to true. Therefore, the positive branch build function will be executed, which creates a \\ component and adds it to the \\ parent component. If count changes back to 0 later, then the \\ component will be removed from the \\ component. Since there is no else branch, no new build function will be executed. <p>Here is a preview of the example:</p> <p>Click <code>increase count</code>, 'count is positive' will appear on the Previewer.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#if-else-and-child-component-states","title":"if ... else ... and Child Component States","text":"<p>This example involves if... else... and a child component with an @State decorated variable.</p> <pre><code>@Component\nstruct CounterView {\n  @State counter: number = 0;\n  label: string = 'unknown';\n\n  build() {\n    Row() {\n      Text(`${this.label}`)\n      Button(`counter ${this.counter} +1`)\n        .onClick(() =&gt; {\n          this.counter += 1;\n        })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct MainView {\n  @State toggle: boolean = true;\n\n  build() {\n    Column() {\n      if (this.toggle) {\n        CounterView({ label: 'CounterView #positive' })\n      } else {\n        CounterView({ label: 'CounterView #negative' })\n      }\n      Button(`toggle ${this.toggle}`)\n        .onClick(() =&gt; {\n          this.toggle = !this.toggle;\n        })\n    }\n  }\n}\n</code></pre> <p>On first render, the CounterView (label: 'CounterView #positive') child component is created. This child component carries the @State decorated variable, named counter. When the CounterView.counter state variable is updated, the CounterView (label: 'CounterView #positive') child component is re-rendered, with its state variable value preserved. When the value of the MainView.toggle state variable changes to false, the if statement inside the MainView parent component gets updated, and subsequently the CounterView (label: 'CounterView #positive') child component is removed. At the same time, a new CounterView (label: 'CounterView #negative') child component is created, with the counter state variable set to the initial value 0.</p> <p>Here is a preview of the example:</p> <p>NOTE</p> <p>CounterView (label: 'CounterView #positive') and CounterView (label: 'CounterView #negative') are two distinct instances of the same custom component. When the if branch changes, there is no update to an existing child component or no preservation of state.</p> <p>The following example shows the required modifications if the value of counter needs to be preserved when the if condition changes: <pre><code>@Component\nstruct CounterView {\n  @Link counter: number;\n  label: string = 'unknown';\n\n  build() {\n    Row() {\n      Text(`${this.label}`)\n      Button(`counter ${this.counter} +1`)\n        .onClick(() =&gt; {\n          this.counter += 1;\n        })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct MainView {\n  @State toggle: boolean = true;\n  @State counter: number = 0;\n\n  build() {\n    Column() {\n      if (this.toggle) {\n        CounterView({ counter: $counter, label: 'CounterView #positive' })\n      } else {\n        CounterView({ counter: $counter, label: 'CounterView #negative' })\n      }\n      Button(`toggle ${this.toggle}`)\n        .onClick(() =&gt; {\n          this.toggle = !this.toggle;\n        })\n    }\n  }\n}\n</code></pre></p> <p>Here, the @State decorated variable counter is owned by the parent component. Therefore, it is not destroyed when a CounterView component instance is destroyed. The CounterView component refers to the state by an @Link decorator. The state must be moved from a child to its parent (or parent of parent) to avoid losing it when the conditional content (or repeated content) is destroyed.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#foreach-rendering-of-repeated-content","title":"ForEach: Rendering of Repeated Content","text":"<p>ForEach enables rendering of repeated content based on array type data. It must be used in a container component, and the component it returns must be one allowed inside the container component. For example, for rendering of list items, ForEach must be used in the \\ component. <p>NOTE</p> <p>This API is supported in ArkTS widgets since API version 9.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#interface-description","title":"Interface Description","text":"<pre><code>ForEach(\n  arr: Array,\n  itemGenerator: (item: Object, index: number) =&gt; void,\n  keyGenerator?: (item: Object, index: number) =&gt; string\n)\n</code></pre> <p>The parameters are described in the table below.</p> Name Type Mandatory Description arr Array\\&lt;Object&gt; Yes Data source, which is an array.NOTE- You can set this parameter to an empty array. In this case, no child component is created.- You can also set this parameter to a function whose return value is an array, for example, arr.slice (1, 3). However, the set function cannot change any state variables including the array itself. For example, Array.splice, Array.sort, and Array.reverse functions are not allowed, as they may change the array. itemGenerator <code>(item: Object, index: number) =&gt; void</code> Yes Component generator.- It generates a component for each data item in an array. - item: data item in the arr array.- (Optional) index: index of the data item in the arr array.NOTE- The type of the created component must be the one allowed inside the parent container component of ForEach. For example, a \\ component is allowed only when the parent container component of ForEach is \\. keyGenerator <code>(item: Object, index: number) =&gt; string</code> No Key generator.- It generates a unique and persistent key for each array item of the data source arr. The return value is the key generation rule you customize.- item: data item in the arr array.- (Optional) index: index of the data item in the arr array.NOTE- If this function is not specified, the default key generator of the framework is used: (item: T, index: number) =&gt; { return index + '__' + JSON.stringify(item); }.- The key generator should not change any component state. <p>NOTE</p> <ul> <li>The itemGenerator function can contain an if/else statement, and an if/else statement can contain ForEach.</li> <li>On initial rendering, ForEach loads all data of the data source, creates a component for each data item, and mounts the created components to the render tree. If the data source contains a large number of items or performance is a critical concern, you are advised to use LazyForEach.</li> </ul>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#key-generation-rules","title":"Key Generation Rules","text":"<ul> <li>During ForEach rendering, the system generates a unique, persistent key for each array item to identify the corresponding component. When the key changes, the ArkUI framework considers that the array element has been replaced or modified and creates a new component based on the new key. </li> <li>ForEach provides a parameter named keyGenerator, which is in effect a function through which you can customize key generation rules. If no keyGenerator function is defined, the ArkUI framework uses the default key generator, that is, (item: Object, index: number) =&gt; { return index + '__' + JSON.stringify(item); }. </li> <li>The ArkUI framework has a set of specific judgment rules for ForEach key generation, which are mainly associated with the second parameter index of the itemGenerator function and the second parameter index of the keyGenerator function. The following figure shows the logic of the key generation rules. </li> </ul> <p>NOTE</p> <p>The ArkUI framework warns of duplicate keys. If duplicate keys exist during UI re-rendering, the framework may not work properly.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#component-creation-rules","title":"Component Creation Rules","text":"<p>After the key generation rules are determined, the itemGenerator function \u2013 the second parameter in ForEach \u2013 creates a component for each array item of the data source based on the rules. There are two cases for creating a component: initial rendering and non-initial rendering.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#initial-rendering","title":"Initial Rendering","text":"<p>When used for initial rendering, ForEach generates a unique key for each array item of the data source based on the key generation rules, and creates a component.</p> <pre><code>@Entry\n@Component\nstruct Parent {\n  @State simpleList: Array&lt;string&gt; = ['one', 'two', 'three'];\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.simpleList, (item: string) =&gt; {\n          ChildItem({ item: item })\n        }, (item: string) =&gt; item)\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@Component\nstruct ChildItem {\n  @Prop item: string;\n\n  build() {\n    Text(this.item)\n      .fontSize(50)\n  }\n}\n</code></pre> <p>The figure below shows the effect.</p> <p>Figure 1 Initial rendering when the ForEach data sources do not have the same key</p> <p>In the preceding code snippets, the key generation rule is the return value item of the keyGenerator function. During ForEach rendering, keys (one, two, and three) are generated in sequence for data source array items, and corresponding child items are created and rendered to the UI.</p> <p>When the keys generated for different data items are the same, the behavior of the framework is unpredictable. For example, in the following code, when data items with the same key two are rendered by ForEach, only one ChildItem component, instead of multiple components with the same key, is created.</p> <pre><code>@Entry\n@Component\nstruct Parent {\n  @State simpleList: Array&lt;string&gt; = ['one', 'two', 'two', 'three'];\n\n  build() {\n    Row() {\n      Column() {\n        ForEach(this.simpleList, (item: string) =&gt; {\n          ChildItem({ item: item })\n        }, (item: string) =&gt; item)\n      }\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@Component\nstruct ChildItem {\n  @Prop item: string;\n\n  build() {\n    Text(this.item)\n      .fontSize(50)\n  }\n}\n</code></pre> <p>The figure below shows the effect.</p> <p>Figure 2 Initial rendering when the ForEach data sources have the same key</p> <p>In this example, the final key value generation rule is item. When ForEach traverses the data source simpleList and finds the key two whose index is 1, ForEach creates a component whose key is two based on the final key value generation rule and marks the component. When ForEach finds the key two whose index is 2, it does not create a component, because the key of the current item is also two according to the final key generation rule.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#non-initial-rendering","title":"Non-Initial Rendering","text":"<p>When ForEach is used for re-rendering (non-initial rendering), it checks whether the newly generated key already exists in the previous rendering. If the key does not exist, a new component is created. If the key exists, no new component is created; instead, the component corresponding to the key is re-rendered. For example, in the following code snippet, the value of the third item of the array is changed to \"new three\" through the click event, which triggers ForEach to perform re-rendering.</p> <pre><code>@Entry\n@Component\nstruct Parent {\n  @State simpleList: Array&lt;string&gt; = ['one', 'two', 'three'];\n\n  build() {\n    Row() {\n      Column() {\n        Text('Change Value of Third Array Item')\n          .fontSize(24)\n          .fontColor(Color.Red)\n          .onClick(() =&gt; {\n            this.simpleList[2] = 'new three';\n          })\n\n        ForEach(this.simpleList, (item: string) =&gt; {\n          ChildItem({ item: item })\n            .margin({ top: 20 })\n        }, (item: string) =&gt; item)\n      }\n      .justifyContent(FlexAlign.Center)\n      .width('100%')\n      .height('100%')\n    }\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@Component\nstruct ChildItem {\n  @Prop item: string;\n\n  build() {\n    Text(this.item)\n      .fontSize(30)\n  }\n}\n</code></pre> <p>The figure below shows the effect.</p> <p>Figure 3 Re-rendering with ForEach</p> <p>From this example, you can see that @State can observe changes in the primitive array items of the simpleList data source.</p> <ol> <li>When any array item in simpleList changes, ForEach is triggered for re-rendering.</li> <li>ForEach traverses the new data source ['one', 'two', 'new three'] and generates the corresponding keys one, two, and new three.</li> <li>Because keys one and two already exist in the previous rendering, ForEach reuses the corresponding components and re-renders them. For the third array item \"new three\", because a new key new three is generated for it based on the key generation rule item, ForEach creates a new component for it.</li> </ol>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#use-cases","title":"Use Cases","text":"<p>ForEach is typically used in several cases:  - data source unchanged  - data source changed (for example, when array items are inserted or deleted) - properties of data source array items changed</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#data-source-unchanged","title":"Data Source Unchanged","text":"<p>If the data source remains unchanged, it can of a primitive data type. For example, when a page is loading, the skeleton screen may be used.</p> <pre><code>@Entry\n@Component\nstruct ArticleList {\n  @State simpleList: Array&lt;number&gt; = [1, 2, 3, 4, 5];\n\n  build() {\n    Column() {\n      ForEach(this.simpleList, (item: number) =&gt; {\n        ArticleSkeletonView()\n          .margin({ top: 20 })\n      }, (item: number) =&gt; item.toString())\n    }\n    .padding(20)\n    .width('100%')\n    .height('100%')\n  }\n}\n\n@Builder\nfunction textArea(width: number | Resource | string = '100%', height: number | Resource | string = '100%') {\n  Row()\n    .width(width)\n    .height(height)\n    .backgroundColor('#FFF2F3F4')\n}\n\n@Component\nstruct ArticleSkeletonView {\n  build() {\n    Row() {\n      Column() {\n        textArea(80, 80)\n      }\n      .margin({ right: 20 })\n\n      Column() {\n        textArea('60%', 20)\n        textArea('50%', 20)\n      }\n      .alignItems(HorizontalAlign.Start)\n      .justifyContent(FlexAlign.SpaceAround)\n      .height('100%')\n    }\n    .padding(20)\n    .borderRadius(12)\n    .backgroundColor('#FFECECEC')\n    .height(120)\n    .width('100%')\n    .justifyContent(FlexAlign.SpaceBetween)\n  }\n}\n</code></pre> <p>The figure below shows the effect.</p> <p>Figure 4 Skeleton screen</p> <p>In this example, the data item item is used as the key generation rule. Because the array items of the data source simpleList are different, the uniqueness of the keys can be ensured.</p>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#data-source-changed","title":"Data Source Changed","text":"<p>If data source array item changes, for example, when an array item is inserted or deleted, or has its index changed, the data source should be of the object array type, and a unique ID of the object is used as the final key. For example, after a pull-to-refresh gesture is performed, newly obtained data items are added to the tail of the data source array, resulting in an increase in the length of the data source array.</p> <pre><code>class Article {\n  id: string;\n  title: string;\n  brief: string;\n\n  constructor(id: string, title: string, brief: string) {\n    this.id = id;\n    this.title = title;\n    this.brief = brief;\n  }\n}\n\n@Entry\n@Component\nstruct ArticleListView {\n  @State isListReachEnd: boolean = false;\n  @State articleList: Array&lt;Article&gt; = [\n    new Article('001','Article 1','Abstract'),\n    new Article('002','Article 2','Abstract'),\n    new Article('003','Article 3','Abstract'),\n    new Article('004','Article 4','Abstract'),\n    new Article('005','Article 5','Abstract'),\n    new Article ('006','Article 6','Abstract')\n  ]\n\n  loadMoreArticles() {\n    this.articleList.push(new Article('007','New article','Abstract');\n  }\n\n  build() {\n    Column({ space: 5 }) {\n      List() {\n        ForEach(this.articleList, (item: Article) =&gt; {\n          ListItem() {\n            ArticleCard({ article: item })\n              .margin({ top: 20 })\n          }\n        }, (item: Article) =&gt; item.id)\n      }\n      .onReachEnd(() =&gt; {\n        this.isListReachEnd = true;\n      })\n      .parallelGesture(\n        PanGesture({ direction: PanDirection.Up, distance: 80 })\n          .onActionStart(() =&gt; {\n            if (this.isListReachEnd) {\n              this.loadMoreArticles();\n              this.isListReachEnd = false;\n            }\n          })\n      )\n      .padding(20)\n      .scrollBar(BarState.Off)\n    }\n    .width('100%')\n    .height('100%')\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@Component\nstruct ArticleCard {\n  @Prop article: Article;\n\n  build() {\n    Row() {\n      Image($r('app.media.icon'))\n        .width(80)\n        .height(80)\n        .margin({ right: 20 })\n\n      Column() {\n        Text(this.article.title)\n          .fontSize(20)\n          .margin({ bottom: 8 })\n        Text(this.article.brief)\n          .fontSize(16)\n          .fontColor(Color.Gray)\n          .margin({ bottom: 8 })\n      }\n      .alignItems(HorizontalAlign.Start)\n      .width('80%')\n      .height('100%')\n    }\n    .padding(20)\n    .borderRadius(12)\n    .backgroundColor('#FFECECEC')\n    .height(120)\n    .width('100%')\n    .justifyContent(FlexAlign.SpaceBetween)\n  }\n}\n</code></pre> <p>The following figure shows the initial screen (on the left) and the screen after a pull-to-refresh gesture (on the right).</p> <p>Figure 5 When the data source is changed</p> <p>In this example, the ArticleCard component functions as a child component of the ArticleListView component and receives an Article object through the @Prop decorator to render article widgets.</p> <ol> <li>When the list scrolls to the bottom, if the distance of finger movement exceeds the threshold 80, the loadMoreArticle() function is triggered. This function adds a new data item to the tail of the articleList data source, increasing the length of the data source.</li> <li>Because the data source is decorated by @State, the ArkUI framework can detect the change of the data source length and trigger ForEach for re-rendering.</li> </ol>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#properties-of-data-source-array-items-changed","title":"Properties of Data Source Array Items Changed","text":"<p>If the data source array items are of the Object type, property changes of these array items cannot be detected by the ArkUI framework, because the framework cannot detect property changes of array items of complex types when the array is decorated by @State. As a result, re-rendering by ForEach is not performed. To trigger ForEach to perform re-rendering, use the @Observed and @ObjectLink decorators. In the following example, clicking the Like icon on the article list changes the number of likes for an article.</p> <pre><code>@Observed\nclass Article {\n  id: string;\n  title: string;\n  brief: string;\n  isLiked: boolean;\n  likesCount: number;\n\n  constructor(id: string, title: string, brief: string, isLiked: boolean, likesCount: number) {\n    this.id = id;\n    this.title = title;\n    this.brief = brief;\n    this.isLiked = isLiked;\n    this.likesCount = likesCount;\n  }\n}\n\n@Entry\n@Component\nstruct ArticleListView {\n  @State articleList: Array&lt;Article&gt; = [\n    new Article('001','Article 0','Abstract', false, 100),\n    new Article('002','Article 1','Abstract', false, 100),\n    new Article('003','Article 2','Abstract', false, 100),\n    new Article('004','Article 4','Abstract', false, 100),\n    new Article('005','Article 5','Abstract', false, 100),\n    new Article('006','Article 6','Abstract', false, 100),\n  ];\n\n  build() {\n    List() {\n      ForEach(this.articleList, (item: Article) =&gt; {\n        ListItem() {\n          ArticleCard({\n            article: item\n          })\n            .margin({ top: 20 })\n        }\n      }, (item: Article) =&gt; item.id)\n    }\n    .padding(20)\n    .scrollBar(BarState.Off)\n    .backgroundColor(0xF1F3F5)\n  }\n}\n\n@Component\nstruct ArticleCard {\n  @ObjectLink article: Article;\n\n  handleLiked() {\n    this.article.isLiked = !this.article.isLiked;\n    this.article.likesCount = this.article.isLiked ? this.article.likesCount + 1 : this.article.likesCount - 1;\n  }\n\n  build() {\n    Row() {\n      Image($r('app.media.icon'))\n        .width(80)\n        .height(80)\n        .margin({ right: 20 })\n\n      Column() {\n        Text(this.article.title)\n          .fontSize(20)\n          .margin({ bottom: 8 })\n        Text(this.article.brief)\n          .fontSize(16)\n          .fontColor(Color.Gray)\n          .margin({ bottom: 8 })\n\n        Row() {\n          Image(this.article.isLiked ? $r('app.media.iconLiked') : $r('app.media.iconUnLiked'))\n            .width(24)\n            .height(24)\n            .margin({ right: 8 })\n          Text(this.article.likesCount.toString())\n            .fontSize(16)\n        }\n        .onClick(() =&gt; this.handleLiked())\n        .justifyContent(FlexAlign.Center)\n      }\n      .alignItems(HorizontalAlign.Start)\n      .width('80%')\n      .height('100%')\n    }\n    .padding(20)\n    .borderRadius(12)\n    .backgroundColor('#FFECECEC')\n    .height(120)\n    .width('100%')\n    .justifyContent(FlexAlign.SpaceBetween)\n  }\n}\n</code></pre> <p>The following figure shows the initial screen (on the left) and the screen after the Like icon of Article 1 is clicked (on the right).</p> <p>Figure 6 When properties of data source array items are changed</p> <p>In this example, the Article class is decorated by the @Observed decorator. The parent component ArticleListView passes an Article object instance to the child component ArticleCard, and the child component uses the @ObjectLink decorator to receive the instance.</p> <ol> <li>When the Like icon of Article 1 is clicked, the handleLiked function of the ArticleCard component is triggered. This function changes the values of the isLiked and likesCount properties of the article instance in the component pertaining to Article 1.</li> <li>Because article in the child component ArticleCard uses the @ObjectLink decorator, the parent and child components share the same article data. As such, the values of isLiked and likedCounts of the first array item of articleList in the parent component are changed synchronously.</li> <li>When the parent component detects property changes of the data source array items, ForEach is triggered for re-rendering.</li> <li>Here, the ForEach key generation rule is the id property value of the array item. If ForEach traverses the new data source and finds no changes in the id values, no component is created.</li> <li>When the ArticleCard component corresponding to the first array item is rendered, the obtained values of isLiked and likedCounts are the new values.</li> </ol>"},{"location":"application-development/basic-concepts/introduction-to-arkts/#suggestions","title":"Suggestions","text":"<ul> <li>Avoid including the data item index in the final key generation rule to prevent unexpected rendering results and deteriorated rendering performance. If including index is required, for example, when the list needs to be rendered based on the index, prepare for the performance loss resulting from component creation by ForEach to account for data source changes.</li> <li>To ensure unique keys for array items of the Object type, you are advised to use the unique IDs of objects as keys.</li> <li>Data items of primitive data types do not have a unique ID. If you use the primitive data type itself as the key, you must ensure that the array items are not duplicate. In scenarios where the data source changes, you are advised to convert the array of a primitive data type into an array of the Object type with the id property, and then use the id property as the key generation rule.</li> </ul>"},{"location":"application-development/basic-concepts/state-management/","title":"State Management","text":"<p>This section covers the key concepts, decorators, and storage mechanisms used for managing state in ArkTS/ArkUI applications.</p> <p>State management in ArkTS/ArkUI enables you to build dynamic, interactive UIs by keeping your application\u2019s data and UI in sync. This documentation explains the main concepts, decorators, and storage solutions available for handling state at different scopes and lifecycles.</p>"},{"location":"application-development/basic-concepts/state-management/#key-topics-covered","title":"Key Topics Covered","text":"<ul> <li> <p><code>@State</code> Decorator   Declares reactive local state within a component. Changes to <code>@State</code> variables automatically trigger UI updates.</p> </li> <li> <p>Other Decorators   Enable one-way or two-way data binding, state sharing between components, and listening for state changes:</p> </li> <li><code>@Prop</code></li> <li><code>@Link</code></li> <li><code>@ObjectLink</code></li> <li><code>@StorageProp</code></li> <li><code>@StorageLink</code></li> <li><code>@LocalStorageProp</code></li> <li><code>@LocalStorageLink</code></li> <li><code>@Provide</code></li> <li><code>@Consume</code></li> <li> <p><code>@Watch</code></p> </li> <li> <p>AppStorage   A global, application-wide storage for sharing state across all components and pages. Supports decorators for automatic UI synchronization.</p> </li> <li> <p>LocalStorage   Provides in-memory storage for sharing state between components or pages within a limited scope. Offers decorators for one-way and two-way binding.</p> </li> <li> <p>PersistentStorage   Persists selected AppStorage attributes to device storage, ensuring state is retained across app restarts.</p> </li> <li> <p><code>$$</code> Operator   Enables two-way synchronization between TypeScript variables and built-in component state.</p> </li> <li> <p>State Management Patterns   Examples and scenarios for using the above mechanisms in real applications.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/appstorage/","title":"AppStorage","text":"<p>AppStorage provides central storage for application UI state attributes. It is bound to the application process and is created by the UI framework at application startup.</p> <p>Unlike LocalStorage, which is usually used for page-level state sharing, AppStorage enables application-wide UI state sharing. AppStorage is equivalent to the hub of the entire application. </p> <p>This topic describes the AppStorage use scenarios and related decorators: @StorageProp and @StorageLink.</p>"},{"location":"application-development/basic-concepts/state-management/appstorage/#overview","title":"Overview","text":"<p>AppStorage is a built-in global storage that is created automatically when your app starts. It's designed to store shared data that your UI components can access and update at any time.</p> <ul> <li>Think of it as a central place to keep important app-level values, like user settings, theme colors, or login status.</li> <li>The data in <code>AppStorage</code> stays there as long as the app is running.</li> <li>Each piece of data is stored with a unique string key, similar to a dictionary or map.</li> </ul> <p>UI components can automatically stay in sync with values in <code>AppStorage</code>. So when the value changes, the UI updates too.</p> <p>You can also use <code>AppStorage</code> to share state between multiple pages (UIAbility instances) in your app, as long as they run on the main thread.</p> <p>If you want some values to be saved even after the app is closed, you can connect <code>AppStorage</code> to other storage sources\u2014like databases or cloud services\u2014using decorators like <code>@StorageProp</code> and <code>@StorageLink</code>.</p>"},{"location":"application-development/basic-concepts/state-management/appstorage/#storageprop","title":"@StorageProp","text":"<p>As mentioned above, if you want to establish a binding between AppStorage and a custom component, you'll need the @StorageProp or @StorageLink decorator. Use @StorageProp(key) or @StorageLink(key) to decorate variables in the component, where key identifies an attribute in AppStorage.</p> <p>When a custom component is initialized, the attribute value corresponding to the key in AppStorage is used to initialize the @StorageProp(key) or @StorageLink(key) decorated variable. Whether the attribute with the given key exists in AppStorage depends on the application logic. This means that it may be missing from AppStorage. In light of this, local initialization is mandatory for the @StorageProp(key) or @StorageLink(key) decorated variable.</p> <p>By decorating a variable with @StorageProp(key), a one-way data synchronization is established from the attribute with the given key in AppStorage to the variable. A local change can be made, but it will not be synchronized to AppStorage. An update to the attribute with the given key in AppStorage will overwrite local changes.</p>"},{"location":"application-development/basic-concepts/state-management/appstorage/#storagelink","title":"@StorageLink","text":"<p>@StorageLink(key) creates a two-way data synchronization between the variable it decorates and the attribute with the given key in AppStorage.</p> <ol> <li> <p>Local changes are synchronized to AppStorage.</p> </li> <li> <p>Any change in AppStorage is synchronized to the attribute with the given key in all scenarios, including one-way bound variables (@StorageProp decorated variables and one-way bound variables created through @Prop), two-way bound variables (@StorageLink decorated variables and two-way bound variables created through @Link), and other instances (such as PersistentStorage).</p> </li> </ol>"},{"location":"application-development/basic-concepts/state-management/appstorage/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/appstorage/#example-of-using-appstorage-and-localstorage-in-application-logic","title":"Example of Using AppStorage and LocalStorage in Application Logic","text":"<p>Since AppStorage is a singleton, its APIs are all static. How these APIs work resembles the non-static APIs of LocalStorage.</p> <pre><code>AppStorage.setOrCreate('PropA', 47);\n\nlet storage: LocalStorage = new LocalStorage();\nstorage.setOrCreate('PropA',17);\nlet propA: number | undefined = AppStorage.get('PropA') // propA in AppStorage == 47, propA in LocalStorage == 17\nlet link1: SubscribedAbstractProperty&lt;number&gt; = AppStorage.link('PropA'); // link1.get() == 47\nlet link2: SubscribedAbstractProperty&lt;number&gt; = AppStorage.link('PropA'); // link2.get() == 47\nlet prop: SubscribedAbstractProperty&lt;number&gt; = AppStorage.prop('PropA'); // prop.get() == 47\n\nlink1.set(48); // two-way sync: link1.get() == link2.get() == prop.get() == 48\nprop.set(1); // one-way sync: prop.get() == 1; but link1.get() == link2.get() == 48\nlink1.set(49); // two-way sync: link1.get() == link2.get() == prop.get() == 49\n\nstorage.get&lt;number&gt;('PropA') // == 17\nstorage.set('PropA', 101);\nstorage.get&lt;number&gt;('PropA') // == 101\n\nAppStorage.get&lt;number&gt;('PropA') // == 49\nlink1.get() // == 49\nlink2.get() // == 49\nprop.get() // == 49\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/appstorage/#example-of-using-appstorage-and-localstorage-inside-the-ui","title":"Example of Using AppStorage and LocalStorage Inside the UI","text":"<p>@StorageLink works together with AppStorage in the same way as @LocalStorageLink works together with LocalStorage. It creates two-way data synchronization with an attribute in AppStorage.</p> <pre><code>class PropB {\n  code: number;\n\n  constructor(code: number) {\n    this.code = code;\n  }\n}\n\nAppStorage.setOrCreate('PropA', 47);\nAppStorage.setOrCreate('PropB', new PropB(50));\nlet storage = new LocalStorage();\nstorage.setOrCreate('PropA', 48);\nstorage.setOrCreate('PropB', new PropB(100));\n\n@Entry(storage)\n@Component\nstruct CompA {\n  @StorageLink('PropA') storageLink: number = 1;\n  @LocalStorageLink('PropA') localStorageLink: number = 1;\n  @StorageLink('PropB') storageLinkObject: PropB = new PropB(1);\n  @LocalStorageLink('PropB') localStorageLinkObject: PropB = new PropB(1);\n\n  build() {\n    Column({ space: 20 }) {\n      Text(`From AppStorage ${this.storageLink}`)\n        .onClick(() =&gt; {\n          this.storageLink += 1;\n        })\n\n      Text(`From LocalStorage ${this.localStorageLink}`)\n        .onClick(() =&gt; {\n          this.localStorageLink += 1;\n        })\n\n      Text(`From AppStorage ${this.storageLinkObject.code}`)\n        .onClick(() =&gt; {\n          this.storageLinkObject.code += 1;\n        })\n\n      Text(`From LocalStorage ${this.localStorageLinkObject.code}`)\n        .onClick(() =&gt; {\n          this.localStorageLinkObject.code += 1;\n        })\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/appstorage/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS AppStorage</p>"},{"location":"application-development/basic-concepts/state-management/link-decorator/","title":"@Link Decorator","text":"<p>An @Link decorated variable creates two-way synchronization with a variable of its parent component.</p> <p>NOTE</p> <p>This decorator can be used in ArkTS widgets since API version 9.</p>"},{"location":"application-development/basic-concepts/state-management/link-decorator/#feature-and-constraint","title":"Feature and Constraint","text":"<ul> <li>An @Link decorated variable in a child component shares the same value with a variable in its parent component.</li> <li>The @Link decorator cannot be used in custom components decorated by @Entry.</li> </ul>"},{"location":"application-development/basic-concepts/state-management/link-decorator/#usage-scenarios","title":"Usage Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/link-decorator/#example-for-link-with-simple-and-class-types","title":"Example for @Link with Simple and Class Types","text":"<p>In the following example, after Parent View: Set yellowButton and Parent View: Set GreenButton of the parent component ShufflingContainer are clicked, the change in the parent component is synchronized to the child components.</p> <ol> <li> <p>After buttons of the child components GreenButton and YellowButton are clicked, the child components (<code>@Link</code> decorated variables) change accordingly. Due to the two-way synchronization relationship between <code>@Link</code> and <code>@State</code>, the changes are synchronized to the parent component.</p> </li> <li> <p>When a button in the parent component ShufflingContainer is clicked, the parent component (<code>@State</code> decorated variable) changes, and the changes are synchronized to the child components, which are then updated accordingly.</p> </li> </ol> <pre><code>class GreenButtonState {\n  width: number = 0;\n\n  constructor(width: number) {\n    this.width = width;\n  }\n}\n\n@Component\nstruct GreenButton {\n  @Link greenButtonState: GreenButtonState;\n\n  build() {\n    Button('Green Button')\n      .width(this.greenButtonState.width)\n      .height(40)\n      .backgroundColor('#64bb5c')\n      .fontColor('#FFFFFF, 90%')\n      .onClick(() =&gt; {\n        if (this.greenButtonState.width &lt; 700) {\n          // Update the attribute of the class. The change can be observed and synchronized back to the parent component.\n          this.greenButtonState.width += 60;\n        } else {\n          // Update the class. The change can be observed and synchronized back to the parent component.\n          this.greenButtonState = new GreenButtonState(180);\n        }\n      })\n  }\n}\n\n@Component\nstruct YellowButton {\n  @Link yellowButtonState: number;\n\n  build() {\n    Button('Yellow Button')\n      .width(this.yellowButtonState)\n      .height(40)\n      .backgroundColor('#f7ce00')\n      .fontColor('#FFFFFF, 90%')\n      .onClick(() =&gt; {\n        // The change of the decorated variable of a simple type in the child component can be synchronized back to the parent component.\n        this.yellowButtonState += 40.0;\n      })\n  }\n}\n\n@Entry\n@Component\nstruct ShufflingContainer {\n  @State greenButtonState: GreenButtonState = new GreenButtonState(180);\n  @State yellowButtonProp: number = 180;\n\n  build() {\n    Column() {\n      Flex({ direction: FlexDirection.Column, alignItems: ItemAlign.Center }) {\n        // Simple type @Link in the child component synchronized from @State in the parent component.\n        Button('Parent View: Set yellowButton')\n          .width(312)\n          .height(40)\n          .margin(12)\n          .fontColor('#FFFFFF, 90%')\n          .onClick(() =&gt; {\n            this.yellowButtonProp = (this.yellowButtonProp &lt; 700) ? this.yellowButtonProp + 40 : 100;\n          })\n        // Class type @Link in the child component synchronized from @State in the parent component.\n        Button('Parent View: Set GreenButton')\n          .width(312)\n          .height(40)\n          .margin(12)\n          .fontColor('#FFFFFF, 90%')\n          .onClick(() =&gt; {\n            this.greenButtonState.width = (this.greenButtonState.width &lt; 700) ? this.greenButtonState.width + 100 : 100;\n          })\n        // Initialize the class type @Link.\n        GreenButton({ greenButtonState: $greenButtonState }).margin(12)\n        // Initialize the simple type @Link.\n        YellowButton({ yellowButtonState: $yellowButtonProp }).margin(12)\n      }\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/link-decorator/#array-type-link","title":"Array Type @Link","text":"<p>The ArkUI framework can observe the addition, deletion, and replacement of array items. It should be noted that, in the following example, the type of the @Link and @State decorated variables is the same: number[]. It is not allowed to define the @Link decorated variable in the child component as type number (@Link item: number), and create child components for each array item in the @State decorated array in the parent component.</p> <pre><code>@Component\nstruct Child {\n  @Link items: number[]; // Link array for bidirectional synchronization\n\n  build() {\n    Column({ space: 10 }) {\n      Button(`Button1: push`).onClick(() =&gt; {\n        // Add a new element to the array, synchronized back to the parent\n        this.items.push(this.items.length + 1);\n      })\n        .width('80%')\n        .height(40)\n      Button(`Button2: replace whole item`).onClick(() =&gt; {\n        // Replace the entire array, synchronized back to the parent\n        this.items = [100, 200, 300];\n      })\n        .width('80%')\n        .height(40)\n    }\n    .margin(10)\n  }\n}\n\n@Entry\n@Component\nstruct Parent {\n  @State arr: number[] = [1, 2, 3]; // State array for synchronization\n\n  build() {\n    Column() {\n      Child({ items: $arr }) // Initialize Child with @Link to parent state array\n      ForEach(this.arr,\n        (item: number) =&gt; {\n          Row() {\n            Text(`${item}`) // Display each item in the array\n              .fontColor('#d7072858')\n              .height(40)\n          }\n          .margin(10)\n          .width('80%')\n          .justifyContent(FlexAlign.Center)\n          .backgroundColor('#1e000000')\n          .borderRadius(20)\n        },\n        (item: number) =&gt; item.toString()\n      )\n    }\n    .width('100%')\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/link-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Link Decorator</p>"},{"location":"application-development/basic-concepts/state-management/localstorage/","title":"LocalStorage: UI State Storage","text":"<p>LocalStorage provides storage for the page-level UI state. The parameters of the LocalStorage type accepted through the @Entry decorator share the same LocalStorage instance on the page. LocalStorage also allows for state sharing between pages with UIAbility instances.</p> <p>This topic describes only the LocalStorage application scenarios and related decorators: @LocalStorageProp and @LocalStorageLink.</p> <p>NOTE</p> <p>LocalStorage is supported since API version 9.</p>"},{"location":"application-development/basic-concepts/state-management/localstorage/#overview","title":"Overview","text":"<p>LocalStorage is an in-memory \"database\" that ArkTS provides for storing state variables required to build pages of the application UI.</p> <ul> <li> <p>An application can create multiple LocalStorage instances. These instances can be shared on a page or, by using the GetShared API, across pages in a UIAbility instance.</p> </li> <li> <p>The root node of a component tree, that is, the @Component decorated by @Entry, can be assigned to a LocalStorage instance. All child instances of this custom component automatically gain access to the same LocalStorage instance.</p> </li> <li> <p>An @Component decorated component has access to at most one LocalStorage instance and to <code>AppStorage</code>. A component not decorated with @Entry cannot be assigned a LocalStorage instance. It can only accept a LocalStorage instance passed from its parent component through @Entry. A LocalStorage instance can be assigned to multiple components in the component tree.</p> </li> <li> <p>All attributes in LocalStorage are mutable.</p> </li> </ul> <p>The application determines the lifecycle of a LocalStorage object. The JS Engine will garbage collect a LocalStorage object when the application releases the last reference to it, which includes deleting the last custom component.</p> <p>LocalStorage provides two decorators based on the synchronization type of the component decorated with @Component:</p> <ul> <li> <p>@LocalStorageProp: creates a one-way data synchronization with the named attribute in LocalStorage.</p> </li> <li> <p>@LocalStorageLink: creates a two-way data synchronization with the named attribute in LocalStorage.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/localstorage/#localstorageprop","title":"@LocalStorageProp","text":"<p>As mentioned above, if you want to establish a binding between LocalStorage and a custom component, you need to use the @LocalStorageProp and @LocalStorageLink decorators. Specially, use @LocalStorageProp(key) or @LocalStorageLink(key) to decorate variables in the component, where key identifies the attribute in LocalStorage.</p> <p>When a custom component is initialized, the @LocalStorageProp(key)/@LocalStorageLink(key) decorated variable is initialized with the value of the attribute with the given key in LocalStorage. Local initialization is mandatory. If an attribute with the given key is missing from LocalStorage, it will be added with the stated initializing value. (Whether the attribute with the given key exists in LocalStorage depends on the application logic.)</p> <p>NOTE</p> <p>This decorator can be used in ArkTS widgets since API version 9.</p> <p>By decorating a variable with @LocalStorageProp(key), a one-way data synchronization is established from the attribute with the given key in LocalStorage to the variable. This means that, local changes (if any) will not be synchronized to LocalStorage, and an update to the attribute with the given key in LocalStorage \u2013 for example, a change made with the **set ** API \u2013 will overwrite local changes.</p>"},{"location":"application-development/basic-concepts/state-management/localstorage/#localstoragelink","title":"@LocalStorageLink","text":"<p>@LocalStorageLink is required if you need to synchronize the changes of the state variables in a custom component back to LocalStorage.</p> <p>@LocalStorageLink(key) creates a two-way data synchronization with the attribute with the given key in LocalStorage.</p> <ol> <li> <p>If a local change occurs, it is synchronized to LocalStorage.</p> </li> <li> <p>Changes in LocalStorage are synchronized to all attributes with the given key, including one-way bound variables (@LocalStorageProp decorated variables and one-way bound variables created through @Prop) and two-way bound variables (@LocalStorageLink decorated variables and two-way bound variables created through @Link).</p> </li> </ol>"},{"location":"application-development/basic-concepts/state-management/localstorage/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/localstorage/#example-of-using-localstorage-in-application-logic","title":"Example of Using LocalStorage in Application Logic","text":"<pre><code>let para: Record&lt;string,number&gt; = { 'PropA': 47 };\nlet storage: LocalStorage = new LocalStorage(para); // Create an instance and initialize it with the given object.\nlet propA: number | undefined = storage.get('PropA') // propA == 47\nlet link1: SubscribedAbstractProperty&lt;number&gt; = storage.link('PropA'); // link1.get() == 47\nlet link2: SubscribedAbstractProperty&lt;number&gt; = storage.link('PropA'); // link2.get() == 47\nlet prop: SubscribedAbstractProperty&lt;number&gt; = storage.prop('PropA'); // prop.get() == 47\nlink1.set(48); // two-way sync: link1.get() == link2.get() == prop.get() == 48\nprop.set(1); // one-way sync: prop.get() == 1; but link1.get() == link2.get() == 48\nlink1.set(49); // two-way sync: link1.get() == link2.get() == prop.get() == 49\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/localstorage/#example-for-using-localstorage-inside-the-ui","title":"Example for Using LocalStorage Inside the UI","text":"<p>The two decorators @LocalStorageProp and @LocalStorageLink can work together to obtain the state variable stored in a LocalStorage instance in the UI component.</p> <p>This example uses @LocalStorageLink to show how to:</p> <ul> <li> <p>Use the build function to create a LocalStorage instance named storage.</p> </li> <li> <p>Use the @Entry decorator to add storage to the top-level component CompA.</p> </li> <li> <p>Use @LocalStorageLink to create a two-way data synchronization with the given attribute in LocalStorage.</p> </li> </ul> <p>```ts class PropB {   code: number;</p> <p>constructor(code: number) {     this.code = code;   } } // Create a new instance and initialize it with the given object. let para: Record = { 'PropA': 47 }; let storage: LocalStorage = new LocalStorage(para); storage.setOrCreate('PropB', new PropB(50)); <p>@Component struct Child {   // @LocalStorageLink creates a two-way data synchronization with the PropA attribute in LocalStorage.   @LocalStorageLink('PropA') childLinkNumber: number = 1;   // @LocalStorageLink creates a two-way data synchronization with the PropB attribute in LocalStorage.   @LocalStorageLink('PropB') childLinkObject: PropB = new PropB(0);</p> <p>build() {     Column() {       Button(<code>Child from LocalStorage ${this.childLinkNumber}</code>) // The changes will be synchronized to PropA in LocalStorage and with Parent.parentLinkNumber.         .onClick(() =&gt; {           this.childLinkNumber += 1;         })       Button(<code>Child from LocalStorage ${this.childLinkObject.code}</code>) // The changes will be synchronized to PropB in LocalStorage and with Parent.parentLinkObject.code.         .onClick(() =&gt; {           this.childLinkObject.code += 1;         })     }   } } // Make LocalStorage accessible from the @Component decorated component. @Entry(storage) @Component struct CompA {   // @LocalStorageLink creates a two-way data synchronization with the PropA attribute in LocalStorage.   @LocalStorageLink('PropA') parentLinkNumber: number = 1;   // @LocalStorageLink creates a two-way data synchronization with the PropB attribute in LocalStorage.   @LocalStorageLink('PropB') parentLinkObject: PropB = new PropB(0);</p> <p>build() {     Column({ space: 15 }) {       Button(<code>Parent from LocalStorage ${this.parentLinkNumber}</code>) // The initial value from LocalStorage will be 47, because PropA has been initialized.         .onClick(() =&gt; {           this.parentLinkNumber += 1;         })</p> <pre><code>  Button(`Parent from LocalStorage ${this.parentLinkObject.code}`) // The initial value from LocalStorage will be 50, because PropB has been initialized.\n    .onClick(() =&gt; {\n      this.parentLinkObject.code += 1;\n    })\n  // @The @Component decorated child component automatically obtains access to the CompA LocalStorage instance.\n  Child()\n}\n</code></pre> <p>} } ```   </p>"},{"location":"application-development/basic-concepts/state-management/localstorage/#simple-example-of-using-localstorageprop-with-localstorage","title":"Simple Example of Using @LocalStorageProp with LocalStorage","text":"<p>In this example, the CompA and Child components create local data that is one-way synchronized with the PropA attribute in the LocalStorage instance storage.  - The change of this.storProp1 in CompA takes effect only in CompA and is not synchronized to storage.  - In the Child component, the value of storageProp2 bound to Text is still 47.  <code>ts // Create a new instance and initialize it with the given object. let para: Record&lt;string, number&gt; = { 'PropA': 47 }; let storage: LocalStorage = new LocalStorage(para); // Make LocalStorage accessible from the @Component decorated component. @Entry(storage) @Component struct CompA {   // @LocalStorageProp creates a one-way data synchronization with the PropA attribute in LocalStorage.   @LocalStorageProp('PropA') storageProp1: number = 1;    build() {     Column({ space: 15 }) {       // The initial value is 47. After the button is clicked, the value is incremented by 1. The change takes effect only in storageProp1 in the current component and is not synchronized to LocalStorage.       Button(`Parent from LocalStorage ${this.storageProp1}`)         .onClick(() =&gt; {           this.storageProp1 += 1         })       Child()     }   } }  @Component struct Child {   // @LocalStorageProp creates a one-way data synchronization with the PropA attribute in LocalStorage.   @LocalStorageProp('PropA') storageProp2: number = 2;    build() {     Column({ space: 15 }) {       // When CompA changes, the current storageProp2 does not change, and 47 is displayed.       Text(`Parent from LocalStorage ${this.storageProp2}`)     }   } }</code></p>"},{"location":"application-development/basic-concepts/state-management/localstorage/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS LocalStorage</p>"},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/","title":"@Observed and @ObjectLink Decorators","text":"<p>@ObjectLink and @Observed class decorators are used for two-way data synchronization in scenarios involving nested objects or arrays, making up for the limitation that other decorators can only observe changes in one layer.</p> <p>NOTE</p> <p>These two decorators can be used in ArkTS widgets since API version 9.</p>"},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/#features","title":"Features","text":"<ul> <li><code>@Observed</code> is used to mark a class so that its created instances can observe property changes, mainly used in nested class scenarios.</li> <li><code>@ObjectLink</code> decorates the state variables in the child component, receives the instance of the class decorated with <code>@Observed</code>, and establishes a two-way data binding with the corresponding state variable in the parent component.</li> </ul>"},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/#constraints","title":"Constraints","text":"<ul> <li> <p>Using @Observed to decorate a class changes the original prototype chain of the class. Using @Observed and other class decorators to decorate the same class may cause problems.</p> </li> <li> <p>The @ObjectLink decorator cannot be used in custom components decorated by @Entry.</p> </li> <li> <p>Value assignment is not allowed for the @ObjectLink decorated variable. To assign a value, use @Prop instead.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/#usage-scenarios","title":"Usage Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/#nested-object","title":"Nested Object","text":"<p>NOTE</p> <p>NextID is used to generate a unique, persistent key for each array item during ForEach rendering, so as to identify the corresponding component.</p> <pre><code>// objectLinkNestedObjects.ets\nlet NextID: number = 1;\n\n@Observed\nclass Bag {\n  public id: number;\n  public size: number;\n\n  constructor(size: number) {\n    this.id = NextID++;\n    this.size = size;\n  }\n}\n\n@Observed\nclass User {\n  public bag: Bag;\n\n  constructor(bag: Bag) {\n    this.bag = bag;\n  }\n}\n\n@Observed\nclass Book {\n  public bookName: BookName;\n\n  constructor(bookName: BookName) {\n    this.bookName = bookName;\n  }\n}\n\n@Observed\nclass BookName extends Bag {\n  public nameSize: number;\n\n  constructor(nameSize: number) {\n    // Invoke the parent class method to process nameSize.\n    super(nameSize);\n    this.nameSize = nameSize;\n  }\n}\n\n@Component\nstruct ViewA {\n  label: string = 'ViewA';\n  @ObjectLink bag: Bag;\n\n  build() {\n    Column() {\n      Text(`ViewA [${this.label}] this.bag.size = ${this.bag.size}`)\n        .fontColor('#ffffffff')\n        .backgroundColor('#ff3d9dba')\n        .width(320)\n        .height(50)\n        .borderRadius(25)\n        .margin(10)\n        .textAlign(TextAlign.Center)\n      Button(`ViewA: this.bag.size add 1`)\n        .width(320)\n        .backgroundColor('#ff17a98d')\n        .margin(10)\n        .onClick(() =&gt; {\n          this.bag.size += 1;\n        })\n    }\n  }\n}\n\n@Component\nstruct ViewC {\n  label: string = 'ViewC1';\n  @ObjectLink bookName: BookName;\n\n  build() {\n    Row() {\n      Column() {\n        Text(`ViewC [${this.label}] this.bookName.size = ${this.bookName.size}`)\n          .fontColor('#ffffffff')\n          .backgroundColor('#ff3d9dba')\n          .width(320)\n          .height(50)\n          .borderRadius(25)\n          .margin(10)\n          .textAlign(TextAlign.Center)\n        Button(`ViewC: this.bookName.size add 1`)\n          .width(320)\n          .backgroundColor('#ff17a98d')\n          .margin(10)\n          .onClick(() =&gt; {\n            this.bookName.size += 1;\n            console.log('this.bookName.size:' + this.bookName.size)\n          })\n      }\n      .width(320)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct ViewB {\n  @State user: User = new User(new Bag(0));\n  @State child: Book = new Book(new BookName(0));\n\n  build() {\n    Column() {\n      ViewA({ label: 'ViewA #1', bag: this.user.bag })\n        .width(320)\n      ViewC({ label: 'ViewC #3', bookName: this.child.bookName })\n        .width(320)\n      Button(`ViewB: this.child.bookName.size add 10`)\n        .width(320)\n        .backgroundColor('#ff17a98d')\n        .margin(10)\n        .onClick(() =&gt; {\n          this.child.bookName.size += 10\n          console.log('this.child.bookName.size:' + this.child.bookName.size)\n        })\n      Button(`ViewB: this.user.bag = new Bag(10)`)\n        .width(320)\n        .backgroundColor('#ff17a98d')\n        .margin(10)\n        .onClick(() =&gt; {\n          this.user.bag = new Bag(10);\n        })\n      Button(`ViewB: this.user = new User(new Bag(20))`)\n        .width(320)\n        .backgroundColor('#ff17a98d')\n        .margin(10)\n        .onClick(() =&gt; {\n          this.user = new User(new Bag(20));\n        })\n    }\n  }\n}\n</code></pre> <p>The @Observed decorated BookName class can observe changes in the attributes inherited from the base class.</p> <p>Event handles in ViewB:</p> <ul> <li> <p>this.user.bag = new Bag(10) and this.user = new User(new Bag(20)): Change to the @State decorated variable size and its attributes.</p> </li> <li> <p>this.child.bookName.size += ...: Change at the second layer. Though @State cannot observe changes at the second layer, the change of an attribute of @Observed decorated Bag, which is attribute size in this example, can be observed by @ObjectLink.</p> </li> </ul> <p>Event handle in ViewC:</p> <ul> <li> <p>this.bookName.size += 1: A change to the @ObjectLink decorated variable size causes the button label to be updated. Unlike @Prop, @ObjectLink does not have a copy of its source. Instead, @ObjectLink creates a reference to its source.</p> </li> <li> <p>The @ObjectLink decorated variable is read-only. Assigning this.bookName = new bookName(...) is not allowed. Once value assignment occurs, the reference to the data source is reset and the synchronization is interrupted.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/observed-objectlink-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Observed and ObjectLink Decorator</p>"},{"location":"application-development/basic-concepts/state-management/operator/","title":"$$ Syntax: Two-Way Synchronization of Built-in Components","text":"<p>The $$ operator provides a TypeScript variable by-reference to a built-in component so that the variable value and the internal state of that component are kept in sync.</p> <p>What the internal state is depends on the component. For example, for the TextInput component, it is the text parameter.</p>"},{"location":"application-development/basic-concepts/state-management/operator/#example","title":"Example","text":"<p>This example uses the text parameter of the TextInput component.</p> <pre><code>// xxx.ets\n@Entry\n@Component\nstruct TextInputExample {\n  @State text: string = ''\n  controller: TextInputController = new TextInputController()\n\n  build() {\n    Column({ space: 20 }) {\n      Text(this.text)\n      TextInput({ text: $$this.text, placeholder: 'input your word...', controller: this.controller })\n        .placeholderColor(Color.Grey)\n        .placeholderFont({ size: 14, weight: 400 })\n        .caretColor(Color.Blue)\n        .width(300)\n    }.width('100%').height('100%').justifyContent(FlexAlign.Center)\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/operator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Two Way Sync</p>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/","title":"PersistentStorage","text":"<p>During application development, you may want selected attributes to persist even when the application is closed. In this case, you'll need PersistentStorage.</p> <p>PersistentStorage is an optional singleton object within an application. Its purpose is to persist selected AppStorage attributes so that their values are the same upon application re-start as they were when the application was closed.</p>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/#overview","title":"Overview","text":"<p>PersistentStorage retains the selected AppStorage attributes on the device. The application uses the API to determine which AppStorage attributes should be persisted with PersistentStorage. The UI and business logic do not directly access attributes in PersistentStorage. All attribute access is to AppStorage. Changes in AppStorage are automatically synchronized to PersistentStorage.</p> <p>PersistentStorage creates a two-way synchronization with attributes in AppStorage. A frequently used API function is to access AppStorage through PersistentStorage. Additional API functions include managing persisted attributes. The business logic always obtains or sets attributes through AppStorage.</p>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/#constraints","title":"Constraints","text":"<p>PersistentStorage accepts the following types and values:</p> <ul> <li>Primitive types such as number, string, boolean, and enum.</li> <li>Objects that can be reconstructed by JSON.stringify() and JSON.parse(). In other words, built-in types such as Date, Map, and Set, as well as object attribute methods, are not supported.</li> </ul> <p>PersistentStorage does not accept the following types and values:</p> <ul> <li>Nested objects (object arrays and object attributes), because the framework cannot detect the value changes of nested objects (including arrays) in AppStorage.</li> <li>undefined and null.</li> </ul> <p>Data persistence is an operation that takes time. Applications should avoid the following situations:</p> <ul> <li> <p>Persistence of large data sets</p> </li> <li> <p>Persistence of variables that change frequently</p> </li> </ul> <p>It is recommended that the persistent variables of PersistentStorage be less than 2 KB. As PersistentStorage flushes data synchronously, a large amount of persistent data may result in simultaneous time-consuming read and write operations in the UI thread, affecting UI rendering performance. If you need to store a large amount of data, consider using the database API.</p> <p>PersistentStorage is associated with UI instances. Data persistence can succeed only when a UI instance has been initialized (that is, when the callback passed in by <code>loadContent</code> is called).</p> <pre><code>// EntryAbility.ets\nonWindowStageCreate(windowStage: window.WindowStage): void {\n  windowStage.loadContent('pages/Index', (err) =&gt; {\n    if (err.code) {\n      return;\n    }\n    PersistentStorage.persistProp('aProp', 47);\n  });\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/persistentstorage/#accessing-persistentstorage-initialized-attribute-from-appstorage","title":"Accessing PersistentStorage Initialized Attribute from AppStorage","text":"<ol> <li>Initialize the PersistentStorage instance.</li> </ol> <pre><code>PersistentStorage.persistProp('aProp', 47);\n</code></pre> <ol> <li>Obtain the corresponding attribute from AppStorage.</li> </ol> <pre><code>AppStorage.get&lt;number&gt;('aProp'); // returns 47\n</code></pre> <p>Alternatively, apply local definition within the component:</p> <pre><code>@StorageLink('aProp') aProp: number = 48;\n</code></pre> <p>The complete code is as follows:</p> <pre><code>PersistentStorage.persistProp('aProp', 47);\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World'\n  @StorageLink('aProp') aProp: number = 48\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n        // The current result is saved when the application exits. After the restart, the last saved result is displayed.\n        Text(`${this.aProp}`)\n          .onClick(() =&gt; {\n            this.aProp += 1;\n          })\n      }\n    }\n  }\n}\n</code></pre> <ul> <li>First running after fresh application installation:</li> <li>persistProp is called to initialize PersistentStorage. A search for the aProp attribute in PersistentStorage returns no result, because the application has just been installed.</li> <li>A search for the attribute aProp in AppStorage still returns no result.</li> <li>Create the aProp attribute of the number type in AppStorge and initialize it with the value 47.</li> <li>PersistentStorage writes the aProp attribute and its value 47 to the local device. The value of aProp in AppStorage and its subsequent changes are persisted.</li> <li> <p>In the \\ component, create the state variable @StorageLink('aProp') aProp, which creates a two-way synchronization with the aProp attribute in AppStorage. During the creation, the search in AppStorage for the aProp attribute is successful, and therefore, the state variable is initialized with the value 47 found in AppStorage. <li> <p>After a click event is triggered:</p> </li> <li>The state variable @StorageLink('aProp') aProp is updated, triggering the \\ component to be re-rendered. <li>The two-way synchronization between the @StorageLink decorated variable and AppStorage results in the change of the @StorageLink('aProp') aProp being synchronized back to AppStorage.</li> <li>The change of the aProp attribute in AppStorage triggers any other one-way or two-way bound variables to be updated. (In this example, there are no such other variables.)</li> <li> <p>Because the attribute corresponding to aProp has been persisted, the change of the aProp attribute in AppStorage triggers PersistentStorage to write the attribute and its new value to the device.</p> </li> <li> <p>Subsequent application running:</p> </li> <li>PersistentStorage.persistProp('aProp', 47) is called. A search for the aProp attribute in PersistentStorage succeeds.</li> <li>The attribute is added to AppStorage with the value found in PersistentStorage.</li> <li>In the \\ component, the value of the @StorageLink decorated aProp attribute is the value written by PersistentStorage to AppStorage, that is, the value stored when the application was closed last time."},{"location":"application-development/basic-concepts/state-management/persistentstorage/#accessing-an-attribute-in-appstorage-before-persistentstorage","title":"Accessing an Attribute in AppStorage Before PersistentStorage","text":"<p>This example is an incorrect use. It is incorrect to use the API to access the attributes in AppStorage before calling PersistentStorage.persistProp or persistProps, because such a call sequence will result in loss of the attribute values used in the previous application run:</p> <pre><code>let aProp = AppStorage.setOrCreate('aProp', 47);\nPersistentStorage.persistProp('aProp', 48);\n</code></pre> <p>AppStorage.setOrCreate('aProp', 47): The aProp attribute of the number type is created in AppStorage, and its value is set to the specified default value 47. aProp is a persisted attribute. Therefore, it is written back to PersistentStorage, and the value stored in PersistentStorage from the previous run is lost.</p> <p>PersistentStorage.persistProp('aProp', 48): An attribute with the name aProp and value 47 \u2013 set through the API in AppStorage \u2013 is found in PersistentStorage.</p>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/#accessing-an-attribute-in-appstorage-after-persistentstorage","title":"Accessing an Attribute in AppStorage After PersistentStorage","text":"<p>If you do not want to overwrite the values saved in PersistentStorage during the previous application run, make sure any access to attributes in AppStorage is made after a call to a PersistentStorage API.</p> <pre><code>PersistentStorage.persistProp('aProp', 48);\nif (AppStorage.get('aProp') &gt; 50) {\n    // If the value stored in PersistentStorage exceeds 50, set the value to 47.\n    AppStorage.setOrCreate('aProp',47);\n}\n</code></pre> <p>After reading the data stored in PersistentStorage, the sample code checks whether the value of aProp is greater than 50 and, if it is, sets aProp to 47 through an API in AppStorage.</p>"},{"location":"application-development/basic-concepts/state-management/persistentstorage/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS PersistStorage</p>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/","title":"@Prop Decorator","text":"<p>One-way synchronization is supported between an <code>@Prop</code> decorated variable a variable of its parent component. This means that, an <code>@Prop</code> decorated variable is mutable, and its changes will not be synchronized to the parent component.</p>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#features","title":"Features","text":"<p>For the <code>@Prop</code> decorated variable of a child component, the change synchronization to the parent component is uni-directional.</p> <ul> <li> <p>An <code>@Prop</code> variable is allowed to be modified locally, but the change does not propagate back to its parent component.</p> </li> <li> <p>Whenever the data source changes, the <code>@Prop</code> decorated variable gets updated, and any locally made changes are overwritten. In other words, the change is synchronized from the parent component to the (owning) child component, but not the other way around.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#restrictions","title":"Restrictions","text":"<ul> <li> <p>When decorating variables, <code>@Prop</code> makes a deep copy, during which all types, except primitive types, Map, Set, Date, and Array, will be lost. For example, for complex types provided by N-API, such as <code>PixelMap</code>, because they are partially implemented in the native code, complete data cannot be obtained through a deep copy in ArkTS.</p> </li> <li> <p>The <code>@Prop</code> decorator cannot be used in custom components decorated by <code>@Entry</code>.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/prop-decorator/#simple-type-sync-from-state-of-the-parent-component-to-prop-of-the-child-component","title":"Simple Type Sync from @State of the Parent Component to @Prop of the Child Component","text":"<p>In this example, the <code>@Prop</code> decorated count variable in the <code>CountDownComponent</code> child component is initialized from the <code>@State</code> decorated <code>countDownStartValue</code> variable in the <code>ParentComponent</code>. When Try again is touched, the value of the count variable is modified, but the change remains within the <code>CountDownComponent</code> and does not affect the <code>ParentComponent</code>.</p> <p>Updating <code>countDownStartValue</code> in the <code>ParentComponent</code> will update the value of the <code>@Prop</code> decorated count.</p> <p><pre><code>@Component\nstruct CountDownComponent {\n  @Prop count: number = 0;\n  costOfOneAttempt: number = 1;\n\n  build() {\n    Column() {\n      if (this.count &gt; 0) {\n        Text(`You have ${this.count} Nuggets left`)\n      } else {\n        Text('Game over!')\n      }\n      // Changes to the @Prop decorated variables are not synchronized to the parent component.\n      Button(`Try again`).onClick(() =&gt; {\n        this.count -= this.costOfOneAttempt;\n      })\n    }\n  }\n}\n\n@Entry\n@Component\nstruct ParentComponent {\n  @State countDownStartValue: number = 10;\n\n  build() {\n    Column() {\n      Text(`Grant ${this.countDownStartValue} nuggets to play.`)\n      // Changes to the data source provided by the parent component are synchronized to the child component.\n      Button(`+1 - Nuggets in New Game`).onClick(() =&gt; {\n        this.countDownStartValue += 1;\n      })\n      // Updating the parent component will also update the child component.\n      Button(`-1  - Nuggets in New Game`).onClick(() =&gt; {\n        this.countDownStartValue -= 1;\n      })\n\n      CountDownComponent({ count: this.countDownStartValue, costOfOneAttempt: 2 })\n    }\n  }\n}\n</code></pre> The display is previewed as the following:</p> <p>In the preceding example:</p> <ol> <li> <p>On initial render, when the CountDownComponent child component is created, its <code>@Prop</code> decorated count variable is initialized from the <code>@State</code> decorated countDownStartValue variable in the ParentComponent.</p> </li> <li> <p>When the \"+1\" or \"-1\" button is touched, the <code>@State</code> decorated countDownStartValue of the ParentComponent changes. This will cause the ParentComponent to re-render. At the minimum, the CountDownComponent will be updated because of the change in the count variable value.</p> </li> <li> <p>Because of the change in the count variable value, the CountDownComponent child component will re-render. At a minimum, the if statement's condition (this.counter&gt; 0) is evaluated, and the \\ child component inside the if statement would be updated. <li> <p>When Try again in the CountDownComponent child component is touched, the value of the count variable is modified, but the change remains within the child component and does not affect the countDownStartValue in the parent component.</p> </li> <li> <p>Updating countDownStartValue will overwrite the local value changes of the <code>@Prop</code> decorated count in the CountDownComponent child component.</p> </li>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#simple-type-prop-synced-from-state-array-item-in-parent-component","title":"Simple Type @Prop Synced from @State Array Item in Parent Component","text":"<p>The <code>@State</code> decorated array an array item in the parent component can be used as data source to initialize and update a <code>@Prop</code> decorated variable. In the following example, the <code>@State</code> decorated array arr in the parent component Index initializes the <code>@Prop</code> decorated value variable in the child component Child. <pre><code>@Component\nstruct Child {\n  @Prop value: number = 0;\n\n  build() {\n    Text(`${this.value}`)\n      .fontSize(50)\n      .onClick(() =&gt; {\n        this.value++\n      })\n  }\n}\n\n@Entry\n@Component\nstruct Index {\n  @State arr: number[] = [1, 2, 3];\n\n  build() {\n    Row() {\n      Column() {\n        Child({ value: this.arr[0] })\n        Child({ value: this.arr[1] })\n        Child({ value: this.arr[2] })\n\n        Divider().height(5)\n\n        ForEach(this.arr,\n          (item: number) =&gt; {\n            Child({ value: item })\n          },\n          (item: string) =&gt; item.toString()\n        )\n        Text('replace entire arr')\n          .fontSize(50)\n          .onClick(() =&gt; {\n            // Both arrays contain item \"3\".\n            this.arr = this.arr[0] == 1 ? [3, 4, 5] : [1, 2, 3];\n          })\n      }\n    }\n  }\n}\n</code></pre></p> <p>Initial render creates six instances of the Child component. Each <code>@Prop</code> decorated variable is initialized with a copy of an array item. The onclick event handler of the Child component changes the local variable value.</p> <p>Click 1 six times, 2 five times, and 3 four times on the page. The local values of all variables are then changed to 7.</p> <pre><code>7\n7\n7\n----\n7\n7\n7\n</code></pre> <p>After replace entire arr is clicked, the following information is displayed:</p> <pre><code>3\n4\n5\n----\n7\n4\n5\n</code></pre> <ul> <li> <p>Changes made in the Child component are not synchronized to the parent component Index. Therefore, even if the values of the six instances of the Child component are 7, the value of this.arr in the Index component is still [1,2,3].</p> </li> <li> <p>After replace entire arr is clicked, if this.arr[0] == 1 is true, this.arr is set to [3, 4, 5].</p> </li> <li> <p>Because this.arr[0] has been changed, the Child({value: this.arr[0]}) component synchronizes the update of this.arr[0] to the instance's @Prop decorated variable. The same happens for Child({value: this.arr[1]}) and Child({value: this.arr[2]}).</p> </li> <li> <p>The change of this.arr causes ForEach to update: According to the diff algorithm, the array item with the ID 3 is retained in this update, array items with IDs 1 and 2 are deleted, and array items with IDs 4 and 5 are added. The array before and after the update is [1, 2, 3] and [3, 4, 5], respectively. This implies that the Child instance generated for item 3 is moved to the first place, but not updated. In this case, the component value corresponding to 3 is 7, and the final render result of ForEach is 7, 4, and 5.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#class-object-type-prop-synced-from-state-class-object-property-in-parent-component","title":"Class Object Type @Prop Synced from @State Class Object Property in Parent Component","text":"<p>In a library with one book and two readers, each reader can mark the book as read, and the marking does not affect the other reader. Technically speaking, local changes to the @Prop decorated book object do not sync back to the <code>@State</code> decorated book in the Library component.</p> <p>In this example, the <code>@Observed</code> decorator can be applied to the book class, but it is not mandatory. It is only needed for nested structures. </p> <p><pre><code>class Book {\n  public title: string;\n  public pages: number;\n  public readIt: boolean = false;\n\n  constructor(title: string, pages: number) {\n    this.title = title;\n    this.pages = pages;\n  }\n}\n\n@Component\nstruct ReaderComp {\n  @Prop book: Book = new Book(\"\", 0);\n\n  build() {\n    Row() {\n      Text(this.book.title)\n      Text(`...has${this.book.pages} pages!`)\n      Text(`...${this.book.readIt ? \"I have read\" : 'I have not read it'}`)\n        .onClick(() =&gt; this.book.readIt = true)\n    }\n  }\n}\n\n@Entry\n@Component\nstruct Library {\n  @State book: Book = new Book('100 secrets of C++', 765);\n\n  build() {\n    Column() {\n      ReaderComp({ book: this.book })\n      ReaderComp({ book: this.book })\n    }\n  }\n}\n</code></pre> The display is previewed as the following:</p>"},{"location":"application-development/basic-concepts/state-management/prop-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Prop Decorator</p>"},{"location":"application-development/basic-concepts/state-management/provide-consume-decorator/","title":"@Provide and @Consume Decorators","text":"<p>@Provide and @Consume are used for two-way data synchronization with descendant components when state data needs to be transferred between multiple levels. They do not involve passing a variable from component to component multiple times.</p> <ul> <li>An @Provide decorated state variable exists in the ancestor component and is said to be \"provided\" to descendent components. </li> <li>An @Consume decorated state variable is used in a descendent component. It is linked to (\"consumes\") the provided state variable in its ancestor component.</li> </ul> <p>NOTE</p> <p>Since API version 9, these two decorators are supported in ArkTS widgets.</p>"},{"location":"application-development/basic-concepts/state-management/provide-consume-decorator/#features","title":"Features","text":"<ul> <li> <p>An @Provide decorated state variable becomes available to all descendent components of the providing component automatically. The variable is said to be \"provided\" to other components. This means that you do not need to pass a variable from component to component multiple times.</p> </li> <li> <p>A descendent component gains access to the provided state variable by decorating a variable with @Consume. This establishes a two-way data synchronization between the provided and the consumed variable. This synchronization works in the same manner as a combination of @State and @Link does. The only difference is that the former allows transfer across multiple levels of the UI parent-child hierarchy.</p> </li> <li> <p>@Provide and @Consume can be bound using the same variable name or variable alias. Whenever possible, use the same variable types to prevent implicit type conversion and consequently application behavior exceptions.</p> </li> </ul> <pre><code>// Binding through the same variable name\n@Provide a: number = 0;\n@Consume a: number;\n\n// Binding through the same variable alias\n@Provide('a') b: number = 0;\n@Consume('a') c: number;\n</code></pre> <p>When @Provide and @Consume are bound through the same variable name or variable alias, the variables decorated by @Provide and @Consume are in a one-to-many relationship. A custom component, including its child components, should not contain multiple @Provide decorated variables under the same name or alias. Otherwise, a runtime error will occur.</p>"},{"location":"application-development/basic-concepts/state-management/provide-consume-decorator/#usage-scenarios","title":"Usage Scenarios","text":"<p>The following example shows the two-way synchronization between @Provide and @Consume decorated variables. When the buttons in the CompA and CompD components are clicked, the changes to reviewVotes are synchronized to the CompA and CompD components.</p> <pre><code>@Component\nstruct CompD {\n  // The @Consume decorated variable is bound to the @Provide decorated variable in its ancestor component CompA under the same attribute name.\n  @Consume reviewVotes: number;\n\n  build() {\n    Column() {\n      Text(`reviewVotes(${this.reviewVotes})`)\n      Button(`reviewVotes(${this.reviewVotes}), give +1`)\n        .onClick(() =&gt; this.reviewVotes += 1)\n    }\n    .width('50%')\n  }\n}\n\n@Component\nstruct CompC {\n  build() {\n    Row({ space: 5 }) {\n      CompD()\n      CompD()\n    }\n  }\n}\n\n@Component\nstruct CompB {\n  build() {\n    CompC()\n  }\n}\n\n@Entry\n@Component\nstruct CompA {\n  // @Provide decorated variable reviewVotes is provided by the entry component CompA.\n  @Provide reviewVotes: number = 0;\n\n  build() {\n    Column() {\n      Button(`reviewVotes(${this.reviewVotes}), give +1`)\n        .onClick(() =&gt; this.reviewVotes += 1)\n      CompB()\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/provide-consume-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Provide and Consume Decorator </p>"},{"location":"application-development/basic-concepts/state-management/state-decorator/","title":"@State Decorator","text":"<p>Variables decorated with <code>@State</code>, also known as state variable, are used in our development to declare internal component states. When a property is decorated with <code>@State</code>, it becomes a reactive state of the component. This means that whenever the property's value changes, the component will automatically re-render to reflect the updated state.</p>"},{"location":"application-development/basic-concepts/state-management/state-decorator/#features","title":"Features","text":"<ul> <li> <p>A one-way synchronization relationship can be set up from an <code>@State</code> decorated variable to an <code>@Prop</code> decorated variable in a child component, and a two-way synchronization relationship to an <code>@Link</code> or <code>@ObjectLink</code> decorated variable.</p> </li> <li> <p>The lifecycle of the <code>@State</code> decorated variable is the same as that of its owning custom component.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/state-decorator/#use-scenarios","title":"Use Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/state-decorator/#decorating-simple-type-variables","title":"Decorating Simple Type Variables","text":"<p>Below is a simple counter component to demonstrate how the <code>@State</code> decorator works.</p> <p><pre><code>@Entry\n@Component\nstruct MyComponent {\n  @State count: number = 0; // State variable\n\n  build() {\n    Button(`click times: ${this.count}`)\n      .width(200)\n      .height(80)\n      .fontSize(20)\n      .margin(60)\n      .onClick(() =&gt; {\n        this.count += 1; // Increment count on button click\n      })\n  }\n}\n</code></pre> In the code above, we define a component named <code>MyComponent</code>, which contains a state variable called <code>count</code>. We declare the <code>count</code> property using the <code>@State</code> decorator, making it a reactive state. When the user clicks the button, the value of <code>count</code> is incremented by 1, and the component automatically re-renders to display the latest count.</p>"},{"location":"application-development/basic-concepts/state-management/state-decorator/#decorating-the-class-object-type-variables","title":"Decorating the Class Object Type Variables","text":"<ul> <li> <p>In this example, <code>@State</code> is used to decorate the variables count and title in the custom component MyComponent. The type of title is Model, a custom class. If the value of count or title changes, the framework searches for all MyComponent instances that depend on these variables and triggers re-rendering of them.</p> </li> <li> <p>The EntryComponent has multiple MyComponent instances. The internal state change of the first MyComponent instance does not affect the second MyComponent instance.</p> </li> </ul> <pre><code>class Model {\n  public value: string;\n\n  constructor(value: string) {\n    this.value = value;\n  }\n}\n\n@Entry\n@Component\nstruct EntryComponent {\n  build() {\n    Column() {\n      // The parameters specified here will overwrite the default values defined locally during initial render. Not all parameters need to be initialized from the parent component.\n      MyComponent({ count: 1, increaseBy: 2 })\n        .width(300)\n      MyComponent({ title: new Model('Hello World 2'), count: 7 })\n    }\n  }\n}\n\n@Component\nstruct MyComponent {\n  @State title: Model = new Model('Hello World');\n  @State count: number = 0;\n  private increaseBy: number = 1;\n\n  build() {\n    Column() {\n      Text(`${this.title.value}`)\n        .margin(10)\n      Button(`Click to change title`)\n        .onClick(() =&gt; {\n          // The update of the @State decorated variable triggers the update of the &lt;Text&gt; component.\n          this.title.value = this.title.value === 'Hello ArkUI' ? 'Hello World' : 'Hello ArkUI';\n        })\n        .width(300)\n        .margin(10)\n\n      Button(`Click to increase count = ${this.count}`)\n        .onClick(() =&gt; {\n          // The update of the @State decorated variable triggers the update of the &lt;Button&gt; component.\n          this.count += this.increaseBy;\n        })\n        .width(300)\n        .margin(10)\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/state-management/state-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS State Decorator</p>"},{"location":"application-development/basic-concepts/state-management/watch-decorator/","title":"@Watch Decorator","text":"<p>@Watch is used to listen for state variables. If your application needs watch for value changes of a state variable, you can decorate the variable with @Watch.</p> <p>NOTE</p> <p>Since API version 9, this decorator is supported in ArkTS widgets.</p>"},{"location":"application-development/basic-concepts/state-management/watch-decorator/#overview","title":"Overview","text":"<p>An application can request to be notified whenever the value of the @Watch decorated variable changes. The @Watch callback is called when the value change has occurred. @Watch uses strict equality (===) to determine whether a value is updated in the ArkUI framework. If false is returned, the @Watch callback is triggered.</p>"},{"location":"application-development/basic-concepts/state-management/watch-decorator/#restrictions","title":"Restrictions","text":"<ul> <li> <p>Pay attention to the risk of infinite loops. Loops can be caused by the @Watch callback directly or indirectly mutating the same variable. To avoid loops, avoid mutating the @Watch decorated state variable inside the callback handler.</p> </li> <li> <p>Pay attention to performance. The attribute value update function delays component re-render (see the preceding behavior description). The callback should only perform quick computations.</p> </li> <li> <p>Calling async await from an @Watch function is not recommended, because asynchronous behavior may cause performance issues of re-rendering.</p> </li> </ul>"},{"location":"application-development/basic-concepts/state-management/watch-decorator/#application-scenarios","title":"Application Scenarios","text":""},{"location":"application-development/basic-concepts/state-management/watch-decorator/#watch-and-custom-component-update","title":"@Watch and Custom Component Update","text":"<p>This example is used to clarify the processing steps of custom component updates and @Watch. count is decorated by @State in CountModifier and @Prop in TotalView.</p> <pre><code>@Component\nstruct TotalView {\n  @Prop @Watch('onCountUpdated') count: number = 0;\n  @State total: number = 0;\n  // @Watch callback\n  onCountUpdated(propName: string): void {\n    this.total += this.count;\n  }\n\n  build() {\n    Text(`Total: ${this.total}`)\n  }\n}\n\n@Entry\n@Component\nstruct CountModifier {\n  @State count: number = 0;\n\n  build() {\n    Column() {\n      Button('add to basket')\n        .onClick(() =&gt; {\n          this.count++\n        })\n      TotalView({ count: this.count })\n    }\n  }\n}\n</code></pre> <p>Processing steps:</p> <ol> <li> <p>The click event Button.onClick of the CountModifier custom component increases the value of count.</p> </li> <li> <p>In response to the change of the @State decorated variable count, @Prop in the child component TotalView is updated, and its @Watch('onCountUpdated') callback is triggered, which updates the total variable in TotalView.</p> </li> <li> <p>The Text component in the child component TotalView is re-rendered.</p> </li> </ol>"},{"location":"application-development/basic-concepts/state-management/watch-decorator/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to the ArkTS Watch Decorator</p>"},{"location":"application-development/basic-concepts/ui-development/","title":"ArkTS-based declarative UI development","text":"<p>To start UI development, we\u2019ll introduce fundamental layouts and components, along with practice examples.</p>"},{"location":"application-development/basic-concepts/ui-development/component/","title":"List and Grid Component","text":""},{"location":"application-development/basic-concepts/ui-development/component/#list-component","title":"List Component","text":"<p>In typical mobile applications, list is very common and basic component. For example, we can find list in settings page, contact book, and product catalogs.</p> <p>The List component supports the generation of child components in various rendering modes like conditional rendering and rendering of repeated content.</p>"},{"location":"application-development/basic-concepts/ui-development/component/#list-layout","title":"List Layout","text":"<p>A list automatically arranges child components in the direction it scrolls. Adding or removing child components from the list will trigger re-arrangement of the child components.</p> <p>As shown in the following figure, in a vertical list, ListItemGroup or ListItem components are automatically arranged vertically.</p> <p>ListItemGroup is used to display list data by group. Its child component is also ListItem. ListItem represents a list item, which can contain a single child component.</p> <p>Figure 1 Relationships between List, ListItemGroup, and ListItem </p> <p>NOTE</p> <p>A List component can contain only ListItemGroup or ListItem as its child components. ListItemGroup and ListItem must be used together with List.</p>"},{"location":"application-development/basic-concepts/ui-development/component/#display-data-in-list","title":"Display data in List","text":"<p>The list displays a collection of items horizontally or vertically and can scroll to reveal content off the screen. In the simplest case, a List component is statically made up of ListItem components.</p> <p>Figure 2 Example of a city list </p> <pre><code>@Entry\n@Component\nstruct CityList {\n  build() {\n    List() {\n      ListItem() {\n        Text('Beijing').fontSize(24)\n      }\n\n      ListItem() {\n        Text('Hangzhou').fontSize(24)\n      }\n\n      ListItem() {\n        Text('Shanghai').fontSize(24)\n      }\n    }\n    .backgroundColor('#FFF1F3F5')\n    .alignListItem(ListItemAlign.Center)\n  }\n}\n</code></pre> <p>Each \\ component can contain only one root child component. Therefore, it does not allow for child components in tile mode. If tile mode is required, encapsulate the child components into a container or create a custom component. <p>Figure 3 Example of a contacts list </p> <p>As shown above, as a list item, each contact has a profile picture and a name. To present it, you can encapsulate Image and Text components into a Row container.</p> <pre><code>List() {\n  ListItem() {\n    Row() {\n      Image($r('app.media.iconE'))\n        .width(40)\n        .height(40)\n        .margin(10)\n\n      Text ('Tom')\n        .fontSize(20)\n    }\n  }\n\n  ListItem() {\n    Row() {\n      Image($r('app.media.iconF'))\n        .width(40)\n        .height(40)\n        .margin(10)\n\n      Text ('Tracy')\n        .fontSize(20)\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/component/#iterating-list-content","title":"Iterating List Content","text":"<p>Compared with a static list, a dynamic list is more common in applications. You can use ForEach to obtain data from the data source and create components for each data item.</p> <p>For example, when creating a contacts list, you can store the contact name and profile picture data in a Contact class structure to the contacts array, and nest ListItems in ForEach, thereby reducing repeated code needed for tiling similar list items.</p> <pre><code>import util from '@ohos.util';\n\nclass Contact {\n  key: string = util.generateRandomUUID(true);\n  name: string;\n  icon: Resource;\n\n  constructor(name: string, icon: Resource) {\n    this.name = name;\n    this.icon = icon;\n  }\n}\n\n@Entry\n@Component\nstruct SimpleContacts {\n  private contacts: Array&lt;object&gt; = [\n    new Contact ('Tom', $r(\"app.media.icon_user1\")),\n    new Contact ('Tracy', $r(\"app.media.icon_user2\")),\n  ]\n\n  build() {\n    List() {\n      ForEach(this.contacts, (item: Contact) =&gt; {\n        ListItem() {\n          Row() {\n            Image(item.icon)\n              .width(40)\n              .height(40)\n              .margin(10)\n            Text(item.name).fontSize(20)\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.Start)\n        }\n      }, (item: Contact) =&gt; JSON.stringify(item))\n    }\n    .width('100%')\n  }\n}\n</code></pre> <p>You can get the icons used in above example here: icon_user1, icon_user2, download and put them into your project under the following path: <code>Your project</code> -&gt; <code>entry</code> -&gt; <code>src</code> -&gt; <code>main</code> -&gt; <code>resources</code> -&gt; <code>base</code> -&gt; <code>media</code>.</p> <p>The effect is drawing as follows:</p>"},{"location":"application-development/basic-concepts/ui-development/component/#customizing-the-list-style","title":"Customizing the List Style","text":""},{"location":"application-development/basic-concepts/ui-development/component/#setting-the-spacing","title":"Setting the Spacing","text":"<p>When initializing a list, you can use the space parameter to add spacing between list items. In the following example, a 10vp spacing is added between list items along the main axis:</p> <pre><code>List({ space: 10 }) {\n  // ...\n}\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/component/#adding-dividers","title":"Adding Dividers","text":"<p>A divider separates UI items to make them easier to identify. </p> <p>To add dividers between list items, you can use the divider attribute together with the following style attributes: strokeWidth and color: stroke width and color of the diver, respectively.</p> <p>startMargin and endMargin: distance between the divider and the start edge and end edge of the list, respectively.</p> <p>The following example draws a divider with a stroke thickness of 1 vp from a position 60 vp away from the start edge of the list to a position 10 vp away from the end edge of the list. </p> <p><pre><code>class DividerTmp {\n  strokeWidth: Length = 1\n  startMargin: Length = 60\n  endMargin: Length = 10\n  color: ResourceColor = '#ffe9f0f0'\n\n  constructor(strokeWidth: Length, startMargin: Length, endMargin: Length, color: ResourceColor) {\n    this.strokeWidth = strokeWidth\n    this.startMargin = startMargin\n    this.endMargin = endMargin\n    this.color = color\n  }\n}\n\n@Entry\n@Component\nstruct EgDivider {\n  @State egDivider: DividerTmp = new DividerTmp(1, 60, 10, '#ff0da2a2')\n  private numList: number[] = [0, 1, 2, 3, 4, 5]\n\n  build() {\n    List() {\n      ForEach(this.numList, (item: number) =&gt; {\n        ListItem() {\n          Row() {\n            Text(`${item}`)\n          }\n          .width('100%')\n          .justifyContent(FlexAlign.Center)\n        }\n      })\n    }\n    .divider(this.egDivider)\n  }\n}\n</code></pre> The effect is drawing as follows:</p> <p>Figure 4 Using dividers between the list items </p> <p>NOTE</p> <ol> <li> <p>The stroke width of the divider causes some space between list items. If the content spacing set for the list is smaller than the stroke width of the divider, the latter is used instead.</p> </li> <li> <p>When a list contains multiple columns, the startMargin and endMargin attributes of the divider apply to each column.</p> </li> <li> <p>The divider is drawn between list items. No divider is drawn above the first list item and below the last list item.</p> </li> </ol>"},{"location":"application-development/basic-concepts/ui-development/component/#adding-a-scrollbar","title":"Adding a Scrollbar","text":"<p>When the total height (width) of list items exceeds the screen height (width), the list can scroll vertically (horizontally). The scrollbar of a list enables users to quickly navigate the list content, as shown below.</p> <p>Figure 5 Scrollbar of a list</p> <p>When using the List component, you can use the scrollBar attribute to control the display of the list scrollbar. The value type of scrollBar is BarState. When the value is BarState.Auto, the scrollbar is displayed as required: It is displayed when the scrollbar area is touched and becomes thicker when being dragged; it automatically disappears after 2 seconds of inactivity.</p> <p>The default value of the scrollBar attribute is BarState.Off in API version 9 and earlier versions and BarState.Auto since API version 10. <pre><code>List() {\n  // ...\n}\n.scrollBar(BarState.Auto)\n</code></pre></p>"},{"location":"application-development/basic-concepts/ui-development/component/#grid-component","title":"Grid Component","text":"<p>The grid layout consists of cells formed by rows and columns. You can specify the cells where items are located to create various layouts. The grid layout excels at dividing a page into regions and defining the proportion of child components. It is a key adaptive layout and applies to scenarios such as photo gallery, calendar, and calculator.</p>"},{"location":"application-development/basic-concepts/ui-development/component/#grid-layout","title":"Grid Layout","text":"<p>Each item in the Grid container corresponds to a GridItem component, as shown below.</p> <p>Figure 1 Relationship between Grid and GridItem components</p> <p>NOTE</p> <p>The Grid component accepts only GridItem as its child.</p>"},{"location":"application-development/basic-concepts/ui-development/component/#display-data-in-grid","title":"Display data in Grid","text":"<p>The grid layout organizes its internal elements in two-dimensional layout mode, as shown in the following figure.</p> <p>Figure 2 General office services </p> <p>The Grid component can display a group of GridItem child components in two-dimensional layout mode.</p> <pre><code>Grid() {\n  GridItem() {\n    Text('Conference')\n      ...\n  }\n\n  GridItem() {\n    Text('Sign-in')\n      ...\n  }\n\n  GridItem() {\n    Text ('Vote')\n      ...\n  }\n\n  GridItem() {\n    Text ('Print')\n      ...\n  }\n}\n.rowsTemplate('1fr 1fr')\n.columnsTemplate('1fr 1fr')\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/component/#iterating-grid-content","title":"Iterating Grid Content","text":"<p>For multiple GridItem components with similar content structures, you are advised to nest them in ForEach statements to reduce repeated code. The effect is the same as above figure 2.</p> <pre><code>@Entry\n@Component\nstruct OfficeService {\n  @State services: Array&lt;string&gt; = ['Conference', 'Vote','Sign-in', 'Print']\n\n  build() {\n    Column() {\n      Grid() {\n        ForEach(this.services, (service:string) =&gt; {\n          GridItem() {\n            Text(service)\n          }\n        }, (service:string):string =&gt; service)\n      }\n      .rowsTemplate(('1fr 1fr') as string)\n      .columnsTemplate(('1fr 1fr') as string)\n    }\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/component/#setting-the-number-and-proportion-of-rows-and-columns","title":"Setting the Number and Proportion of Rows and Columns","text":"<p>You can set the number and proportion of rows and columns to determine the overall arrangement mode of the grid layout. To do so, use the rowsTemplate and columnsTemplate attributes of the Grid component.</p> <p>The values of rowsTemplate and columnsTemplate are a string consisting of 'number+fr' segments, separated by spaces. Wherein fr indicates the number of rows or columns in the grid layout, and the number in front of fr is used to calculate the proportion of the row or column in the grid width, thereby determining the width of the row or column.</p> <p>Figure 3 Example of the proportion of rows and columns</p> <p>The preceding figure shows a grid layout with three rows and three columns. The grid layout is divided into three parts in the vertical direction with each row taking up 1/3, and four parts in the horizontal direction with the first column taking up 1/4, the second column 2/4, and the third column 1/4.</p> <p>This layout can be implemented by setting rowsTemplate to '1fr 1fr 1fr' and columnsTemplate to '1fr 2fr 1fr'.</p> <pre><code>Grid() {\n  ...\n}\n.rowsTemplate('1fr 1fr 1fr')\n.columnsTemplate('1fr 2fr 1fr')\n</code></pre> <p>NOTE</p> <p>When rowsTemplate or columnsTemplate is set for the Grid component, its layoutDirection, maxCount, minCount, and cellLength attributes do not take effect.</p>"},{"location":"application-development/basic-concepts/ui-development/component/#additional-information","title":"Additional Information","text":"<p>For additional information please refer to Creating a List and Creating a Grid</p>"},{"location":"application-development/basic-concepts/ui-development/layout/","title":"Layout","text":"<p>The declarative UI provides different common layouts like Linear layout, Stack layout, Flex layout and etc.</p> <p>In this chapter we will focus on Linear Layout, for additional information please refer to layout overview documentation.</p> <p>Linear layout is the most frequently used layout in development, built with the Row and Column linear containers. The linear layout is the basis of other layouts. Its child elements are arranged in sequence linearly in the horizontal direction, as in a Row container, or vertical direction, as in a Column container.</p> <p>Figure 1 Child element arrangement in a Column container</p> <p>Figure 2 Child element arrangement in a Row container</p>"},{"location":"application-development/basic-concepts/ui-development/layout/#basic-concepts","title":"Basic Concepts","text":"<ul> <li> <p>Layout container: container component that is able to lay out other elements as its child elements. The layout container calculates the size of its child elements and arranges the layout.</p> </li> <li> <p>Layout child element: element inside the layout container.</p> </li> <li> <p>Main axis: axis along which child elements are laid out by default in the linear layout container. The main axis is horizontal for the  container and vertical for the  container. <li> <p>Cross axis: axis that runs perpendicular to the main axis. The cross axis is vertical for the  container and horizontal for the  container. <li> <p>Spacing: distance between child elements.</p> </li>"},{"location":"application-development/basic-concepts/ui-development/layout/#spacing-of-child-elements-in-arrangement-direction","title":"Spacing of Child Elements in Arrangement Direction","text":"<p>In the layout container, use the space attribute to equally space child elements in the arrangement direction.</p>"},{"location":"application-development/basic-concepts/ui-development/layout/#in-column-container","title":"In Column Container","text":"<p>Figure 3 Layout child element spacing in the arrangement direction in the Column container </p> <pre><code>Column({ space: 20 }) {\n  Text('space: 20').fontSize(15).fontColor(Color.Gray).width('90%')\n  Row().width('90%').height(50).backgroundColor(0xF5DEB3)\n  Row().width('90%').height(50).backgroundColor(0xD2B48C)\n  Row().width('90%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%')\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#in-row-container","title":"In Row Container","text":"<p>Figure 4 Layout child element spacing in the arrangement direction in the Row container </p> <pre><code>Row({ space: 35 }) {\n  Text('space: 35').fontSize(15).fontColor(Color.Gray)\n  Row().width('10%').height(150).backgroundColor(0xF5DEB3)\n  Row().width('10%').height(150).backgroundColor(0xD2B48C)\n  Row().width('10%').height(150).backgroundColor(0xF5DEB3)\n}.width('90%')\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#arrangement-of-child-elements-along-main-axis","title":"Arrangement of Child Elements Along Main Axis","text":"<p>In the layout container, you can use the justifyContent attribute to set the arrangement mode of child elements along the main axis. The arrangement may begin from the start point or end point of the main axis, or the space of the main axis can be evenly divided.</p>"},{"location":"application-development/basic-concepts/ui-development/layout/#in-column-container_1","title":"In Column Container","text":"<p>Figure 5 Vertical alignment of child elements in the Column container</p> <ul> <li>justifyContent(FlexAlign.Start): The items are vertically aligned with each other toward the start edge of the container.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.Start)\n</code></pre> <ul> <li>justifyContent(FlexAlign.Center): The elements are vertically aligned with each other toward the center of the container. The space between the first component and the start edge is the same as that between the last component and the end edge.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.Center)\n</code></pre> <ul> <li>justifyContent(FlexAlign.End): The elements are vertically aligned with each other toward the end edge of the container.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.End)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceBetween): The elements are evenly distributed vertically. The space between any two adjacent elements is the same. The first element is aligned with the start edge, the last element is aligned with the end edge, and the remaining elements are distributed so that the space between any two adjacent elements is the same.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceBetween)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceAround): The elements are evenly distributed vertically. The space between any two adjacent elements is the same. The space between the first element and start edge, and that between the last element and end edge are both half the size of the space between two adjacent elements.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceAround)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceEvenly): The elements are evenly distributed vertically. The space between the first element and start edge, the space between the last element and end edge, and the space between any two adjacent elements are the same.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').height(300).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceEvenly)\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#in-row-container_1","title":"In Row Container","text":"<p>Figure 6 Horizontal alignment of child elements in the Row container </p> <ul> <li>justifyContent(FlexAlign.Start): The items are horizontally aligned with each other toward the start edge of the container.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.Start)\n</code></pre> <ul> <li>justifyContent(FlexAlign.Center): The elements are horizontally aligned with each other toward the center of the container. The space between the first component and the start edge is the same as that between the last component and the end edge.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.Center)\n</code></pre> <ul> <li>justifyContent(FlexAlign.End): The elements are horizontally aligned with each other toward the end edge of the container.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.End)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceBetween): The elements are evenly distributed horizontally. The space between any two adjacent elements is the same. The first element is aligned with the start edge, the last element is aligned with the end edge, and the remaining elements are distributed so that the space between any two adjacent elements is the same.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceBetween)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceAround): The elements are evenly distributed horizontally. The space between any two adjacent elements is the same. The space between the first element and start edge, and that between the last element and end edge are both half the size of the space between two adjacent elements.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceAround)\n</code></pre> <ul> <li>justifyContent(FlexAlign.SpaceEvenly): The elements are evenly distributed horizontally. The space between the first element and start edge, the space between the last element and end edge, and the space between any two adjacent elements are the same.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).backgroundColor('rgb(242,242,242)').justifyContent(FlexAlign.SpaceEvenly)\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#alignment-of-child-elements-along-cross-axis","title":"Alignment of Child Elements Along Cross Axis","text":"<p>In the layout container, use the alignItems attribute to set the alignment mode of child elements along the cross axis. The alignment performance is consistent across screens of various sizes. The value is of the VerticalAlign enum type when the cross axis is in the vertical direction and the HorizontalAlign type when the cross axis is in the horizontal direction.</p> <p>The layout container also provides the alignSelf attribute to control the alignment mode of a single child element along the cross axis. This attribute has a higher priority than the alignItems attribute. This means that, if alignSelf is set, it will overwrite the alignItems setting on the corresponding child element.</p>"},{"location":"application-development/basic-concepts/ui-development/layout/#horizontal-alignment-of-child-elements-in-column-container","title":"Horizontal Alignment of Child Elements in Column Container","text":"<p>Figure 7 Horizontal alignment of child elements in the Column container </p> <ul> <li>HorizontalAlign.Start: Child elements are left aligned horizontally.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').alignItems(HorizontalAlign.Start).backgroundColor('rgb(242,242,242)')\n</code></pre> <ul> <li>HorizontalAlign.Center: Child elements are center-aligned horizontally.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').alignItems(HorizontalAlign.Center).backgroundColor('rgb(242,242,242)')\n</code></pre> <ul> <li>HorizontalAlign.End: Child elements are right-aligned horizontally.</li> </ul> <pre><code>Column({}) {\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('80%').height(50).backgroundColor(0xF5DEB3)\n}.width('100%').alignItems(HorizontalAlign.End).backgroundColor('rgb(242,242,242)')\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#vertical-alignment-of-child-elements-in-row-container","title":"Vertical Alignment of Child Elements in Row Container","text":"<p>Figure 8 Vertical alignment of child elements in Row container </p> <ul> <li>VerticalAlign.Top: Child elements are top-aligned vertically.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).alignItems(VerticalAlign.Top).backgroundColor('rgb(242,242,242)')\n</code></pre> <ul> <li>VerticalAlign.Center: Child elements are center-aligned vertically.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).alignItems(VerticalAlign.Center).backgroundColor('rgb(242,242,242)')\n</code></pre> <ul> <li>VerticalAlign.Bottom: Child elements are bottom-aligned vertically.</li> </ul> <pre><code>Row({}) {\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xD2B48C)\n\n  Column() {\n  }.width('20%').height(30).backgroundColor(0xF5DEB3)\n}.width('100%').height(200).alignItems(VerticalAlign.Bottom).backgroundColor('rgb(242,242,242)')\n</code></pre>"},{"location":"application-development/basic-concepts/ui-development/layout/#adaptive-stretching","title":"Adaptive Stretching","text":"<p>In linear layout, adaptive stretching is achieved by using the  component, which automatically fills the empty spaces in the container \u2013  or  \u2013 along the main axis. Just add the width and height as a percentage, and then adaptive scaling will take effect once the screen width and height change. <pre><code>@Entry\n@Component\nstruct BlankExample {\n  build() {\n    Column() {\n      Row() {\n        Text('Bluetooth').fontSize(18)\n        Blank()\n        Toggle({ type: ToggleType.Switch, isOn: true })\n      }.backgroundColor(0xFFFFFF).borderRadius(15).padding({ left: 12 }).width('100%')\n    }.backgroundColor(0xEFEFEF).padding(20).width('100%')\n  }\n}\n</code></pre> <p>Figure 9 Portrait mode </p> <p>Figure 10 Landscape mode </p>"},{"location":"application-development/basic-concepts/ui-development/layout/#adaptive-scaling","title":"Adaptive Scaling","text":"<p>Adaptive scaling means that the size of a child element is automatically adjusted according to a preset ratio to fit into the container across devices of various screen sizes. In linear layout, adaptive scaling can be achieved using either of the following methods:</p> <ul> <li>When the container size is determined, use layoutWeight to set the weight of a child element during layout. The container space is then allocated along the main axis among the element and sibling elements based on the set layout weight, ignoring the size settings of the elements themselves.</li> </ul> <pre><code>@Entry\n@Component\nstruct layoutWeightExample {\n  build() {\n    Column() {\n      Text('1:2:3').width('100%')\n      Row() {\n        Column() {\n          Text('layoutWeight(1)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(1).backgroundColor(0xF5DEB3).height('100%')\n\n        Column() {\n          Text('layoutWeight(2)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(2).backgroundColor(0xD2B48C).height('100%')\n\n        Column() {\n          Text('layoutWeight(3)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(3).backgroundColor(0xF5DEB3).height('100%')\n\n      }.backgroundColor(0xffd306).height('30%')\n\n      Text('2:5:3').width('100%')\n      Row() {\n        Column() {\n          Text('layoutWeight(2)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(2).backgroundColor(0xF5DEB3).height('100%')\n\n        Column() {\n          Text('layoutWeight(5)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(5).backgroundColor(0xD2B48C).height('100%')\n\n        Column() {\n          Text('layoutWeight(3)')\n            .textAlign(TextAlign.Center)\n        }.layoutWeight(3).backgroundColor(0xF5DEB3).height('100%')\n      }.backgroundColor(0xffd306).height('30%')\n    }\n  }\n}\n</code></pre> <p>Figure 11 Landscape mode </p> <p>Figure 12 Portrait mode </p> <ul> <li>When the container size is determined, set the width of a child element in percentage. The container space is then allocated among the element and sibling elements based on the set percentage.</li> </ul> <pre><code>@Entry\n@Component\nstruct WidthExample {\n  build() {\n    Column() {\n      Row() {\n        Column() {\n          Text('left width 20%')\n            .textAlign(TextAlign.Center)\n        }.width('20%').backgroundColor(0xF5DEB3).height('100%')\n\n        Column() {\n          Text('center width 50%')\n            .textAlign(TextAlign.Center)\n        }.width('50%').backgroundColor(0xD2B48C).height('100%')\n\n        Column() {\n          Text('right width 30%')\n            .textAlign(TextAlign.Center)\n        }.width('30%').backgroundColor(0xF5DEB3).height('100%')\n      }.backgroundColor(0xffd306).height('30%')\n    }\n  }\n}\n</code></pre> <p>Figure 13 Landscape mode </p> <p>Figure 14 Portrait mode </p>"},{"location":"application-development/basic-concepts/ui-development/layout/#reference","title":"Reference","text":"<p>For additional information please refer to Linear Layout</p>"},{"location":"application-development/basic-concepts/uiability/","title":"UIAbility","text":"<p>UIAbility is a type of application component that provides the UI for user interactions. The UIAbility module provides lifecycle callbacks such as component creation, destruction, and foreground/background switching. </p> <p>UIAbility is the basic unit of scheduling in OpenHarmony and provides a window for applications to draw the UI. An application can contain one or more UIAbility components. For example, for a payment application, you can use separate UIAbility components to carry the entry and payment functionalities.</p> <p>Each UIAbility component instance is displayed as a mission in the system application Recents.</p> <p>You can develop a single UIAbility or multiple UIAbilities for your application based on service requirements.</p> <ul> <li> <p>If you want your application to be displayed as one mission in Recents, use one UIAbility and multiple pages.</p> </li> <li> <p>If you want your application to be displayed as multiple missions in Recents or multiple windows to be opened simultaneously, use multiple UIAbilities.</p> </li> </ul> <p>Portions of this documentation are adapted from OpenHarmony Documentation by OpenHarmony community, licensed under CC BY 4.0.</p>"},{"location":"application-development/basic-concepts/uiability/uiability-launch-type/","title":"UIAbility Launch Type","text":"<p>The launch type of the UIAbility component refers to the state of the UIAbility instance at startup. Three launch types are available:</p> <ul> <li> <p>Singleton</p> </li> <li> <p>Multiton</p> </li> <li> <p>Specified</p> </li> </ul> <p>In this tutorial, we are focusing on <code>Singleton</code> and <code>Multiton</code>.</p>"},{"location":"application-development/basic-concepts/uiability/uiability-launch-type/#singleton","title":"Singleton","text":"<p>singleton is the default launch type.</p> <p>Each time startAbility() is called, if a UIAbility instance of this type already exists in the application process, the instance is reused. In other words, UIAbility of this type can have only one instance in the system, meaning that only one mission is displayed in the system application Recents.</p> <p>Figure 1 Demonstration effect in singleton mode</p> <p>To use the singleton mode, set launchType in the <code>module.json5</code> file to singleton.</p> <pre><code>{\n  \"module\": {\n    ...\n    \"abilities\": [\n      {\n        \"launchType\": \"singleton\",\n        ...\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/uiability/uiability-launch-type/#multiton","title":"Multiton","text":"<p>In multiton mode, each time startAbility() is called, a new UIAbility instance is created in the application process. Multiple missions are displayed for UIAbility of this type in Recents.  </p> <p>Figure 2 Demonstration effect in multiton mode</p> <p>To use the multiton mode, set launchType in the <code>module.json5</code> file to multiton.</p> <pre><code>{\n  \"module\": {\n    ...\n    \"abilities\": [\n      {\n        \"launchType\": \"multiton\",\n        ...\n      }\n    ]\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/uiability/uiability-launch-type/#specified","title":"Specified","text":"<p>The specified mode is used in some special scenarios. For example, in a document application, you may want a document instance to be created each time you create a document, and you may also want to use the same document instance when you open an existing document.</p> <p>Figure 3 Demonstration effect in specified mode</p> <p>In the following example, there are two UIAbility components: EntryAbility and SpecifiedAbility (with the launch type specified). </p> <p>You can learn more about <code>Specified</code> from this source.</p>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/","title":"UIAbility Lifecycle","text":""},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#overview","title":"Overview","text":"<p>When a user opens or switches to and from an application, the UIAbility instances in the application transit in their different states. The UIAbility class provides a series of callbacks. Through these callbacks, you can know the state changes of the UIAbility instance.</p> <p>The lifecycle of UIAbility has the following states: Create, Foreground, Background, Destroy, onWindowStageCrate and onWindowStageDestory as shown in the figure below.</p> <p>Figure 1 UIAbility lifecycle states</p>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#description-of-lifecycle-states","title":"Description of Lifecycle States","text":"<p>Note:</p> <p>If you want to check the sample code below, because of limited functionailities of Previewer, you need to use real device instead.  Before proceeding, make sure you finished reading Running the Application on a real Device tutorial.</p>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#create","title":"Create","text":"<p>The Create state is triggered when the UIAbility instance is created during application loading. It corresponds to the onCreate() callback. In this callback, you can perform page initialization operations. For example, defining variables or loading resources.</p> <pre><code>import type AbilityConstant from '@ohos.app.ability.AbilityConstant';\nimport UIAbility from '@ohos.app.ability.UIAbility';\nimport type Want from '@ohos.app.ability.Want';\n\nexport default class EntryAbility extends UIAbility {\n  onCreate(want: Want, launchParam: AbilityConstant.LaunchParam): void {\n    // Initialize the page.\n  }\n  // ...\n}\n</code></pre>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#windowstagecreate","title":"WindowStageCreate","text":"<p>After the UIAbility instance is created but before it enters the Foreground state, the system creates a WindowStage instance and triggers the onWindowStageCreate() callback. You can set UI loading and WindowStage event subscription in the callback.</p> <p>In the onWindowStageCreate() callback, use <code>loadContent()</code> to set the page to be loaded, and call <code>on('windowStageEvent')</code> to subscribe to <code>WindowStage events</code> like having or losing focus, or becoming visible or invisible.</p> <pre><code>import UIAbility from '@ohos.app.ability.UIAbility';\nimport window from '@ohos.window';\n\nexport default class EntryAbility extends UIAbility {\n  // ...\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    // Subscribe to the WindowStage events (having or losing focus, or becoming visible or invisible).\n    try {\n      windowStage.on('windowStageEvent', (data) =&gt; {\n        let stageEventType: window.WindowStageEventType = data;\n        switch (stageEventType) {\n          case window.WindowStageEventType.SHOWN: // Switch to the foreground.\n            console.info('windowStage foreground.');\n            break;\n          case window.WindowStageEventType.ACTIVE: // Gain focus.\n            console.info('windowStage active.');\n            break;\n          case window.WindowStageEventType.INACTIVE: // Lose focus.\n            console.info('windowStage inactive.');\n            break;\n          case window.WindowStageEventType.HIDDEN: // Switch to the background.\n            console.info('windowStage background.');\n            break;\n          default:\n            break;\n        }\n      });\n    } catch (exception) {\n      console.error('Failed to enable the listener for window stage event changes. Cause:' + JSON.stringify(exception));\n    }\n    // Set the page to be loaded.\n    windowStage.loadContent('pages/Index', (err, data) =&gt; {\n      // ...\n    });\n  }\n}\n</code></pre> <p>The effect is as follows:</p>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#foreground-and-background","title":"Foreground and Background","text":"<p>The Foreground and Background states are triggered when the UIAbility instance is switched to the foreground and background, respectively. They correspond to the onForeground() and onBackground() callbacks.</p> <p>The onForeground() callback is triggered when the UI of the UIAbility instance is about to become visible, for example, when the UIAbility instance is about to enter the foreground. In this callback, you can apply for resources required by the system or re-apply for resources that have been released in the onBackground() callback.</p> <p>The onBackground() callback is triggered when the UI of the UIAbility instance is about to become invisible, for example, when the UIAbility instance is about to enter the background. In this callback, you can release unused resources or perform time-consuming operations such as saving the status.</p> <p>For example, there is an application that requires location access and has obtained the location permission from the user. Before the UI is displayed, you can enable location in the onForeground() callback to obtain the location information.</p> <p>When the application is switched to the background, you can disable location in the onBackground() callback to reduce system resource consumption.</p> <pre><code>import UIAbility from '@ohos.app.ability.UIAbility';\n\nexport default class EntryAbility extends UIAbility {\n  // ...\n\n  onForeground(): void {\n    // Apply for the resources required by the system or re-apply for the resources released in onBackground().\n  }\n\n  onBackground(): void {\n    // Release unused resources when the UI is invisible, or perform time-consuming operations in this callback,\n    // for example, saving the status.\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#windowstagedestroy","title":"WindowStageDestroy","text":"<p>Before the UIAbility instance is destroyed, the onWindowStageDestroy() callback is invoked to release UI resources.</p> <pre><code>import UIAbility from '@ohos.app.ability.UIAbility';\nimport window from '@ohos.window';\n\nexport default class EntryAbility extends UIAbility {\n  windowStage: window.WindowStage | undefined = undefined;\n  // ...\n  onWindowStageCreate(windowStage: window.WindowStage): void {\n    this.windowStage = windowStage;\n    // ...\n  }\n  onWindowStageDestroy() {\n    // Release UI resources.\n  }\n}\n</code></pre>"},{"location":"application-development/basic-concepts/uiability/uiability-lifecycle/#destroy","title":"Destroy","text":"<p>The Destroy state is triggered when the UIAbility instance is destroyed. You can perform operations such as releasing system resources and saving data in the onDestroy() callback.</p> <pre><code>import UIAbility from '@ohos.app.ability.UIAbility';\n\nexport default class EntryAbility extends UIAbility {\n  // ...\n\n  onDestroy() {\n    // Release system resources and save data.\n  }\n}\n</code></pre>"},{"location":"application-development/codeLabs/","title":"Code Labs","text":"<p>Due to the current limitations of DevEco Studio for OpenHarmony, only a limited number of application sample demos are available. </p> <p>Available application samples for OpenHarmony with DevEco Studio 4.1(API 9/API 11):</p> <ul> <li>Guess Number </li> <li>Time Around World </li> <li>Super Bright Flashlight </li> <li>Bmicalculator </li> <li>Workout Logbook </li> <li>Quote Of The Day </li> <li>Water Tracker </li> <li>Magic8Ball </li> <li>Throw The Dice </li> </ul> <p>The following apps are recommended to use real device, if you are not familar with runing application on real device, follow the instruction Running Application on Real Device</p> <p>If you have any problem when building the application, check Common Problems </p> <ul> <li>Discord </li> <li>Gmail </li> <li>Youtube </li> <li>PlayScout </li> <li>Unit Converter </li> <li>Pokemon List </li> <li>Pinwheel </li> <li>MyList </li> <li>Duolingo </li> <li>MyMeteo </li> <li>OniroNews </li> <li>OniroGPT(This app you need to get your own token)  </li> </ul>"},{"location":"application-development/codeLabs/#common-problems","title":"Common Problems","text":""},{"location":"application-development/codeLabs/#install-failed-due-to-grant-request-permissions-failed","title":"install failed due to grant request permissions failed","text":"<p>We need to change application permission level Solution: 1. Open the directory where the OpenHarmony SDK is located (you can view it by clicking Tools &gt; SDK Manager &gt; OpenHarmony SDK in the DevEco Studio menu bar). </p> <ol> <li> <p>Navigate to the Toolchains &gt; {Version} &gt; lib folder under the SDK directory, and open the <code>UnsignedReleasedProfileTemplate.json</code> file. </p> </li> <li> <p>Change the parameter in <code>bundle-info</code> as following:</p> </li> </ol> <pre><code>    \"bundle-info\":{\n    ...\n        \"apl\":\"system_core\",\n        \"app-feature\":\"hos_system_app\"\n    },\n</code></pre> <p>Note: If switching the system permissions does not work, try regenerating the automatic signature files.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/","title":"Overview","text":""},{"location":"application-development/create-first-eclipse-oniro-app/#before-you-begin","title":"Before You Begin","text":"<p>Make sure you have gone through the Environment Setup Guide.  </p> <p>In this tutorial, you will create your first Eclipse Oniro application using the <code>OpenHarmony</code> template provided by <code>DevEco Studio</code>. </p>"},{"location":"application-development/create-first-eclipse-oniro-app/#prerequisites","title":"Prerequisites","text":"<ul> <li>The latest available version of DevEco Studio installed on your system.</li> </ul>"},{"location":"application-development/create-first-eclipse-oniro-app/#what-you-will-learn","title":"What You Will Learn","text":"<ul> <li> <p>Set Up DevEco Studio: Install and configure the necessary environment for application development. </p> </li> <li> <p>Create a New Project: Use the <code>[OpenHarmony] Empty Ability</code> template to initialize a project. </p> </li> <li> <p>Explore the Project Structure: Navigate different views, such as Ohos and Project Files, to locate and manage files. </p> </li> <li> <p>Use the Previewer: Learn how to preview UI updates in real time, switch devices, rotate screens, and inspect components. </p> </li> <li> <p>Build UI Components: Add Text and Button components to display messages and handle user interactions. </p> </li> <li> <p>Implement Page Navigation: Use the router module to enable redirection between pages with transition effects. </p> </li> <li> <p>Deploy on a Real Device: Install HDC, configure device settings, and run the application on a physical HiHope HH-SCDAYU200 Development Kit. </p> </li> </ul>"},{"location":"application-development/create-first-eclipse-oniro-app/#what-you-will-build","title":"What You Will Build","text":"<ul> <li>An application with two pages that support mutual navigation.</li> </ul>"},{"location":"application-development/create-first-eclipse-oniro-app/build-first-page/","title":"Build the First Page","text":"<p>\u200bNow that you're familiar with DevEco Studio, let's create a simple application that demonstrates page navigation.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/build-first-page/#use-the-text-component","title":"Use the <code>Text</code> Component","text":"<p>\u200bAfter the project synchronization completes, navigate to <code>entry &gt; ets &gt; pages</code> in the Ohos window and open the <code>Index.ets</code> file. This file contains a Text component. The sample code in the <code>Index.ets</code> file is shown below:\u200b <pre><code>// Index.ets\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n</code></pre></p>"},{"location":"application-development/create-first-eclipse-oniro-app/build-first-page/#add-a-button-component","title":"Add a <code>Button</code> Component","text":"<p>On the <code>Index</code> page, add a Button component to handle user clicks and navigate to another page. The following sample code in <code>Index.ets</code> demonstrates this implementation:</p> <p><pre><code>// Index.ets\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        // Add a button to respond to user clicks.\n        Button() {\n          Text('Next')\n            .fontSize(30)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('40%')\n        .height('5%')\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n</code></pre> Now you can observe how the first page looks like in the <code>Previewer</code></p>"},{"location":"application-development/create-first-eclipse-oniro-app/build-second-page/","title":"Build the Second Page","text":""},{"location":"application-development/create-first-eclipse-oniro-app/build-second-page/#create-the-second-page","title":"Create the Second Page","text":"<ol> <li>Right click <code>entry &gt; ets &gt; pages</code> folder, select <code>New</code> and choose <code>Page</code>.</li> </ol> <ol> <li>Type 'SecondPage' as the new Page name. </li> </ol> <p>SecondPage created.</p> <p>Navigate to <code>entry &gt; resources &gt; base &gt; profile</code>, open <code>main_pages.json</code> you will find the page routes was configured automatically. <pre><code>// main_pages.json\n{\n  \"src\": [\n    \"pages/Index\",\n    \"pages/SecondPage\"\n  ]\n}\n</code></pre></p> <p>Note: If you create the page in other methods, you have to manually configure the page routes in above path.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/build-second-page/#add-text-and-button-components","title":"Add <code>Text</code> and <code>Button</code> Components","text":"<p>Add Text and Button components with styled properties, using the first page as a reference. The sample code in <code>Second.ets</code> is shown below: <pre><code>// SecondPage.ets\n@Entry\n@Component\nstruct SecondPage {\n  @State message: string = 'Second Page';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Button() {\n          Text('Back')\n            .fontSize(25)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('40%')\n        .height('5%')\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n</code></pre> You can observe how the second page looks like in the <code>Previewer</code></p>"},{"location":"application-development/create-first-eclipse-oniro-app/create-template/","title":"Create an Eclipse Oniro app using OpenHarmony Template","text":"<p>To create a project in DevEco Studio:</p> <ol> <li>Double-click the DevEco Studio icon to begin.</li> </ol> <ol> <li>In welcome page click <code>Create Project</code>.</li> </ol> <p>The Create Project window opens with template market provided by DevEco Studio.</p> <p>In DevEco Studio, a project template serves as a blueprint for building specific types of apps. It defines the project structure and essential files, providing starter code to help you get started quickly.</p> <ol> <li>Make sure the <code>Application</code> tab is selected on the left bar, then choose <code>[OpenHarmony]Empty Ability</code> as project template and click <code>Next</code>.</li> </ol> <ol> <li> <p>Configure your project with following information:  </p> </li> <li> <p>The Project name field is used to enter the name of your project.</p> </li> <li> <p>The Bundle name field represents the package name, which also serves as the default application ID. Keep it as default to maintain the file organization.</p> </li> <li> <p>The Save location field specifies where all project files are stored, you can leave it as default.  </p> </li> <li> <p>The Compile SDK specifies the API version used for compilation. By default, API 11 is selected in our case, which also sets ArkTS as the development language.  </p> </li> <li> <p>Select Stage for Model and keep the default values for all other parameters.</p> </li> </ol> <p>Note:  If you plan to use JavaScript, select API 8 instead. This will provide a language option where you can choose JS.</p> <ol> <li>Click <code>Finish</code> and wait for the project creation.</li> </ol> <ol> <li>Click Previewer on the right sidebar of DevEco Studio to view both the code and design simultaneously.</li> </ol> <ul> <li>Project View(Part 1): Displays all files and folders in your project.  </li> <li>Code View(Part 2): The workspace for editing code.  </li> <li>Design View(Part 3): Allows you to preview your app\u2019s design.</li> </ul>"},{"location":"application-development/create-first-eclipse-oniro-app/find-project-files/","title":"Find Project Files","text":"<ol> <li>In DevEco Studio, take a look at the Project tab. The Project tab shows the actual file directory structure of the project as well as all project items and their dependencies (including SDKs and libraries)  </li> </ol> <ol> <li>Select Project Files from the drop-down menu. You can browse all the files in the project content root directory, but does not display external libraries and frameworks.</li> </ol> <ol> <li>If necessary, select Open Files to quickly jump between recently viewed files.</li> </ol> <ol> <li>Select Ohos from the drop-down menu. This optimized view clearly presents essential files required for development, making it easier for developers to quickly locate core code and resources related to application development.</li> </ol> <p>For our application development, the Ohos view is usually the best choice, we will use Ohos tab in this course.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/page-redirect/","title":"Implementing Page Redirection","text":"<p>You can achieve page navigation using the page router, which locates the target page based on its URL. To implement this, first import the router module and follow the steps below.  </p> <p>To deliver better transition effects, use Navigation(Recommended).  </p>"},{"location":"application-development/create-first-eclipse-oniro-app/page-redirect/#redirection-from-the-first-page-to-the-second-page","title":"Redirection from the first page to the second page","text":"<p>In the <code>Index.ets</code> file of the first page, bind the onClick event to the Next button, allowing users to navigate to the second page when clicked. The sample code in <code>Index.ets</code> is shown below:</p> <p><pre><code>// Index.ets\n// Import the router module.\nimport router from '@ohos.router';\nimport { BusinessError } from '@ohos.base';\n\n@Entry\n@Component\nstruct Index {\n  @State message: string = 'Hello World';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        // Add a button to respond to user clicks.\n        Button() {\n          Text('Next')\n            .fontSize(30)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('40%')\n        .height('5%')\n        // Bind the onClick event to the Next button so that clicking the button redirects the user to the second page.\n        .onClick(() =&gt; {\n          console.info(`Succeeded in clicking the 'Next' button.`)\n          // Go to the second page.\n          router.pushUrl({ url: 'pages/SecondPage' }).then(() =&gt; {\n            console.info('Succeeded in jumping to the second page.')\n          }).catch((err: BusinessError) =&gt; {\n            console.error(`Failed to jump to the second page.Code is ${err.code}, message is ${err.message}`)\n          })\n        })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n</code></pre> Click the <code>Next</code> button now and page will redirect to the <code>SecondPage</code>. You can also observe the printed information in console as well.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/page-redirect/#redirection-from-the-second-page-to-the-first-page","title":"Redirection from the second page to the first page","text":"<p>In the <code>SecondPage.ets</code> file of the second page, bind the onClick event to the Back button, enabling users to navigate back to the first page when clicked. The sample code in <code>SecondPage.ets</code> is shown below: <pre><code>// SecondPage.ets\n// Import the router module.\nimport router from '@ohos.router';\nimport { BusinessError } from '@ohos.base';\n\n@Entry\n@Component\nstruct SecondPage {\n  @State message: string = 'Hi there';\n\n  build() {\n    Row() {\n      Column() {\n        Text(this.message)\n          .fontSize(50)\n          .fontWeight(FontWeight.Bold)\n        Button() {\n          Text('Back')\n            .fontSize(25)\n            .fontWeight(FontWeight.Bold)\n        }\n        .type(ButtonType.Capsule)\n        .margin({\n          top: 20\n        })\n        .backgroundColor('#0D9FFB')\n        .width('40%')\n        .height('5%')\n        // Bind the onClick event to the Back button so that clicking the button redirects the user back to the first page.\n        .onClick(() =&gt; {\n          console.info(`Succeeded in clicking the 'Back' button.`)\n          try {\n            // Return to the first page.\n            router.back()\n            console.info('Succeeded in returning to the first page.')\n          } catch (err) {\n            let code = (err as BusinessError).code;\n            let message = (err as BusinessError).message;\n            console.error(`Failed to return to the first page.Code is ${code}, message is ${message}`)\n          }\n        })\n      }\n      .width('100%')\n    }\n    .height('100%')\n  }\n}\n</code></pre> Click the <code>Back</code> button on the page or the triangle icon on the Previewer, the page will redirect back to the <code>Index</code>. You can also observe the printed information in console as well.</p>"},{"location":"application-development/create-first-eclipse-oniro-app/run-real-device/","title":"Running the Application on a Real Device","text":""},{"location":"application-development/create-first-eclipse-oniro-app/run-real-device/#install-hdc","title":"Install HDC","text":"<ol> <li>Find the pipeline whose name is ohos-sdk-full or ohos-sdk-public, click Download Link, and select Full Package.</li> </ol> <p>Note: You can skip this part if you followed the procedure from Environment Setup and Configuration tutorial. </p> <p>Use conditional filtering, such as selecting the project as openharmony, selecting the target branch OpenHarmony-4.1-Release, selecting a date from the previous month, or manually choosing a range.  </p> <p>In the daily build or rolling build, find ohos-sdk-full_4.1-Release, and click on the download link to choose and download the full package, which includes Full-SDK for Windows and Linux.  (If daily build SDK is not compatible with your version of DevEco Studio, try to use rolling build SDK instead) </p> <ol> <li>Under <code>toolchain</code> folder, find <code>hdc.exe</code> and <code>libusb_shared.ddl</code>.</li> </ol> <ol> <li>Create a folder called <code>hdc_bin</code>, you can create it wherever you like and put <code>hdc.exe</code> and <code>libusb_shared</code> into that folder.</li> </ol> <ol> <li>Add Environment Variable</li> <li>Open <code>Settings</code> on Windows system, type <code>environment</code> to search <code>Edit the system environment variables</code> and click it.</li> </ol> <ul> <li>Make sure the <code>System Properties</code> window is under <code>Advanced</code> tab, click <code>Environment Variables...</code></li> </ul> <ul> <li>Double click <code>Path</code> in <code>System variables</code> area. Click <code>New</code> on new pop-up window and paste your <code>hdc_bin</code> folder path. After that, click <code>OK</code> for all windows. </li> </ul> <ul> <li>Check whether the HDC is running properly You can open your <code>Command prompt</code> and type <code>hdc</code> to check.</li> </ul>"},{"location":"application-development/create-first-eclipse-oniro-app/run-real-device/#use-real-machine-to-run-application-with-usb","title":"Use real machine to run application with USB","text":"<ol> <li>Connect the development board(Here I used <code>HiHope HH-SCDAYU200 Development Kit</code>) running the OpenHarmony standard system to the computer and you can find the running device on the top part of the IDE.</li> </ol> <ol> <li>Generate signature. </li> <li>Click <code>Project Structure...</code> icon on the top-right corner of the IDE, Choose <code>Project &gt; Signing Configs</code> and select <code>Automatically generate signature</code>. </li> <li>Click <code>Apply</code> and wait until the automatic signing is complete.</li> </ol> <ul> <li>You can find signed signature in <code>configuration</code> folder and open <code>build-profile.json5</code> file.</li> </ul> <ol> <li>Click <code>Run 'entry'</code> triangle button.</li> </ol> <ol> <li>You can observe the application running on the board.</li> </ol> <p>You learned about DevEco Studio and built your first Eclipse Oniro Application, congratulations!</p>"},{"location":"application-development/create-first-eclipse-oniro-app/use-previewer/","title":"Usage of Previewer","text":"<p>To preview the UI display effect of a file in real-time using DevEco Studio's Previewer, click on the Previewer tab located on the right side of the DevEco Studio interface.  During UI code development, if you add or remove UI components, simply save your changes by pressing Ctrl+S or click Reload. The Previewer will then immediately refresh to reflect the updated UI.</p> <p>Note: For .ets file, Previewer only works with components which decorated with @Entry or @Preview decorator.</p> <p></p> <p>DevEco Studio's Previewer offers several essential features to enhance the UI development experience:</p> <ul> <li>Screen Rotation: You can switch between portrait and landscape orientations by clicking the Orientation button within the Previewer. </li> </ul> <p></p> <ul> <li>Device Switching: The Previewer allows you to switch between different device profiles to see how your application appears on various devices. </li> </ul> <p></p> <ul> <li>Multi-Device Preview: By enabling the multi-device preview feature, you can simultaneously view your application's UI across multiple devices.</li> </ul> <p></p> <ul> <li>Code Inspection: \u200bDevEco Studio's Inspector feature enables bidirectional interaction between the <code>code editor</code>, <code>UI preview</code>, and <code>component tree</code>.  </li> </ul> <p></p> <p>These features collectively provide a comprehensive environment to visualize and fine-tune your application's user interface across different devices and orientations.</p>"},{"location":"application-development/environment-setup-config/","title":"Environment Setup Guide","text":"<p>This guide aims to help developer set up their own development environment.</p>"},{"location":"application-development/environment-setup-config/common-issue/","title":"Common Issues and Solutions","text":""},{"location":"application-development/environment-setup-config/common-issue/#cannot-find-the-emulator-of-a-phone-device","title":"Cannot find the emulator of a phone device","text":"<p>entry&gt;src&gt;main&gt;module.json5 is the configuration file for the module, check deviceType, add 'phone' if it is missing.</p> <p> </p>"},{"location":"application-development/environment-setup-config/common-issue/#unable-to-find-bms-service-when-running-on-emulator","title":"Unable to find BMS Service when running on Emulator","text":"<p>Just wait for an extended period, or try clearing data of this device or creating a new device.</p>"},{"location":"application-development/environment-setup-config/common-issue/#unstable-usb-connection-dev-board-not-detected-by-ide","title":"Unstable USB connection, dev board not detected by IDE","text":"<p>solution worked for me:  </p> <p>Change USB Power Management Settings</p> <ol> <li>Search for and open Device Manager.  </li> <li>Click to expand Universal Serial Bus Controllers.  </li> <li>Right-click on USB Root Hub and select Properties.  </li> <li>Uncheck Power Management and click OK.</li> </ol>"},{"location":"application-development/environment-setup-config/common-issue/#compilesdkversion-and-releasetype-of-the-app-do-not-match-the-apiversion-and-releasetype-on-the-device","title":"compileSdkVersion and releaseType of the app do not match the apiVersion and releaseType on the device","text":"<p>Reason: The compiled SDK version is higher than the actual device.</p> <p>Solution: Step 1: Modify build_profile.json5 under entry and set apiType to faMode. Step 2: Modify build_profile.json5 under the project, change the compiled version to a lower version. Run again, and the problem will be resolved. </p>"},{"location":"application-development/environment-setup-config/common-issue/#install-failed","title":"Install Failed","text":"<p>Have the device connected and detected by IDE, click on \u201crun\u201d, the IDE gives the error messages:  \"Install Failed : failed to install bundle. code: 9568289, error: install failed due to grant request permissions failed.\"  </p> <p></p> <p>It should be a permission issue, and now we need to identify the permissions causing the problem.   </p> <p>This documentation lists all permissions and their levels in OpenHarmony. </p> <p>There are three types of permissions used in OpenHarmony for requests, ordered from low to high: normal, system_basic, system_core.</p> <p>If the permission level is set to \"availableLevel\": \"system_basic\", then you need to configure the acls field in the UnsignedReleasedProfileTemplate.json file and include the required high-level permissions in acls. The specific steps are as follows:</p> <p>set the\"profile\" with p7b file generated from java -c commands in build-profile.json5  </p> <p></p>"},{"location":"application-development/environment-setup-config/developer-account/","title":"Developer Account","text":"<p>Note: For application development, a developer account is not necessary. </p> <p>Introduction of Register and Identify Verification: HUAWEI ID Registration and Verification | HUAWEI Developers</p> <p>In simple terms, anyone can register for an individual developer account, whether they choose to verify their identity or not.  However, it's said that certain permissions require an identity verification with the identity document. </p> <p>According to information from the Huawei developer forum, verified developers gain access to more development resources, training materials, and market promotion. Moreover, only verified developers are allowed to publish applications.</p> <p>Enterprise developers receive a broader range of services compared to individual developers. Here's a breakdown:</p> <ul> <li> <p>Individual Developers: App Market, Themes, Product Management, Account, PUSH, New Game Pre-order, Interactive Comments, Social, HUAWEI HiAI, Watch App Market, etc.  </p> </li> <li> <p>Enterprise Developers: App Market, Themes, Initial Release, Payment, Game Packages, App Market Promotion, Product Management, Games, Account, PUSH, New Game Pre-order, Interactive Comments, Social, HUAWEI HiAI, Watch App Market, Sports &amp; Health, Cloud Testing, Smart Home, etc.</p> </li> </ul>"},{"location":"application-development/environment-setup-config/env-config/","title":"Environment Configuration","text":"<p>Run <code>DevEco Studio</code> for the first time, configuation setting pages will appear. </p> <p>Select <code>Do not import settings</code> </p> <p>On <code>Basic Setup</code> page, select install for Node.js and Ohpm.  Click Next to proceed to the SDK configuration page, and then set the SDK path to an appropriate location.  Accept the License Agreement  Check the summary information and go next   Environment configuration is finished.  </p> <p>Note: If you want to run application for OpenHarmony, you need to install revelent APIs as well. You can download public SDK from <code>DevEco Studio</code>-&gt;<code>Tool</code>-&gt;<code>SDK Manager</code>-&gt;<code>OpenHarmony</code>, select API and click <code>Apply</code> to download. (If you downloaded DevEco Studio version is 4.1, choose API Version 11 for development.)  </p>"},{"location":"application-development/environment-setup-config/full-public-sdk/","title":"Full SDK &amp; Public SDK","text":"<p>There are two types of SDKs:</p> <ul> <li>Public-SDK: A toolkit provided for application development. It is available to download with DevEco Studio and does not include high-permission APIs required for system applications.  </li> <li>Full-SDK: A toolkit provided for OEM manufacturers to develop applications. It cannot be downloaded with DevEco Studio and includes high-permission APIs required for system applications.</li> </ul>"},{"location":"application-development/environment-setup-config/full-public-sdk/#how-to-get-the-full-sdk","title":"How to get the Full SDK?","text":""},{"location":"application-development/environment-setup-config/full-public-sdk/#approach-1-from-cicd-pipeline-recommended","title":"Approach 1: From CICD pipeline (Recommended)","text":""},{"location":"application-development/environment-setup-config/full-public-sdk/#get-the-full-sdk","title":"Get the Full SDK","text":"<ol> <li>Obtain the latest OpenHarmony SDK from the OpenHarmony daily build pipeline Daily Build - OpenHarmony CI. The daily build pipeline builds system images, SDKs, etc.  </li> </ol> <p>Use conditional filtering, such as selecting the project as openharmony, selecting the target branch OpenHarmony-4.1-Release, selecting a date from the previous month, or manually choosing a range.  </p> <p>In the daily build or rolling build, find ohos-sdk-full_4.1-Release, and click on the download link to choose and download the full package, which includes Full-SDK for Windows and Linux.  (If daily build SDK is not compatible with your version of DevEco Studio, try to use rolling build SDK instead).  </p> <p>Note: While this guide uses the <code>4.1-Release</code> version as an example, more recent SDK versions, such as <code>5.0.0-Release</code> with API version 12, are also available. Make sure to select the version that matches your requirements.</p> <p> </p> pipeline description remark ohos-sdk-public The public SDK is available for Linux and Windows platforms It is provided for application developers and does not include system interfaces that require system permissions mac-sdk-public The public SDK for macOS is available It is provided for application developers and does not include system interfaces that require system permissions ohos-sdk-full Applicable to Linux and Windows platforms. If you want to use system APIs, you need to use this SDK. Available to OEMs, including system interfaces that require access to the system mac-sdk-full Full SDK for macOS. If you want to use system APIs, you need to use this SDK. Available to OEMs, including system interfaces that require access to the system <ol> <li>Make sure that the downloaded SDK is the full SDK.  </li> <li>Check whether the downloaded file name contains \"full-SDK.\"  </li> <li>Check if the API includes system APIs such as <code>@ohos.app.ability.abilityManager.d.ts</code>, <code>@ohos.app.form.formInfo.d.ts</code>, and <code>@ohos.bluetooth.d.ts</code> </li> </ol>"},{"location":"application-development/environment-setup-config/full-public-sdk/#replace-the-full-sdk","title":"Replace the Full SDK","text":"<p>Take the replacement of the full SDK of DevEco Studio 4.1, API 11 on Windows OS as an example.</p> <ol> <li>Backup and remove the local SDK:    Make sure to select OpenHarmony then navigate to the directory where the original SDK is installed.  </li> </ol> <p>Copy the entire SDK directory (e.g., 11) to another location on your system where you want to keep the backup.</p> <p>Now you can remove the original SDK from its directory.</p> <ol> <li>The SDK you have acquired needs to be recognized by DevEco Studio in order to be used.  For example, with the daily build SDK: <code>version-Release_Version-OpenHarmony-4.1.10.3-20250415_034027-ohos-sdk-full_4.1-Release.tar.gz</code>, the compressed file has the following directory structure.  You can see that it contains SDK files for both Linux and Windows platforms. Each platform's SDK includes directories such as ets, js, native, previewer, and toolchains. <pre><code>\u251c\u2500\u2500 version-Release_Version-OpenHarmony-4.1.10.3-20250415_034027-ohos-sdk-full_4.1-Release\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 manifest_tag.xml\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 ohos-sdk\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 linux\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 ets-linux-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 js-linux-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 native-linux-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u251c\u2500\u2500 previewer-linux-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0     \u2502\u00a0\u00a0 \u2514\u2500\u2500 toolchains-linux-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 windows\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 ets-windows-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 js-windows-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 native-windows-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0         \u251c\u2500\u2500 previewer-windows-x64-4.1.10.3-Release.zip\n\u2502\u00a0\u00a0         \u2514\u2500\u2500 toolchains-windows-x64-4.1.10.3-Release.zip\n</code></pre></li> <li> <p>Create a new directory with the API version 11  as the file name in dir path: xxx\\Sdk\\ , unzip the compressed files  into this directory to form a structure below:  </p> </li> <li> <p>Verify in the IDE:    Full API will be loaded in IDE and you can now rebuild the project. </p> </li> </ol>"},{"location":"application-development/environment-setup-config/full-public-sdk/#approach-2-from-compiled-source-files","title":"Approach 2: From Compiled Source Files","text":"<p>The Full-SDK is not available directly. It can be compiled from the source code of OpenHarmony and manually replaced in DevEco Studio. The method of replacing the SDK is the same as the one mentioned in Approach 1.</p> <p>You can find the guide  of compilation of source code here: How to compile Full SDK</p>"},{"location":"application-development/environment-setup-config/ide-installation/","title":"IDE Installation","text":"<p>DevEco Studio is an integrated development environment (IDE) based on IntelliJ IDEA, tailored for building OpenHarmony applications. It provides integrated tools for coding, debugging, and managing dependencies, making it easier to develop, test, and deploy apps for the OpenHarmony and Oniro platforms.</p>"},{"location":"application-development/environment-setup-config/ide-installation/#get-package","title":"Get Package","text":""},{"location":"application-development/environment-setup-config/ide-installation/#deveco-studio-5xx","title":"DevEco Studio 5.x.x","text":"<p>DevEco Studio 5.x.x versions can be downloaded from here. Please note that downloading and using these versions requires Huawei developer account verification.</p>"},{"location":"application-development/environment-setup-config/ide-installation/#deveco-studio-41","title":"DevEco Studio 4.1","text":"<p>The latest publicly available version that does not require Huawei developer account verification is DevEco Studio 4.1.</p> <p>The download links for DevEco Studio 4.1 can be found in the OpenHarmony release notes. (If the English version is not available, try translating the page to English.)</p> <p></p> <p>Below are the download links:</p> <p>| Platform         | Download Link      | SHA256     | |------------------| | Windows (64-bit) | Download | c46be4f3cfde27af1806cfc9860d9c366e66a20e31e15180cf3a90ab05464650 | | Mac (x86)        | Download | 15d6136959b715e4bb2160c41d405b889820ea26ceadbb416509a43e59ed7f09 | | Mac (ARM)        | Download | ac04ca7c2344ec8f27531d5a59261ff037deed2c5a3d42ef88e6f90f4ed45484 |</p>"},{"location":"application-development/environment-setup-config/ide-installation/#step-by-step-installation","title":"Step-by-Step Installation","text":"<p>After the download completes, extract the downloaded package and run <code>deveco-studio-xxxx.exe</code>. </p> <p>Keep clicking <code>Next</code> until the Choose Install Location step.  Specify the desired installation path by clicking <code>Browse...</code> if necessary, and then click <code>Next</code>.  </p> <p>Note: Ensure that you delete all files from the previous installation path before proceeding if this is not your first installation.  </p> <p>In the Installation Options step, select <code>Create Desktop Shortcut</code>.  </p> <p>In the Choose Start Menu Folder step, keep the default settings and click <code>Install</code>.  </p> <p>The installation is now complete.  </p>"},{"location":"application-development/environment-setup-config/ide-installation/#environment-configuration","title":"Environment Configuration","text":"<p>Run <code>DevEco Studio</code> for the first time, and the configuration settings page will appear. </p> <p>Select <code>Do not import settings</code>. </p> <p>On the <code>Basic Setup</code> page, select to install Node.js and Ohpm.  Click Next to proceed to the SDK configuration page, and then set the SDK path to an appropriate location.  Accept the License Agreement.  Review the summary information and click <code>Next</code>.   The environment configuration is now complete.  </p> <p>Note: If you want to run applications for OpenHarmony, you need to install the relevant APIs as well. You can download the public SDK from <code>DevEco Studio</code> -&gt; <code>Tool</code> -&gt; <code>SDK Manager</code> -&gt; <code>OpenHarmony</code>. Select the desired API and click <code>Apply</code> to download. (If you downloaded DevEco Studio version 4.1, choose API Version 11 for development.) </p>"},{"location":"application-development/environment-setup-config/ohpm/","title":"Introduction to OHPM","text":"<p>OHPM (OpenHarmony Package Manager) is a package management system designed for OpenHarmony, providing access to third-party libraries and tools that enhance development efficiency and functionality within the OpenHarmony ecosystem. (Think of it as NPM in openharmony)</p> <p>OpenHarmony Third Party Repository </p> <p>Some examples of library\uff1a</p> <ol> <li>ohos_axios: A promise-based network request library that can run on Node.js and browsers, and is adapted for OpenHarmony.  </li> <li>socket.io: A library for implementing low-latency, bidirectional communication between clients and servers, supporting WebSocket protocol.  </li> <li>mars: A cross-platform network component library that provides solutions for long and short network connections.  </li> <li>httpclient: An efficient HTTP client for OpenHarmony that supports various protocols and optimizes network transmission.</li> </ol>"},{"location":"application-development/environment-setup-config/system-requirement/","title":"System Requirement","text":"<p>For this tutorial, we use Windows system as example, it is recommended to meet the following requirements:</p> <p>Operating system: Windows 10 64-bit</p> <p>Memory: at least 8 GB</p> <p>Hard disk: at least 100 GB</p> <p>Resolution: at least 1280 x 800 pixels</p>"},{"location":"application-development/resource-categories-and-access/","title":"Resource Categories and Access","text":"<p>During application development, you may need to use different resources, such as colors, fonts, spacing, and images, based on the device or configuration. Depending on the resource type, you can achieve this using the following methods:</p> <ul> <li> <p>Application resources: configure device- or configuration-specific resources in the resource files.</p> </li> <li> <p>System resources: Obtain the ID and configuration-specific values of colors, fonts, or other resources in Resources; obtain system icons in HarmonyOS Symbol.</p> </li> </ul>"},{"location":"application-development/resource-categories-and-access/#reference","title":"Reference","text":"<p>For additional information please refer to the Resource Categories and Access </p>"},{"location":"application-development/resource-categories-and-access/resource-access/","title":"Resource Access","text":""},{"location":"application-development/resource-categories-and-access/resource-access/#hap-resources","title":"HAP Resources","text":"<ul> <li>Use $r or $rawfile to reference resources.To reference resources of the color, float, string, plural, media, or profile type, use the \"$r('app.type.name')\" format, where app indicates the resource defined in the resources directory, type indicates the resource type or resource save path, and name indicates the name you assign to the resource.To reference strings with multiple placeholders in the string.json file, use the \"$r('app.string.label','aaa','bbb',444)\" format.To reference resources in the rawfile subdirectory, use the \"$rawfile('filename')\" format. Wherein filename indicates the relative path of a file in the rawfile subdirectory, which must contain the file name extension and cannot start with a slash (/).</li> </ul> <p>The usage is as follows:</p> <pre><code>  Text('Hello')\n  .fontColor($r('sys.color.ohos_id_color_emphasize'))\n  .fontSize($r('sys.float.ohos_id_text_size_headline1'))\n  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n  .backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\n\n  Image($r('sys.media.ohos_app_icon'))\n  .border({\n    color: $r('sys.color.ohos_id_color_palette_aux1'),\n    radius: $r('sys.float.ohos_id_corner_radius_button'), width: 2\n  })\n  .margin({\n    top: $r('sys.float.ohos_id_elements_margin_horizontal_m'),\n    bottom: $r('sys.float.ohos_id_elements_margin_horizontal_l')\n  })\n  .height(200)\n  .width(300)\n</code></pre> <ul> <li>Obtain a ResourceManager object through the application context, and then call resource management APIs to access different resources.For example, call getContext.resourceManager.getStringByNameSync('app.string.XXX') to obtain string resources; call getContext.resourceManager.getRawFd('rawfilepath') to obtain the descriptor of the HAP where the raw file is located, and then use the descriptor ({fd, offset, length}) to access the raw file.</li> </ul>"},{"location":"application-development/resource-categories-and-access/resource-access/#cross-haphsp-resources","title":"Cross-HAP/HSP Resources","text":"<p>For cross-HAP/HSP resources, we have different scenarios as following: - Cross-bundle access (for system applications only) - Inter-bundle, cross-module access  </p> <p>For detailed information please reference Inter-Bundle, Cross-Module Access</p>"},{"location":"application-development/resource-categories-and-access/resource-access/#system-resources","title":"System Resources","text":"<p>Apart from custom resources, developers can obtain the ID and configuration-specific values of colors, fonts, or other resources in Resources and system icons in HarmonyOS Symbol.</p> <p>During development, the usage of layered parameters is basically the same as that of qualifiers. To reference a system resource, use the \"$r('sys.type.resource_id')\" format. Wherein: sys indicates a system resource; type indicates the resource type, which can be color, float, string, or media; resource_id indicates the resource ID.</p> <p>NOTE</p> <ul> <li> <p>The use of system resources is only supported in the declarative development paradigm.</p> </li> <li> <p>For preset applications, you are advised to use system resources. For third-party applications, you can choose to use system resources or custom application resources as required.</p> </li> </ul> <pre><code>  Text('Hello')\n  .fontColor($r('sys.color.ohos_id_color_emphasize'))\n  .fontSize($r('sys.float.ohos_id_text_size_headline1'))\n  .fontFamily($r('sys.string.ohos_id_text_font_family_medium'))\n  .backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))\n\n  Image($r('sys.media.ohos_app_icon'))\n  .border({\n    color: $r('sys.color.ohos_id_color_palette_aux1'),\n    radius: $r('sys.float.ohos_id_corner_radius_button'), width: 2\n  })\n  .margin({\n    top: $r('sys.float.ohos_id_elements_margin_horizontal_m'),\n    bottom: $r('sys.float.ohos_id_elements_margin_horizontal_l')\n  })\n  .height(200)\n  .width(300)\n</code></pre>"},{"location":"application-development/resource-categories-and-access/resource-categories/","title":"Resource Categories Overview","text":"<p>Resource files used during application development must be stored in specified directories for management. There are two types of resource directories, namely, resource directories and resource group directories.  The resource directories are the base, qualifiers, rawfile directories. The resource group directories are the element, media, and profile directories.</p> <p>NOTE</p> <p>The common resource files used across projects in the stage model are stored in the resources directory under AppScope.</p> <p>Example of the resources directory: <pre><code>resources\n|---base\n|   |---element\n|   |   |---color.json\n|   |   |---string.json\n|   |---media\n|   |   |---icon.png\n|   |   |---startIcon.png\n|   |---profile\n|   |   |---main_pages.json\n|---en_US  // Default directory. When the device language is en-us, resources in this directory are preferentially matched.\n|   |---element\n|   |   |---string.json\n|---rawfile // Other types of files are saved as raw files and will not be integrated into the resources.index file. You can customize the file name as needed.\n|---zh_CN  // Default directory. When the device language is zh-cn, resources in this directory are preferentially matched.\n|   |---element\n|   |   |---string.json\n|---module.json5\n</code></pre></p>"},{"location":"application-development/resource-categories-and-access/resource-categories/resource-directories/","title":"Resource Directories","text":""},{"location":"application-development/resource-categories-and-access/resource-categories/resource-directories/#base-directory","title":"base Directory","text":"<p>The base directory is provided by default. Under this directory, the element subdirectory stores basic elements such as strings, colors, and boolean values, and the media and profile subdirectories store resource files such as media, animations, and layouts. Resource files in the subdirectories are compiled into binary files, and each resource file is assigned an ID. Resource files in the subdirectory are referenced based on the resource type and resource name.</p>"},{"location":"application-development/resource-categories-and-access/resource-categories/resource-directories/#qualifiers-directory","title":"Qualifiers Directory","text":"<p>en_US and zh_CN are two default qualifiers directories. You need to create other qualifiers directories on your own. Under this directory, the subdirectories store basic elements such as strings, colors, and boolean values, as well as resource files such as media, animations, and layouts.Resource files in the subdirectories are compiled into binary files, and each resource file is assigned an ID. Resource files in the subdirectories are referenced based on the resource type and resource name.</p>"},{"location":"application-development/resource-categories-and-access/resource-categories/resource-directories/#rawfile-directory","title":"rawfile Directory","text":"<p>You can create multiple levels of subdirectories with custom names to store various resource files.Resource files in the subdirectories are directly packed into the application without being compiled, and no IDs will be assigned to the resource files. The subdirectories are referenced based on the specified file path and file name.</p>"},{"location":"application-development/resource-categories-and-access/resource-categories/resource-group-directories/","title":"Resource Group Directories","text":"<p>Resource group directories include element, media, and profile, which are used to store resources of specific types.</p> <p>Table 1 Resource group directories</p> Directory Description Resource File element Element resources. Each type of data is represented by a JSON file. (Only files are supported in this directory.) The options are as follows:- boolean: boolean data- color: color data- float: floating point number ranging from -2^128 to 2^128- intarray: array of integers- integer: integer ranging from -2^31 to 2^31-1- pattern: style (for system applications only) - plural: plural form data- strarray: array of strings- string: string in the specified format.- theme: theme (for system applications only) It is recommended that files in the element subdirectory be named the same as the following files, each of which can contain only data of the same type:- boolean.json- color.json- float.json- intarray.json- integer.json- pattern.json- plural.json- strarray.json- string.json media Indicates media resources, including non-text files such as images, audios, and videos. (Only files are supported in this directory.)Table 4 and Table 5 describe the types of images, audios, and videos. The file name can be customized, for example, icon.png. profile Indicates a custom configuration file. (Only JSON files are supported in this directory.) The file name can be customized, for example, test_profile.json. <p>Media Resource Types</p> <p>Table 2 Image resource types</p> Format File Name Extension JPEG .jpg PNG .png GIF .gif SVG .svg WEBP .webp BMP .bmp <p>Table 3 Audio and video resource types</p> Format File Name Extension H.264 AVC .3gp Baseline Profile (BP) .mp4 <p>Resource File Examples</p> <p>The content of the color.json file is as follows:</p> <pre><code>{\n    \"color\": [\n        {\n            \"name\": \"color_hello\",\n            \"value\": \"#ffff0000\"\n        },\n        {\n            \"name\": \"color_world\",\n            \"value\": \"#ff0000ff\"\n        }\n    ]\n}\n</code></pre> <p>The content of the float.json file is as follows:</p> <pre><code>{\n    \"float\":[\n        {\n            \"name\":\"font_hello\",\n            \"value\":\"28.0fp\"\n        },\n        {\n            \"name\":\"font_world\",\n            \"value\":\"20.0fp\"\n        }\n    ]\n}\n</code></pre> <p>The content of the string.json file is as follows:</p> <pre><code>{\n    \"string\":[\n        {\n            \"name\":\"string_hello\",\n            \"value\":\"Hello\"\n        },\n        {\n            \"name\":\"string_world\",\n            \"value\":\"World\"\n        },\n        {\n            \"name\":\"message_arrive\",\n            \"value\":\"We will arrive at %1$s.\"\n        },\n        {\n            \"name\":\"message_notification\",\n            \"value\":\"Hello, %1$s!,You have %2$d new messages.\"\n        }\n    ]\n}\n</code></pre> <p>The content of the plural.json file is as follows:</p> <pre><code>{\n    \"plural\":[\n        {\n            \"name\":\"eat_apple\",\n            \"value\":[\n                {\n                    \"quantity\":\"one\",\n                    \"value\":\"%d apple\"\n                },\n                {\n                    \"quantity\":\"other\",\n                    \"value\":\"%d apples\"\n                }\n            ]\n        }\n    ]\n}\n</code></pre>"},{"location":"application-development/rn-example/","title":"app-rnoh-example","text":"<p>Example React Native application for Oniro/OpenHarmony.</p> <p>The aim of this project is to create a template for new React Native applications for Open Harmony, as well as to present the fundamentals of building cross-platform applications in React Native.</p> <p>The code is divided into two directories:</p> <ul> <li>oh-app: OpenHarmony application template serving as a container for the React Native app.</li> <li>rnoh-app: The actual React Native app embedded in the OH.</li> </ul> Functionalities of the Application <ul> <li>Animation: Sliding animation for the logo container using <code>Animated</code> API and <code>useRef</code>.</li> <li>Button Interaction: Handling logo press events with the <code>LogoBox</code> component and <code>onPress</code> prop.</li> <li>useEffect Hook: Triggering animations on component mount.</li> <li>Reusable Components: Creating and styling <code>LogoBox</code> for logos.</li> <li>Screen Carousel: Using <code>ScrollView</code> to navigate between screens (<code>Screen1</code>, <code>Screen2</code>, <code>Screen3</code>).</li> <li>Dynamic Switching: Scrolling carousel based on logo press.</li> <li>Code Structure: Modular organization with components and screens.</li> <li>Responsiveness: Adjusting screen width dynamically with <code>Dimensions</code>.</li> </ul> <p>The app demonstrates React Native features for building interactive and animated UIs.</p>"},{"location":"application-development/rn-example/#language-corrections","title":"Language Corrections","text":""},{"location":"application-development/rn-example/#a-quick-how-to","title":"A quick how-to","text":"<p>The code of the sample application has already been prepared and adapted for compilation with RN, it can serve as a template for other apps.</p> <ol> <li>Download project and  dependent libraries:</li> </ol> <pre><code>$ git clone https://github.com/eclipse-oniro4openharmony/app-rnoh-example.git\n$ cd app-rnoh-example/rnoh-app\n$ npm i @react-native-oh/react-native-harmony\n$ cd ../oh-app\n$ ohpm i @rnoh/react-native-openharmony\n</code></pre> <ol> <li>Create a JS bundle with RN app:  <pre><code>$ cd ../rnoh-app\n$ npm run dev\n</code></pre></li> <li>Copy generated bundle to the OH app:</li> </ol> <p>Copy the entire contents of the directory: <pre><code>rnoh-app/harmony/entry/src/main/resources/rawfile\n</code></pre> to the directory: <pre><code>oh-app/entry/src/main/src/main/resources/rawfile\n</code></pre> 4. Compile the oh-app with the DevEco. Choose <code>File &gt; Sync and Refresh Project</code> before compilation.</p>"},{"location":"application-development/rn-example/#detailed-instructions","title":"Detailed instructions","text":"<p>The project in this repository is already properly configured and adapted. You can use it as a template for your application. However, if you want to create an RNOH application from scratch, you must follow certain steps to embed the React Native application within an Open Harmony application that will serve as a container and bridge between the system and the RN application.</p> <p>In case of project compilation issues, go directly to the Troubleshooting section.</p>"},{"location":"application-development/rn-example/compilation/","title":"Compilation","text":""},{"location":"application-development/rn-example/compilation/#loading-a-bundle","title":"Loading a Bundle","text":"<p>After a bundle is generated (as described in the previous section), load it into DevEco Studio to run the MyApplication project. You can load a bundle using any of the following methods:</p>"},{"location":"application-development/rn-example/compilation/#method-1-local-loading","title":"Method 1: Local Loading","text":"<p>Place the bundle file and asset images in the <code>entry/src/main/resources/rawfile</code> directory and reference them in <code>entry/src/main/ets/pages/Index.ets</code>.</p>"},{"location":"application-development/rn-example/compilation/#method-2-using-metro","title":"Method 2: Using Metro","text":"<p>Load the bundle using Metro. For details, see Metro Hot Reloading.</p>"},{"location":"application-development/rn-example/compilation/#method-3-loading-from-the-sandbox-directory","title":"Method 3: Loading from the Sandbox Directory","text":"<p>The application sandbox is an isolation mechanism that prevents unauthorized data access via path traversal. Only the sandbox directory is visible to the application.</p> <p>During development and debugging, you may need to push files to the sandbox for testing. Use one of the following methods:</p> <ol> <li>Via DevEco Studio: Place the target file in the application installation path. For details, see \"Resource Categories and Access.\"</li> <li>Using the hdc tool: Push files to the app\u2019s sandbox directory on the device with the following command:     <pre><code>hdc file send ${LocalDirectory} ${SandboxDirectory}\n</code></pre></li> </ol> <p>To load a bundle from the sandbox directory, register it by using <code>new FileJSBundleProvider('bundlePath')</code> in the <code>jsBundleProvider</code> parameter of <code>RNApp</code>. In the <code>Index.ets</code> file under the <code>MyApplication/entry</code> directory, pass <code>jsBundleProvider</code> to load the bundle. The code provides three <code>BundleProviders</code> that attempt to load the bundle sequentially via Metro, sandbox, and local modes until successful.</p>"},{"location":"application-development/rn-example/compilation/#starting-and-running-a-project","title":"Starting and Running a Project","text":"<p>Use DevEco Studio to run the MyApplication project.</p> <p>It takes a long time to completely compile C++ code. Please wait.</p>"},{"location":"application-development/rn-example/compilation/#using-the-release-package","title":"Using the Release Package","text":"<ol> <li> <p>Create the Release Package:</p> <ul> <li>Create a <code>libs</code> folder in the <code>MyApplication</code> directory.</li> <li>Copy the <code>react_native_openharmony-xxx-release.har</code> file into the <code>libs</code> folder.</li> </ul> </li> <li> <p>Update Dependencies:</p> <ul> <li>Open <code>oh-package.json5</code> under <code>MyApplication/entry</code>.</li> <li>Replace the HAR dependency with the release package:   <pre><code>{\n   \"name\": \"entry\",\n   \"version\": \"1.0.0\",\n   \"description\": \"Please describe the basic information.\",\n   \"main\": \"\",\n   \"author\": \"\",\n   \"license\": \"\",\n   \"dependencies\": {\n      \"@rnoh/react-native-openharmony\": \"file:../libs/react_native_openharmony-xxx-release.har\"\n   }\n}\n</code></pre></li> </ul> </li> <li> <p>Modify CMake Configuration:</p> <ul> <li>Update the file <code>MyApplication/entry/src/main/cpp/CMakeLists.txt</code> as follows:   <pre><code>project(rnapp)\ncmake_minimum_required(VERSION 3.4.1)\nset(CMAKE_SKIP_BUILD_RPATH TRUE)\nset(NATIVERENDER_ROOT_PATH \"${CMAKE_CURRENT_SOURCE_DIR}\")\nset(OH_MODULE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../../../oh_modules\")\nset(RNOH_CPP_DIR \"${OH_MODULE_DIR}/@rnoh/react-native-openharmony/src/main/include\")\nset(REACT_COMMON_PATCH_DIR \"${RNOH_CPP_DIR}/patches/react_native_core\")\n\nset(CMAKE_CXX_STANDARD 17)\nset(LOG_VERBOSITY_LEVEL 1)\nset(CMAKE_ASM_FLAGS \"-Wno-error=unused-command-line-argument -Qunused-arguments\")\nset(RNOH_GENERATED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/generated\")\nset(CMAKE_CXX_FLAGS \"-fstack-protector-strong -Wl,-z,relro,-z,now,-z,noexecstack -s -fPIE -pie -DNDEBUG\")\nset(WITH_HITRACE_SYSTRACE 1) # for other CMakeLists.txt files to use\nadd_compile_definitions(WITH_HITRACE_SYSTRACE)\n\n# Folly compilation options\nset(folly_compile_options\n      -DFOLLY_NO_CONFIG=1\n      -DFOLLY_MOBILE=1\n      -DFOLLY_USE_LIBCPP=1\n      -DFOLLY_HAVE_RECVMMSG=1\n      -DFOLLY_HAVE_PTHREAD=1\n      -Wno-comma\n      -Wno-shorten-64-to-32\n      -Wno-documentation\n      -faligned-new\n)\nadd_compile_options(\"-Wno-unused-command-line-argument\")\n\n# Add header directories.\ninclude_directories(${NATIVERENDER_ROOT_PATH}\n                           ${RNOH_CPP_DIR}\n                           ${REACT_COMMON_PATCH_DIR}\n                           ${RNOH_CPP_DIR}/third-party/folly\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/react/nativemodule/core\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/jsi\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/callinvoker\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/utility/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/stacktrace/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/predef/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/array/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/throw_exception/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/config/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/core/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/preprocessor/include\n                           ${RNOH_CPP_DIR}/third-party/double-conversion\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/react/renderer/graphics/platform/cxx\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/runtimeexecutor\n                           ${RNOH_CPP_DIR}/third-party/glog/src\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/mpl/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/type_traits/include\n                           ${RNOH_CPP_DIR}/third-party/rn/ReactCommon/yoga\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/intrusive/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/assert/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/move/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/static_assert/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/container_hash/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/describe/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/mp11/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/iterator/include\n                           ${RNOH_CPP_DIR}/third-party/boost/libs/detail/include\n                           ${RNOH_CPP_DIR}/patches/react_native_core/react/renderer/textlayoutmanager/platform/harmony\n                           )\n\nconfigure_file(\n   ${RNOH_CPP_DIR}/third-party/folly/CMake/folly-config.h.cmake\n   ${RNOH_CPP_DIR}/third-party/folly/folly/folly-config.h\n)\nfile(GLOB GENERATED_CPP_FILES \"./generated/*.cpp\")\n\n# Add a shared dynamic library for RNOH.\nadd_library(rnoh SHARED\n      \"${RNOH_CPP_DIR}/RNOHOther.cpp\"\n      \"${RNOH_CPP_DIR}/third-party/folly/folly/lang/SafeAssert.cpp\"\n)\n\n# Link additional .so files.\ntarget_link_directories(rnoh PUBLIC ${OH_MODULE_DIR}/@rnoh/react-native-openharmony/libs/arm64-v8a)\ntarget_link_libraries(rnoh PUBLIC\n      rnoh_semi\n      libace_napi.z.so\n      libace_ndk.z.so\n      librawfile.z.so\n      libhilog_ndk.z.so\n      libnative_vsync.so\n      libnative_drawing.so\n      libc++_shared.so\n      libhitrace_ndk.z.so\n      react_render_scheduler\n      rrc_image\n      rrc_text\n      rrc_textinput\n      rrc_scrollview\n      react_nativemodule_core\n      react_render_animations\n      jsinspector\n      hermes\n      jsi\n      logger\n      react_config\n      react_debug\n      react_render_attributedstring\n      react_render_componentregistry\n      react_render_core\n      react_render_debug\n      react_render_graphics\n      react_render_imagemanager\n      react_render_mapbuffer\n      react_render_mounting\n      react_render_templateprocessor\n      react_render_textlayoutmanager\n      react_render_telemetry\n      react_render_uimanager\n      react_utils\n      rrc_root\n      rrc_view\n      react_render_leakchecker\n      react_render_runtimescheduler\n      runtimeexecutor\n)\n\nif(\"$ENV{RNOH_C_API_ARCH}\" STREQUAL \"1\")\n      message(\"Experimental C-API architecture enabled\")\n      target_link_libraries(rnoh PUBLIC libqos.so)\n      target_compile_definitions(rnoh PUBLIC C_API_ARCH)\nendif()\n\n# Add a shared rnoh_app library.\nadd_library(rnoh_app SHARED\n      ${GENERATED_CPP_FILES}\n      \"./PackageProvider.cpp\"\n      \"${RNOH_CPP_DIR}/RNOHOther.cpp\"\n      \"${RNOH_CPP_DIR}/RNOHAppNapiBridge.cpp\"\n)\n\ntarget_link_libraries(rnoh_app PUBLIC rnoh)\ntarget_compile_options(rnoh_app PUBLIC ${folly_compile_options} -DRAW_PROPS_ENABLED -std=c++17)\n</code></pre></li> </ul> </li> <li> <p>Clean and Rebuild the Project:</p> <ul> <li>Delete the <code>oh_modules</code> folder from <code>MyApplication/entry</code>.</li> <li>In DevEco Studio, click the <code>entry</code> folder and select Build &gt; Clean Project to clear the project cache.</li> <li>Choose File &gt; Sync and Refresh Project to run <code>ohpm install</code>. The <code>oh_modules</code> folder will be regenerated.</li> <li>Finally, select Run &gt; Run 'entry' to start the project.</li> </ul> </li> </ol>"},{"location":"application-development/rn-example/development-environment-configuration/","title":"Development environment configuration","text":""},{"location":"application-development/rn-example/development-environment-configuration/#environment-setup","title":"Environment Setup","text":"<ol> <li> <p>Install DevEco Studio     Refer to Downloading Software and Installing Software for details.</p> </li> <li> <p>Set Up the Development Environment     Ensure that network access is enabled to run the tool properly.</p> </li> <li> <p>Configure App Debugging </p> <ul> <li>Run your app/service on a local real device.</li> <li>Debug your app on the emulator.</li> <li>Set up the hdc environment.</li> </ul> </li> </ol>"},{"location":"application-development/rn-example/development-environment-configuration/#configuring-hdc-openharmony-device-connector","title":"Configuring hdc (OpenHarmony Device Connector)","text":"<p>The hdc tool is used for debugging on a real device in the OpenHarmony React Native project. Obtain the hdc tool from the OpenHarmony SDK and store it in the SDK\u2019s toolchains directory. Then, add the full path of {DevEco Studio installation path}/sdk/{SDK version}/openharmony/toolchains to your OS environment variables.</p>"},{"location":"application-development/rn-example/development-environment-configuration/#on-windows","title":"On Windows","text":"<p>a. Navigate to: This PC &gt; Properties &gt; Advanced system settings &gt; Advanced &gt; Environment Variables.     - Add the hdc path to the system variable <code>PATH</code>.</p> <p>b. Add a new system variable:     - Name: HDC_SERVER_PORT     - Value: A port number not in use (e.g., 7035).</p>"},{"location":"application-development/rn-example/development-environment-configuration/#on-macos","title":"On macOS","text":"<p>a. Open Terminal and run: <pre><code>vi ~/.bash_profile\n</code></pre> Add the following lines: <pre><code>export PATH=\"/Applications/DevEco-Studio.app/Contents/sdk/{Version path}/openharmony/toolchains:$PATH\"\nHDC_SERVER_PORT=7035\nlaunchctl setenv HDC_SERVER_PORT $HDC_SERVER_PORT\nexport HDC_SERVER_PORT\n</code></pre> b. Save and exit by pressing Esc, typing <code>:wq</code>, and pressing Enter.</p> <p>c. To apply the changes, run: <pre><code>source ~/.bash_profile\n</code></pre></p>"},{"location":"application-development/rn-example/development-environment-configuration/#setting-up-the-capi-version-environment-variable","title":"Setting Up the CAPI Version Environment Variable","text":"<p>The demo project uses the CAPI version. Set the environment variable <code>RNOH_C_API_ARCH</code> to <code>1</code>.</p>"},{"location":"application-development/rn-example/development-environment-configuration/#on-windows_1","title":"On Windows","text":"<ol> <li>Navigate to: This PC &gt; Properties &gt; Advanced system settings &gt; Advanced &gt; Environment Variables.</li> <li>Add a new variable:<ul> <li>Name: RNOH_C_API_ARCH</li> <li>Value: 1</li> </ul> </li> </ol>"},{"location":"application-development/rn-example/development-environment-configuration/#on-macos_1","title":"On macOS","text":"<ol> <li>Open Terminal and run: <pre><code>export RNOH_C_API_ARCH=1\n</code></pre></li> <li> <p>Verify the setting with: <pre><code>echo $RNOH_C_API_ARCH\n</code></pre> If the output is <code>1</code>, the variable is set correctly.</p> </li> <li> <p>For automatic setup on every Terminal launch, add the export command to your shell configuration file (e.g., <code>~/.bash_profile</code>, <code>~/.bashrc</code>, or <code>~/.zshrc</code>).</p> </li> </ol>"},{"location":"application-development/rn-example/development-environment-configuration/#additional-notes","title":"Additional Notes","text":"<ul> <li>CMakeLists.txt Customization:   If you need to customize the CMakeLists.txt file, name the shared library <code>rnoh_app</code>. For example:   <pre><code>add_library(rnoh_app SHARED\n      ...\n      \"${RNOH_CPP_DIR}/RNOHAppNapiBridge.cpp\"\n)\n</code></pre></li> </ul> <p>After completing the above configurations, your React Native project on OpenHarmony is ready for further development. For additional guidance on setting up the React Native environment for Android and iOS, please refer to the official React Native documentation.</p>"},{"location":"application-development/rn-example/open-harmony-application-code/","title":"OpenHarmony Application Code Documentation","text":"<p>This document describes how to create an OpenHarmony project, integrate React Native dependencies, and configure the project for both native and ArkTS environments. Follow the instructions step by step, and refer to alternative methods if you choose to replace files using MyApplicationReplace.zip.</p>"},{"location":"application-development/rn-example/open-harmony-application-code/#creating-or-integrating-a-project","title":"Creating or Integrating a Project","text":"<ol> <li> <p>Create a New Project:</p> <ul> <li>Navigate to File &gt; New &gt; Create Project.</li> <li>Select an Empty Ability project.</li> <li>When prompted, click Next and choose API12 for the Compile SDK. </li> <li>Enter the project name (for example, <code>MyApplication</code>). Ensure the project path is not too long.</li> </ul> </li> <li> <p>Project Configuration:</p> <ul> <li>Connect your device.</li> <li>Go to File &gt; Project Structure.</li> <li>In the dialog, click Signing Configs, select Support OpenHarmony and Automatically generate signature.</li> <li>Log in with your HUAWEI ID to sign in.</li> </ul> </li> </ol>"},{"location":"application-development/rn-example/open-harmony-application-code/#adding-the-react-native-configuration","title":"Adding the React Native Configuration","text":"<p>Run the following command in the project entry directory:</p> <pre><code>ohpm i @rnoh/react-native-openharmony@x.x.x\n</code></pre> <ul> <li>A new <code>oh_modules</code> folder will be generated in both the project-level and module-level directories.</li> <li>Note: Replace <code>@x.x.x</code> with the desired version. If not specified, the latest version is installed.</li> <li>This process may take some time because the HAR package is large. Ensure that both <code>ohpm install</code> and IDE-generated <code>SyncData</code> are complete to avoid compilation errors.</li> </ul>"},{"location":"application-development/rn-example/open-harmony-application-code/#integrating-rnoh-into-a-native-project","title":"Integrating RNOH into a Native Project","text":""},{"location":"application-development/rn-example/open-harmony-application-code/#adding-cpp-code","title":"Adding CPP Code","text":"<ol> <li> <p>Setup:</p> <ul> <li>Create the <code>cpp</code> folder under <code>MyApplication/entry/src/main</code>.</li> </ul> </li> <li> <p>CMakeLists.txt:     Add a file named <code>CMakeLists.txt</code> in the <code>cpp</code> directory with the following content to compile the RNOH adaptation layer and generate <code>librnoh_app.so</code>:</p> <pre><code>project(rnapp)\ncmake_minimum_required(VERSION 3.4.1)\nset(CMAKE_SKIP_BUILD_RPATH TRUE)\nset(OH_MODULE_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/../../../oh_modules\")\nset(RNOH_APP_DIR \"${CMAKE_CURRENT_SOURCE_DIR}\")\n\nset(RNOH_CPP_DIR \"${OH_MODULE_DIR}/@rnoh/react-native-openharmony/src/main/cpp\")\nset(RNOH_GENERATED_DIR \"${CMAKE_CURRENT_SOURCE_DIR}/generated\")\nset(CMAKE_ASM_FLAGS \"-Wno-error=unused-command-line-argument -Qunused-arguments\")\nset(CMAKE_CXX_FLAGS \"-fstack-protector-strong -Wl,-z,relro,-z,now,-z,noexecstack -s -fPIE -pie\")\nadd_compile_definitions(WITH_HITRACE_SYSTRACE)\nset(WITH_HITRACE_SYSTRACE 1) # For other CMakeLists.txt files to use\n\nadd_subdirectory(\"${RNOH_CPP_DIR}\" ./rn)\n\nadd_library(rnoh_app SHARED\n     \"./PackageProvider.cpp\"\n     \"${RNOH_CPP_DIR}/RNOHAppNapiBridge.cpp\"\n)\n\ntarget_link_libraries(rnoh_app PUBLIC rnoh)\n</code></pre> </li> <li> <p>PackageProvider.cpp:     Create the <code>PackageProvider.cpp</code> file in the <code>cpp</code> directory with the following content. It imports the RNOH PackageProvider and implements the <code>getPackages</code> method, returning an empty array since no additional packages are integrated:</p> <pre><code>#include \"RNOH/PackageProvider.h\"\n\nusing namespace rnoh;\n\nstd::vector&lt;std::shared_ptr&lt;Package&gt;&gt; PackageProvider::getPackages(Package::Context ctx) {\n     return {};\n}\n</code></pre> </li> <li> <p>Update Build Configuration:     Modify <code>MyApplication/entry/build-profile.json5</code> to include the native build task for the cpp directory. Add the following snippet within the <code>buildOption</code> section:</p> <pre><code>\"externalNativeOptions\": {\n    \"path\": \"./src/main/cpp/CMakeLists.txt\",\n    \"arguments\": \"\",\n    \"cppFlags\": \"\"\n}\n</code></pre> <p>Example of the modified section:</p> <pre><code>{\n  \"apiType\": \"stageMode\",\n  \"buildOption\": {\n     \"externalNativeOptions\": {\n        \"path\": \"./src/main/cpp/CMakeLists.txt\",\n        \"arguments\": \"\",\n        \"cppFlags\": \"\"\n     }\n  },\n  \"buildOptionSet\": [\n     {\n        \"name\": \"release\",\n        \"arkOptions\": {\n          \"obfuscation\": {\n             \"ruleOptions\": {\n                \"enable\": true,\n                \"files\": [\n                  \"./obfuscation-rules.txt\"\n                ]\n             }\n          }\n        }\n     }\n  ],\n  \"targets\": [\n     { \"name\": \"default\" },\n     { \"name\": \"ohosTest\" }\n  ]\n}\n</code></pre> </li> </ol>"},{"location":"application-development/rn-example/open-harmony-application-code/#adding-arkts-code","title":"Adding ArkTS Code","text":""},{"location":"application-development/rn-example/open-harmony-application-code/#configuring-the-entry-ability","title":"Configuring the Entry Ability","text":"<ol> <li> <p>EntryAbility.ets:     Open <code>MyApplication/entry/src/main/ets/entryability/EntryAbility.ets</code> and import <code>RNAbility</code>:</p> <pre><code>import { RNAbility } from '@rnoh/react-native-openharmony';\n\nexport default class EntryAbility extends RNAbility {\n  getPagePath() {\n     return 'pages/Index';\n  }\n}\n</code></pre> <ul> <li>Use <code>super</code> if you need to maintain lifecycle callbacks within <code>EntryAbility</code>.</li> </ul> </li> <li> <p>RNPackagesFactory.ets:     Create the <code>RNPackagesFactory.ets</code> file in the <code>MyApplication/entry/src/main/ets</code> directory with the following content to export the <code>createRNPackages</code> function:</p> <pre><code>import { RNPackageContext, RNPackage } from '@rnoh/react-native-openharmony/ts';\n\nexport function createRNPackages(ctx: RNPackageContext): RNPackage[] {\n  return [];\n}\n</code></pre> </li> </ol>"},{"location":"application-development/rn-example/open-harmony-application-code/#modifying-the-main-page","title":"Modifying the Main Page","text":"<ol> <li> <p>Index.ets:     Open <code>MyApplication/entry/src/main/ets/pages/Index.ets</code> and integrate the RNOH code. Ensure the <code>appKey</code> parameter of <code>RNApp</code> is identical to the app name registered by <code>AppRegistry.registerComponent</code> in the React Native project to avoid a white screen. Below is the modified code example:</p> <pre><code>import {\n  AnyJSBundleProvider,\n  ComponentBuilderContext,\n  FileJSBundleProvider,\n  MetroJSBundleProvider,\n  ResourceJSBundleProvider,\n  RNApp,\n  RNOHErrorDialog,\n  RNOHLogger,\n  TraceJSBundleProviderDecorator,\n  RNOHCoreContext\n} from '@rnoh/react-native-openharmony';\nimport { createRNPackages } from '../RNPackagesFactory';\n\n@Builder\nexport function buildCustomRNComponent(ctx: ComponentBuilderContext) {}\n\nconst wrappedCustomRNComponentBuilder = wrapBuilder(buildCustomRNComponent)\n\n@Entry\n@Component\nstruct Index {\n  @StorageLink('RNOHCoreContext') private rnohCoreContext: RNOHCoreContext | undefined = undefined\n  @State shouldShow: boolean = false\n  private logger!: RNOHLogger\n\n  aboutToAppear() {\n     this.logger = this.rnohCoreContext!.logger.clone(\"Index\")\n     const stopTracing = this.logger.clone(\"aboutToAppear\").startTracing();\n\n     this.shouldShow = true\n     stopTracing();\n  }\n\n  onBackPress(): boolean | undefined {\n     // Ensure Ark ignores the back press handled by Ability.\n     this.rnohCoreContext!.dispatchBackPress()\n     return true\n  }\n\n  build() {\n     Column() {\n        if (this.rnohCoreContext &amp;&amp; this.shouldShow) {\n          if (this.rnohCoreContext?.isDebugModeEnabled) {\n             RNOHErrorDialog({ ctx: this.rnohCoreContext })\n          }\n          RNApp({\n             rnInstanceConfig: {\n                createRNPackages,\n                enableNDKTextMeasuring: true, // Must be true to enable NDK text measuring.\n                enableBackgroundExecutor: false,\n                enableCAPIArchitecture: true, // Must be true to enable CAPI\n                arkTsComponentNames: []\n             },\n             initialProps: { \"foo\": \"bar\" } as Record&lt;string, string&gt;,\n             appKey: \"AwesomeProject\",\n             wrappedCustomRNComponentBuilder: wrappedCustomRNComponentBuilder,\n             onSetUp: (rnInstance) =&gt; {\n                rnInstance.enableFeatureFlag(\"ENABLE_RN_INSTANCE_CLEAN_UP\")\n             },\n             jsBundleProvider: new TraceJSBundleProviderDecorator(\n                new AnyJSBundleProvider([\n                  new MetroJSBundleProvider(),\n                  // To load the bundle from file, place it at:\n                  // `/data/app/el2/100/base/com.rnoh.tester/files/bundle.harmony.js` on your device.\n                  new FileJSBundleProvider('/data/storage/el2/base/files/bundle.harmony.js'),\n                  new ResourceJSBundleProvider(this.rnohCoreContext.uiAbilityContext.resourceManager, 'hermes_bundle.hbc'),\n                  new ResourceJSBundleProvider(this.rnohCoreContext.uiAbilityContext.resourceManager, 'bundle.harmony.js')\n                ]),\n                this.rnohCoreContext.logger\n             ),\n          })\n        }\n     }\n     .height('100%')\n     .width('100%')\n  }\n}\n</code></pre> </li> </ol>"},{"location":"application-development/rn-example/prerequisites/","title":"Prerequisites","text":""},{"location":"application-development/rn-example/prerequisites/#npm-installation","title":"npm Installation","text":"<p>npm (Node Package Manager) is a tool for managing Node.js packages, essential for both front-end and back-end projects. In most cases, npm is installed alongside Node.js.</p>"},{"location":"application-development/rn-example/prerequisites/#step-1-install-nodejs-including-npm","title":"Step 1: Install Node.js (including npm)","text":"<ol> <li>Visit the official Node.js website and download the installer.</li> <li>Choose the LTS (Long Term Support) version for stability.</li> <li>Run the installer and follow the instructions.</li> </ol>"},{"location":"application-development/rn-example/prerequisites/#step-2-verify-the-npm-installation","title":"Step 2: Verify the npm Installation","text":"<ol> <li>Open a terminal or command prompt.</li> <li>Enter the command:     <pre><code>npm --version\n</code></pre></li> <li>If the terminal displays a version number, npm has been successfully installed.</li> </ol>"},{"location":"application-development/rn-example/prerequisites/#step-3-update-npm-optional","title":"Step 3: Update npm (Optional)","text":"<p>To update npm globally to the latest version, run: <pre><code>npm install -g npm\n</code></pre></p>"},{"location":"application-development/rn-example/prerequisites/#software-and-hardware-requirements","title":"Software and Hardware Requirements","text":"<ul> <li>IDE: DevEco Studio 5.0.3 (downloaded and configured)</li> <li>OpenHarmony SDK API: 12 (downloaded)</li> <li>Huawei Developer Account: Required to generate signing configurations</li> <li>Device/Emulator: An installed OH emulator, a device with HarmonyNEXT, or a 64-bit version of OpenHarmony OpenHarmony Overview</li> </ul>"},{"location":"application-development/rn-example/prerequisites/#building-the-react-native-framework-from-source","title":"Building the React Native Framework from Source","text":""},{"location":"application-development/rn-example/prerequisites/#cloning-the-repository","title":"Cloning the Repository","text":"<p>Follow these steps to clone the project repository:</p> <ol> <li>Open a terminal or command prompt.</li> <li>Run the following command to clone the repository:     <pre><code>git clone https://gitee.com/openharmony-sig/ohos_react_native.git\n</code></pre></li> <li>Change to the newly created project directory:     <pre><code>cd ohos_react_native\n</code></pre></li> <li>Initialize and update all submodules:     <pre><code>git submodule update --init --recursive\n</code></pre></li> <li>Once cloning and submodule updating are complete, the project is ready for further setup and development.</li> </ol>"},{"location":"application-development/rn-example/prerequisites/#compilation-of-the-framework-and-sample-tester-application","title":"Compilation of the Framework and Sample Tester Application","text":"<ol> <li>Open a terminal and navigate to the <code>react-native-harmony-cli</code> directory, then run:     <pre><code>npm i &amp;&amp; npm pack\n</code></pre></li> <li>Navigate to the <code>react-native-harmony-sample-package</code> directory, then run:     <pre><code>npm i &amp;&amp; npm pack\n</code></pre></li> <li> <p>Enter the <code>tester</code> directory and run:     <pre><code>npm run i\n</code></pre> (Note: Use 'npm run i' instead of 'npm i'.)</p> </li> <li> <p>While in the <code>tester</code> directory, start the Metro server:     <pre><code>npm start\n</code></pre></p> </li> <li>Set the environment variable <code>RNOH_C_API_ARCH</code> to <code>1</code>.</li> <li>Open the <code>tester/harmony</code> project in DevEco Studio and wait for background synchronization to complete.</li> <li>Connect your device.</li> <li>In DevEco Studio, navigate to File &gt; Project Structure &gt; Signing Configs, log in, and follow the signing process.</li> <li>Select the <code>entry</code> configuration located at the top-right.</li> <li>Click the Run 'entry' button at the top-right to launch the project.</li> </ol>"},{"location":"application-development/rn-example/react-native-application-code/","title":"React Native Project Setup","text":"<p>This documentation provides step-by-step instructions for creating and configuring a React Native project with OpenHarmony dependencies.</p>"},{"location":"application-development/rn-example/react-native-application-code/#creating-the-project","title":"Creating the Project","text":"<p>Initialize a new React Native project in your selected directory (for instance, the root of drive D). Use the following command to create a project named AwesomeProject. Note that React Native for OpenHarmony supports version 0.72.5 only:</p> <pre><code>npx react-native@0.72.5 init AwesomeProject --version 0.72.5\n</code></pre> <p>If you are on macOS and want to avoid downloading the iOS dependency library during initialization, use the following command to skip this process:</p> <pre><code>npx react-native@0.72.5 init AwesomeProject --version 0.72.5 --skip-install\n</code></pre>"},{"location":"application-development/rn-example/react-native-application-code/#installing-openharmony-dependency-packages","title":"Installing OpenHarmony Dependency Packages","text":""},{"location":"application-development/rn-example/react-native-application-code/#update-packagejson","title":"Update package.json","text":"<p>Open the <code>package.json</code> file in the AwesomeProject directory and add the OpenHarmony dependencies. Add a new script to generate a bundle and include the local dependency for OpenHarmony:</p> <p>Replace the placeholder with the following snippet:</p> <p>In the \"dependencies\" section, set the \"react-native-harmony\" field to the correct local path and version for your rnoh-react-native-harmony package. For example:</p> <pre><code>\"react-native-harmony\": \"file:../react-native-harmony/rnoh-react-native-harmony-0.72.58.tgz\"\n</code></pre> <p>Adjust the path and version as needed.</p> <pre><code>{\n    \"scripts\": {\n        \"android\": \"react-native run-android\",\n        \"ios\": \"react-native run-ios\",\n        \"lint\": \"eslint .\",\n        \"start\": \"react-native start\",\n        \"test\": \"jest\",\n        \"dev\": \"react-native bundle-harmony --dev\"\n    },\n    \"dependencies\": {\n        \"react\": \"18.2.0\",\n        \"react-native\": \"0.72.5\",\n        \"react-native-harmony\": \"file:../react-native-harmony/rnoh-react-native-harmony-x.x.x.tgz\"\n    },\n    \"overrides\": {\n        \"@react-native-community/cli\": \"11.3.6\",\n        \"@react-native/codegen\": \"0.74.0\"\n    },\n    \"resolutions\": {\n        \"@react-native-community/cli\": \"11.3.6\"\n    },\n    \"engines\": {\n        \"node\": \"&gt;=16\"\n    }\n}\n</code></pre> <p>Run the command below in the AwesomeProject directory to install the dependency package (replace <code>x.x.x</code> with the desired version; if omitted, the latest version will be used):</p> <pre><code>npm i @react-native-oh/react-native-harmony@x.x.x\n</code></pre>"},{"location":"application-development/rn-example/react-native-application-code/#generating-the-bundle","title":"Generating the Bundle","text":"<p>Open the <code>metro.config.js</code> file in the AwesomeProject directory and insert the following OpenHarmony adaptation code. This modification ensures proper bundling and adapts the configuration for OpenHarmony:</p> <pre><code>const { mergeConfig, getDefaultConfig } = require('@react-native/metro-config');\nconst { createHarmonyMetroConfig } = require('@react-native-oh/react-native-harmony/metro.config');\n\n/**\n * @type {import(\"metro-config\").ConfigT}\n */\nconst config = {\n    transformer: {\n        getTransformOptions: async () =&gt; ({\n            transform: {\n                experimentalImportSupport: false,\n                inlineRequires: true,\n            },\n        }),\n    },\n};\n\nmodule.exports = mergeConfig(\n    getDefaultConfig(__dirname),\n    createHarmonyMetroConfig({\n        reactNativeHarmonyPackageName: '@react-native-oh/react-native-harmony'\n    }),\n    config\n);\n</code></pre> <p>Run the following command in the AwesomeProject directory to generate the bundle. This command creates the <code>bundle.harmony.js</code> file and the <code>assets</code> folder, located in <code>AwesomeProject/harmony/entry/src/main/resources/rawfile</code>. The assets folder is used for storing images; if no local images are used, the folder may not appear.</p> <pre><code>npm run dev\n</code></pre>"},{"location":"application-development/rn-example/react-native-application-code/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter the error \"'react-native' is not recognized as an internal or external command, operable program or batch file\", re-run the following command to reinstall the node modules:</p> <pre><code>npm install\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/","title":"Troubleshooting","text":"<p>Application should compile and run without issues on the HarmonyNEXT system. However, when using the current RNOH version 0.72 in Open Harmony, problems may occur.</p> <p>The application was running on the HiHope HH-SCDAYU200 development board with OpenHarmony 5.0.</p>"},{"location":"application-development/rn-example/troubleshooting/#issues","title":"Issues","text":"<p>After resolving the issues below, the project compiled and ran correctly.</p>"},{"location":"application-development/rn-example/troubleshooting/#1-filename-longer-than-260-characters","title":"1. Filename longer than 260 characters","text":"<p>Compilation of the project by DevEco ends with the following error:</p> <pre><code>&gt; hvigor WARN: ninja: error: Stat(rn/patches/react_native_core/react/renderer/textlayoutmanager/CMakeFiles/react_render_textlayoutmanager.dir/C_/Projects/MyReactNativeApp/oh_modules/@rnoh/react-native-openharmony/src/main/cpp/third-party/rn/ReactCommon/react/renderer/textlayoutmanager/TextMeasureCache.cpp.o): Filename longer than 260 characters\n\n&gt; hvigor ERROR: Failed :entry:default@BuildNativeWithNinja... \n&gt; hvigor ERROR: Exceptions happened while executing: ninja: Entering directory `C:\\Projects\\MyReactNativeApp\\entry\\.cxx\\default\\default\\debug\\arm64-v8a'\n[0/2] Re-checking globbed directories...\nninja: error: Stat(rn/patches/react_native_core/react/renderer/textlayoutmanager/CMakeFiles/react_render_textlayoutmanager.dir/C_/Projects/MyReactNativeApp/oh_modules/@rnoh/react-native-openharmony/src/main/cpp/third-party/rn/ReactCommon/react/renderer/textlayoutmanager/TextMeasureCache.cpp.o): Filename longer than 260 characters\n\n&gt; hvigor ERROR: BUILD FAILED in 2 s 45 ms\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/#cause","title":"Cause","text":"<ul> <li> <p>The name and path of the compiled file exceed 260 characters. This limitation is imposed by Windows:  https://learn.microsoft.com/en-us/windows/win32/fileio/maximum-file-path-limitation</p> </li> <li> <p>The issue might also be caused by the ninja.exe program:  https://github.com/ninja-build/ninja/issues/1900</p> </li> </ul>"},{"location":"application-development/rn-example/troubleshooting/#solution","title":"Solution","text":"<ul> <li>Make registry changes according to the instructions provided on Microsoft's pages.</li> <li>Check if a newer version of the ninja.exe program resolves the issue.</li> <li>Move the project directory to the root folder of the hard drive.</li> <li>OR: Build the application on macOS or Linux.</li> </ul>"},{"location":"application-development/rn-example/troubleshooting/#2-couldnt-create-bindings-between-ets-and-cpp","title":"2. Couldn't create bindings between ETS and CPP","text":"<p>The application compiles but immediately crashes after start:</p> <pre><code>Device info:OpenHarmony 3.2\nBuild info:OpenHarmony 5.0.0.71\nFingerprint:59107f8d9f3eb72ce161c09a75801513b584c54a4e3cb7a3c25211769024282b\nModule name:com.rnoh.tester\nVersion:1.0.0\nVersionCode:1000000\nPreInstalled:No\nForeground:Yes\nPid:24187\nUid:20010046\nReason:Error\nError name:Error\nError message:Couldn't create bindings between ETS and CPP. libRNOHApp is undefined.\nStacktrace:\n    at RNOHError (react_native_openharmony/src/main/ets/RNOH/RNOHError.ts:35:5)\n    at FatalRNOHError (react_native_openharmony/src/main/ets/RNOH/RNOHError.ts:8:10)\n    at onInit (react_native_openharmony/src/main/ets/RNOH/NapiBridge.ts:98:19)\n    at create (react_native_openharmony/src/main/ets/RNOH/RNInstancesCoordinator.ets:127:7)\n    at onCreate (react_native_openharmony/src/main/ets/RNOH/RNAbility.ets:96:35)\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/#cause_1","title":"Cause","text":"<p>The <code>libRNOHApp</code> library actually corresponds to the dynamic library <code>librnoh_app.so</code>, which is the result of compiling C++ as a dynamic library. The error may occur for two reasons:</p> <ul> <li><code>librnoh_app.so</code> does not actually exist.  </li> <li>The library is present, but the issue is caused by other factors.</li> </ul>"},{"location":"application-development/rn-example/troubleshooting/#solution_1","title":"Solution","text":"<ul> <li> <p>Check if the <code>librnoh_app.so</code> file is available, navigate to the root directory of the Harmony project and:</p> <ul> <li> <p>Check the folder: <code>\\entry\\build\\default\\intermediates\\libs\\default\\arm64-v8a\\</code>     to see if the appropriate .so file is present; </p> </li> <li> <p>Or check if in the package XXX.hap located in: <code>\\entry\\build\\default\\outputs\\default\\</code>     the <code>libs/arm64-v8a</code> directory contains the appropriate .so file.</p> </li> </ul> </li> <li> <p>Edit the configuration file <code>entry/build-profile.json5</code> in the <code>buildOptions</code> section by adding the <code>externalNativeOptions</code> option:</p> </li> </ul> <pre><code>\"buildOption\": {\n    \"externalNativeOptions\": {\n        \"path\": \"./src/main/cpp/CMakeLists.txt\",\n        \"arguments\": \"\",\n        \"cppFlags\": \"\",            \n    }                \n}\n</code></pre> <ul> <li> <p>Check the Hilog to locate the fault. One possible cause is that <code>libhermes.so</code> is not packed into YOURAPPNAME.hap. (The Hilog reports <code>can't find library libhermes.so in namespace: moduleNs_default</code>.)</p> </li> <li> <p>Alternatively, enable the error enhancement function of IDE, as shown in the following figure:</p> </li> </ul> <p></p> <ul> <li> <p>Upgrade your IDE to the latest version.</p> </li> <li> <p>Add the following information to <code>/build-profile.json5</code> of the HAR module:</p> </li> </ul> <p><pre><code>(type=har in modules.json5)\n    \"nativeLib\": { // Same level as apiType\n        \"excludeFromHar\": false\n    }\n</code></pre> - To manually solve the problem, you can also copy the content in the <code>oh_modules/@rnoh/react-native-openharmony/src/main/cpp/third-party/prebuilt</code> directory of the RN source code to the <code>oh_modules/@rnoh/react-native-openharmony/libs</code> directory.</p> <ul> <li>Check if your version of Open Harmony is 64-bit. If not, flash your device with the 64-bit  OHOS image: https://ci.openharmony.cn/workbench/cicd/dailybuild/dailylist</li> </ul>"},{"location":"application-development/rn-example/troubleshooting/#3-kit-kitsharekit-has-no-corresponding-config-file-in-arkts-sdk","title":"3. Kit '@kit.ShareKit' has no corresponding config file in ArkTS SDK","text":"<p>The project fails to compile as an OpenHarmony SDK API 12 target. Error message:</p> <pre><code>Kit '@kit.ShareKit' has no corresponding config file in ArkTS SDK\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/#cause_2","title":"Cause","text":"<p>This library is missing in the OpenHarmony SDK API 12.</p>"},{"location":"application-development/rn-example/troubleshooting/#workaround","title":"Workaround","text":"<p>Temporary solution: This RN functionality will not work. However, it allows the project to compile on the OpenHarmony system. The ultimate solution should remove the dependency on libraries from the HarmonyNEXT SDK.</p> <p>Edit the file <code>ShareTurboModule.ts</code> located in the directory:</p> <p><pre><code>.\\oh-app\\oh_modules\\.ohpm\\@rnoh+react-native-openharmony@0.72.53\\oh_modules\\@rnoh\\react-native-openharmony\\src\\main\\ets\\RNOHCorePackage\\turboModules\n</code></pre> On line 11, comment out:</p> <pre><code>import { RNOHLogger } from '../../RNOH/RNOHLogger';\n//import { systemShare } from '@kit.ShareKit';\n</code></pre> <p>Modify <code>share</code> method:</p> <pre><code>  async share(\n    content: { title?: string; message?: string; url?: string },\n    dialogTitle?: string,\n  ): Promise&lt;{ action: string }&gt; {\n    if (!content) {\n        this.logger.error('Content is null');\n        return Promise.reject('Content cannot be null');\n    }\n\n    return Promise.resolve({ action: ACTION_SHARED });\n\n    // let sharedData: systemShare.SharedData = new systemShare.SharedData(undefined);\n    // let sharedRecord: systemShare.SharedData = ...\n    // [...]\n    // [comment out the rest of the code in this method]\n</code></pre> <p>Now the project should compile correctly. You might also try replacing that code to use <code>@ohos.app.ability.wantConstant</code> from the OHOS SDK.</p>"},{"location":"application-development/rn-example/troubleshooting/#4-error-loading-shared-library-librawfilezso","title":"4. Error loading shared library librawfile.z.so","text":"<p>Application starts without crashing, but it is a transparent layer with no UI. The following error appears in the logs:</p> <pre><code>Error message:First attempt: load app module failed. Error loading shared library librawfile.z.so: No such file or directory (needed by /data/storage/el1/bundle/libs/arm64/librnoh_app.so)\nSecond attempt: load module default/rnoh_app failed. module path is empty\ntry to load abc file from  failed\nStacktrace:\n    at onInit (oh_modules/.ohpm/@rnoh+react-native-openharmony@0.72.53/oh_modules/@rnoh/react-native-openharmony/src/main/ets/RNOH/NapiBridge.ts:97:12)\n    at create (oh_modules/.ohpm/@rnoh+react-native-openharmony@0.72.53/oh_modules/@rnoh/react-native-openharmony/src/main/ets/RNOH/RNInstancesCoordinator.ets:125:7)\n    at onCreate (oh_modules/.ohpm/@rnoh+react-native-openharmony@0.72.53/oh_modules/@rnoh/react-native-openharmony/src/main/ets/RNOH/RNAbility.ets:96:35)\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/#cause_3","title":"Cause","text":"<p>The reason is that the <code>librawfile.z.so</code> directory is located under <code>system/lib64</code>. On OHOS, sandbox controls have been applied, so this directory is not mounted; only <code>system/lib64/ndk</code> is mounted.</p>"},{"location":"application-development/rn-example/troubleshooting/#solution_2","title":"Solution","text":"<ol> <li>Mount your device filesystem:</li> </ol> <pre><code>$ hdc target mount\n</code></pre> <ol> <li> <p>Modify the sandbox file: In <code>system/etc/sandbox/appdata-sandbox.json</code>, search for the keyword <code>/system/lib</code> and add <code>/system/lib64</code> at the appropriate positions.</p> <p>Receive file from the device: <pre><code>$ hdc file recv /system/etc/sandbox/appdata-sandbox.json\n</code></pre></p> </li> </ol> <p>Note: This entry should be added in all places after the <code>system/lib</code> section:</p> <pre><code>{\n    \"src-path\":\"/system/lib64\",\n    \"sandbox-path\":\"/system/lib64\",\n    \"sandbox-flags\":[\n        \"bind\",\n        \"rec\"\n    ],\n    \"check-action-status\":\"false\"\n}\n</code></pre> <ol> <li>Send modified file back to the device:</li> </ol> <pre><code>$ hdc file send .\\appdata-sandbox.json /system/etc/sandbox/\n</code></pre> <ol> <li>Restart the device.</li> </ol>"},{"location":"application-development/rn-example/troubleshooting/#5-register-type-windowrectchange-failed","title":"5. Register type windowRectChange failed","text":"<p>The application starts, the splash screen appears, but does not proceed further. An error appears in the logs:</p> <pre><code>08-05 17:47:27.604   16270-16270   A0beef/#RNOH_ARK                com.examp...loworld5  I     \u2588____  \n                                                                                               \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2588\u2557   \u2588\u2588\u2557 \u2588\u2588\u2588\u2588\u2588\u2588\u2557 \u2588\u2588\u2557  \u2588\u2588\u2557\n                                                                                               \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2588\u2588\u2557  \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551  \u2588\u2588\u2551\n                                                                                               \u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2554\u2588\u2588\u2557 \u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2551\n                                                                                               \u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2557\u2588\u2588\u2551\u255a\u2588\u2588\u2557\u2588\u2588\u2551\u2588\u2588\u2551   \u2588\u2588\u2551\u2588\u2588\u2554\u2550\u2550\u2588\u2588\u2551\n                                                                                               \u2588\u2588\u2551  \u2588\u2588\u2551\u2588\u2588\u2551 \u255a\u2588\u2588\u2588\u2588\u2551\u255a\u2588\u2588\u2588\u2588\u2588\u2588\u2554\u255d\u2588\u2588\u2551  \u2588\u2588\u2551\n                                                                                               \u255a\u2550\u255d  \u255a\u2550\u255d\u255a\u2550\u255d  \u255a\u2550\u2550\u2550\u255d \u255a\u2550\u2550\u2550\u2550\u2550\u255d \u255a\u2550\u255d  \u255a\u2550\u255d\n                                                                                               \u2588____ \u2014 MAIN\n                                                                                               _\u2588___ \u2014 BACKGROUND\n                                                                                               __\u2588__ \u2014 JS\n                                                                                               ___\u2588_ \u2014 WORKER\n                                                                                               ____\u2588 \u2014 CLEANUP\n                                                                                               ==================\n08-05 17:47:27.609   16270-16270   A0beef/#RNOH_CPP                com.examp...loworld5  I     \u2588____ RNOHAppNapiBridge.cpp:99&gt; onInit (LOG_VERBOSITY_LEVEL=0)\n08-05 17:47:27.626   16270-16270   A0beef/#RNOH_CPP                com.examp...loworld5  I     \u2588____ ArkTSBridge.cpp:23&gt; ArkTSBridge::ArkTSBridge\n08-05 17:47:27.652   16270-16270   A0beef/#RNOH_ARK                com.examp...loworld5  D     \u2588____ RNAbility::onWindowStageCreate  START\n08-05 17:47:27.652   16270-16270   A0beef/#RNOH_ARK                com.examp...loworld5  D     \u2588____ RNAbility::onWindowSetup  START\n08-05 17:47:27.673   16270-16270   A0beef/#RNOH_ARK                com.examp...loworld5  E     \u2588____ RNAbility::onWindowSetup  Failed to setup window {\"code\":801}\n</code></pre> <p><code>RNAbility</code> log:</p> <pre><code>08-05 17:47:27.672   16270-16270   C04200/JsRegisterManager        com.examp...loworld5  I     &lt;340&gt;[NAPI]Method windowRectChange has not been registerted\n08-05 17:47:27.672   16270-16270   C04200/JsRegisterManager        com.examp...loworld5  E     &lt;385&gt;RegisterListener: [NAPI]Register type windowRectChange failed\n</code></pre>"},{"location":"application-development/rn-example/troubleshooting/#workaround_1","title":"Workaround","text":"<p>Temporary solution: comment out in the code in the file <code>RNAbility.ets</code> (line 150) in the directory:</p> <pre><code>.\\oh-app\\oh_modules\\.ohpm\\@rnoh+react-native-openharmony@0.72.53\\oh_modules\\@rnoh\\react-native-openharmony\\src\\main\\ets\\RNOH\n</code></pre> <p>Find this fragment:</p> <pre><code>      mainWindow.on('windowSizeChange', onWindowSizeChange)\n      //mainWindow.on('windowRectChange', onWindowReactChange)\n      windowStage.on('windowStageEvent', onWindowStageChange)\n</code></pre>"},{"location":"contributing/","title":"Contribution","text":"<p>The contributing process and guidelines part of this document must be applied to any repository in the scope of the project. Each repository must include this information in its <code>CONTRIBUTING.md</code> file and optionally, complement the process and guidelines with repository-specific requirements.</p>"},{"location":"contributing/bug-handling-process/","title":"Bug Handling Process","text":"<p>Eclipse Oniro is aiming to build a secure system from the foundation, applying the best industry practices in terms of development quality. However, as in every software projects, bugs do happen. This process explains how we handle bugs.</p>"},{"location":"contributing/bug-handling-process/#how-to-report-a-bug","title":"How to Report a Bug?","text":"<p>If you think you have found a bug in our distribution, please file a bug report in our bug tracker and in the project that you think is the source of the issue. Use the provided template:</p> <ul> <li>The module affected</li> <li>What is the action to reproduce the bug? (Steps to reproduce)</li> <li>What is the result you see? (Actual result)</li> <li>What is the result you expect? (Expected behaviour)</li> <li>Frequency? (always, sometimes, one-time issue)</li> <li>Tested version (image name and version, platform)</li> <li>Do you know any workaround of this issue? (link to   workaround/mitigation steps etc)</li> <li>Do you have a fix for this issue?</li> </ul> <p>Developers review the reported issues and perform triage (see below). When a fix is available, the ticket is updated with the details of the solution.</p>"},{"location":"contributing/bug-handling-process/#bug-triage","title":"Bug Triage","text":"<p>The bug triage is a process where developers asses the bug and set its severity and domain. At the end of this process the bug will:</p> <ul> <li>Be classified as a security issue, normal bug, feature request, or   be rejected if the feature is working as planned or could not be   reproduced.</li> <li>Have its severity set. Please refer to the documentation of severity   levels below.</li> <li>Have its domain set. The bug tracker will include the latest list.</li> </ul> <p>If the bug is classified as a security vulnerability, the engineer assesing the issue will create a new ticket in the private security bug tracker and the discussion will continue in the security bug tracker from that point. Please refer to the CVE Process for details.</p> <p>If the bug is confirmed as a bug, the developer will assign bug severity: critical, normal, minor or low.</p> <p>NOTE\uff1a</p> <p>Critical severity bugs make a feature unusable, cause a major data loss or hardware breakage. There is no workaround, or a complex one. Normal severity bugs make a feature hard to use, but there is a workaround (including another feature to use instead of the desired one). Minor severity bugs cause a loss of non-critical feature (like missing or incorrect logging). Low severity bugs cause minor inconveniences (like a typo in the user interface or in the documentation).</p> <p>The bug can originate in a package developed by the project, or from one we use from an upstream source. The process of handling a bug report will change between those two cases:</p>"},{"location":"contributing/bug-handling-process/#when-the-issue-is-in-the-code-developed-by-the-project","title":"When the Issue is in the Code Developed by the Project","text":"<p>In the case where the bug originates in the code directly maintained by the Project, the bug is handled directly in the bug tracker.</p>"},{"location":"contributing/bug-handling-process/#when-the-issue-originates-from-upstream-code","title":"When the Issue Originates from Upstream Code","text":"<p>If the issue was identified in upstream code, we report an upstream issue in a way appropriate to the upstream project. We store the reference to the upstream bug report in our bug tracker. Depending on the bug severity, we might decide to develop and maintain a fix locally. However, we strongly prefer to upstream the fix first, and then get it with a regular upstream code update.</p> <p>Please note also that we periodically update maintained packages from upstream sources, regardless of the bugs filled in our system. Our goal is to update to the latest stable version of the package.</p>"},{"location":"contributing/bug-handling-process/#detailed-workflow","title":"Detailed Workflow","text":""},{"location":"contributing/bug-handling-process/#bug-sources","title":"Bug Sources","text":"<p>Bugs might be reported by different sources, including Project\\'s own findings (like QA), partner findings, community, or security researchers. There might be also different ways the Project team learns about the issue, including Matrix channels, discussion forums etc. Issues coming from different sources are centralized in the bug tracker, which also provides an unified identification of all issues.</p>"},{"location":"contributing/bug-handling-process/#acknowledgement-and-bug-triage","title":"Acknowledgement and Bug Triage","text":"<p>After the bug is entered, a developer will perform triage. The process starts from acknowledging the issue and then consists of verifying all the information provided by the bug reporter to reproduce the issue. The developer performing triage might ask additional questions. Then they assign severity and domain to the issue in the bug tracker. They also check which versions are affected and might modify the severity level set by the reporter. Any project member, or the bug reporter, who disagrees with the assignment might comment on the issue.</p> <p>If there is a fix available from the reporter, the developer also verifies if the fix is correct and matches the IP policy. If the fix is judged acceptable, the process might skip to the Releasing step.</p> <p>We aim at the first answer of the triage (either finishing triage, or additional questions to the reporter) in three working days for critical bugs and seven days for other bugs. In case of a critical bug, the person performing triage informs the maintainers of the affected subsystem.</p>"},{"location":"contributing/bug-handling-process/#prioritizing-and-fixing","title":"Prioritizing and Fixing","text":"<p>Bugs with the severity attached enter the prioritization process. It includes a weekly meeting when the team reviews bugs entered or modified during the last week: those during the process of triage, and those with the triage finished. For the bugs with triage finished, the team sets the priority and might assign it to a developer.</p> <p>The bug fixes should follow the same contributions guidelines as any other contribution. The best practice is to develop a fix for the bug in a separate branch. Fixes for related bugs are possible in the same branch.</p>"},{"location":"contributing/bug-handling-process/#releasing","title":"Releasing","text":"<p>When a bug fix is available in a branch, the developer creates a pull request. When the change is accepted, it is merged in the main branch. The developer in charge of the bug verifies with the release manager to which branches the change should be backported.</p> <p>If the bug comes from an upstream project, developers upstream the bug fix. If the upstream is delayed, the Project might ship a local fix. However, we aim at upstreaming all fixes.</p> <p>During the time of development of the patch and eventual upstream, the developer updates the documentation (if appropriate), and adds a notification to the release notes. Our release notes contain: links to bugs fixed in the release, links to CVEs fixed in the release (publicly known) and a list of CVEs fixed that are still under embargo.</p> <p>If the bug is classified as critical, it might be decided to perform a separate bugfix release to fix the issue. Otherwise, the bug fix lands in the next bugfix release.</p>"},{"location":"contributing/contributing-to-projects-not-maintained-by-team/","title":"Contributing to Projects not Maintained by Team","text":""},{"location":"contributing/contributing-to-projects-not-maintained-by-team/#sec_upstream_contrib_overview","title":"Overview","text":"<p>In order to comply with \"upstream first\" rule and Open Source licenses requirements, developers collaborate with several upstream projects to submit fixes, improvements, bug reports, problem investigation results etc. Contribution must be made in accordance with upstream project policy using the tooling upstream project prefers such as mailing list, github/gitlab pull/merge requests, etc.</p>"},{"location":"contributing/contributing-to-projects-not-maintained-by-team/#sec_upstream_contrib_signoff","title":"Signing-off Contribution","text":"<p>All contributions must be signed off by the developer using their email account associated with the copyright owner of the work (in most cases it will be the corporate email address). This does not apply if the upstream project policy says otherwise or signing off of the contribution is not possible due to upstream project's limitation. It is recommended to use corporate email address as a sender address in case of email communication.</p> <p>In case the developer contributes code written by someone else (provided by partner, end user, third-party contributor etc) original author's copyright must be kept and entire contribution must be signed off with \"Author:\" tag unless the author explicitly asks otherwise. This could be done in the <code>git</code> submission:</p> <pre><code>git commit --signoff --author=\"Foo Bar &lt;foo.bar@example.com&gt;\" -m \"comment\"\n</code></pre> <p>By doing this developer states that they agree to the terms of <code>DCO&lt;docs_dco&gt;</code></p> <p>The developer must make sure that they have rights to submit on behalf of the original author according to the license and/or author's permission.</p> <p>It is developer's responsibility to check license compatibility between the contribution and the upstream project.</p>"},{"location":"contributing/contributing-to-projects-not-maintained-by-team/#sec_upstream_contrib_cla","title":"Contribution Agreement","text":"<p>In case the upstream project requires signing of contribution agreement of any kind, the developer must review it carefully before submitting the contribution. In case of any doubt they must contact their manager or legal team for further guidance.</p>"},{"location":"contributing/contributing-to-projects-not-maintained-by-team/#sec_upstream_contrib_security","title":"Security-related Contribution and Sensitive Data","text":"<p>It is the developer's responsibility to verify the data they share with upstream counterpart to prevent leak of sensitive information. Special attention must be given in the case of security issues or issues which can be potentially rated as security-related in the future. Such cases must be handled separately according to upstream policy (using private channels or directly with the Security Officer if upstream has one).</p>"},{"location":"contributing/dco-signoff/","title":"DCO-signoff","text":"<p>Commits MUST be submitted only with a sign-off by the submitter. A commit without a sign-off will be automatically rejected. You don't need be the author or the copyright holder of the contribution, but you must make sure that you have the power to submit on behalf of those who are.</p> <p>To sign your work, just add a line like this at the end of your commit message:</p> <pre><code>Signed-off-by: Jane Doe &lt;jane@example.com&gt;\n</code></pre> <p>This could be done automatically in the <code>git</code> submission:</p> <pre><code>git commit --signoff -m \"comment\"\n</code></pre>"},{"location":"contributing/dco-signoff/#docs_dco","title":"Developer Certificate of Origin","text":"<p>By doing this you state that you certify the following (from https://developercertificate.org):</p> <pre><code>Developer Certificate of Origin\nVersion 1.1\n\nCopyright (C) 2004, 2006 The Linux Foundation and its contributors.\n1 Letterman Drive\nSuite D4700\nSan Francisco, CA, 94129\n\nEveryone is permitted to copy and distribute verbatim copies of this\nlicense document, but changing it is not allowed.\n\n\nDeveloper's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n\n(a) The contribution was created in whole or in part by me and I\n    have the right to submit it under the open source license\n    indicated in the file; or\n\n(b) The contribution is based upon previous work that, to the best\n    of my knowledge, is covered under an appropriate open source\n    license and I have the right under that license to submit that\n    work with modifications, whether created in whole or in part\n    by me, under the same open source license (unless I am\n    permitted to submit under a different license), as indicated\n    in the file; or\n\n(c) The contribution was provided directly to me by some other\n    person who certified (a), (b) or (c) and I have not modified\n    it.\n\n(d) I understand and agree that this project and the contribution\n    are public and that a record of the contribution (including all\n    personal information I submit with it, including my sign-off) is\n    maintained indefinitely and may be redistributed consistent with\n    this project or the open source license(s) involved.\n</code></pre>"},{"location":"contributing/eclipse-contributor-agreement/","title":"Eclipse Contributor Agreement","text":"<p>Before your contribution can be accepted by the project team, contributors must electronically sign the Eclipse Contributor Agreement (ECA).</p> <p>Commits must have a Signed-off-by field in the footer indicating that the author is aware of the terms by which the contribution has been provided to the project. Also, an associated Eclipse Foundation account needs to be in place with a signed Eclipse Contributor Agreement on file. These requirements are enforced by the Eclipse Foundation infrastructure tooling.</p> <p>For more information, please see the Eclipse Committer Handbook.</p>"},{"location":"contributing/github-contributions/","title":"GitHub Contributions","text":"<p>GitHub handles contributions as pull requests to relevant repositories part of the Eclipse Oniro for OpenHarmony organization. The flow for handling that is classic: fork-based pull requests. This means that once you have an account, you can fork any repository, create a branch with proposed changes and raise a pull request against the forked repository. More generic information you can find on the GitHub's documentation as part of \"Working with forks\".</p>"},{"location":"contributing/github-contributions/#git-setup","title":"Git setup","text":"<p>Clone your fork locally, enter its directory and set:</p> <pre><code>$ git config --local user.email &lt;your_eclipse_account_email&gt;\n$ git config --local user.name &lt;your_eclipse_full_name&gt;\n</code></pre> <p>If you want to push or pull repositories using SSH, you have to add a SSH key to your profile.</p>"},{"location":"contributing/github-contributions/#commit-guidelines","title":"Commit Guidelines","text":"<p>\ud83d\udca1 NOTE\uff1a If you are new to <code>git</code>, start by reading the official Getting Started Document.</p> <p>At its core, contributing to the project means wrapping your work as <code>git</code> commits. How we handle this has an impact on rebasing, cherry-picking, back-porting, and ultimately exposing consistent documentation through its logs.</p> <p>To achieve this, we maintain the following commit guidelines:</p> <ul> <li>Each commit should be able to stand by itself providing a building   block as part of the pull request (PR).</li> <li>A good balance of granularity with scoped commits helps to     handle backports (e.g. cherry-picks) and also improves the     ability to review smaller chunks of code taking commit by     commit.</li> <li>Changes that were added on top of changes introduced in the PR,   should be squashed into the initial commit.</li> <li>For example, a PR that introduced a new feature and, as a separate     commit, fixed a build error.     The latter commit should be squashed into the initial commit.</li> <li>For example, a PR introducing a new docs chapter and also     adding, as a separate commit, some typo fixes. The latter     commits should be squashed into the initial commit.</li> <li>There is a small set of exceptions to this rule. All these     exceptions gravitate around the case where an PR, even if it     provides multiple commits in the same scope (for example, to the     same new feature), each of the commits has a very specific     purpose.<ul> <li>For example, a line formating change followed by a chapter   addition change in the same documentation file.</li> <li>Also, it can be the case of two functional changes that are   building blocks in the same scope.</li> <li>Another example where commits are not to be squashed is when   having a commit moving the code and a commit modifying the   code in the new location.</li> </ul> </li> <li>Make sure you clean your code of trailing white spaces/tabs and that   each file ends with a new line.</li> <li>Avoid merge commits as part of your PR. Your commits should be   rebased on top of the HEAD of the destination branch.</li> </ul> <p>As mentioned above, git log becomes informally part of the documentation of the product. Maintaining consistency in its format and content improves debugging, auditing, and general code browsing. To achieve this, we also require the following commit message guidelines:</p> <ul> <li>The subject line (the first line) needs to have the following   format: <code>scope: Title limited to 80 characters</code>.</li> <li>Use the imperative mood in the subject line for the title.</li> <li>The scope prefix (including the colon and the following     whitespace) is optional but most of the time highly recommended.     For example, fixing an issue for a specific part of the code, would     use the part name as the scope.</li> <li>The title (the part after the scope) starts with a capital     letter.</li> <li>The entire subject line shouldn't exceed 80 characters (same     text wrapping rule for the commit body).</li> <li>The commit body separated by an empty line from the subject   line.</li> <li>The commit body is optional but highly recommended. Provide a     clear, descriptive text block that accounts for all the changes     introduced by a specific commit.</li> <li>The commit body must not contain more than 80 characters per     line.</li> <li>The commit message will have the commit message trailers separated   by a new line from the body.</li> <li>Each commit requires at least a Signed-off-by trailer line.     See more as part of the <code>/contributing/dco</code>{.interpreted-text     role=\"doc\"} document.</li> <li>All trailer lines are to be provided as part of the same text     block - no empty lines in between the trailers.</li> </ul> <p>Additional commit message notes:</p> <ul> <li>Avoid using special characters anywhere in the commit message.</li> <li>Be succinct but descriptive.</li> <li>Have at least one trailer as part of each commit: Signed-off-by.</li> <li>You can automatically let <code>git</code> add the Signed-off-by by taking   advantage of its <code>-s</code> argument.</li> <li>Whenever in doubt, check the existing log on the file (<code>&lt;FILE&gt;</code>) you   are about to commit changes, using something similar to:   <code>git log &lt;FILE&gt;</code>.</li> </ul> <p>Example of a full git message:</p> <pre><code>busybox: Add missing dependency on virtual/crypt\n\nSince version 1.29.2, the busybox package requires virtual/crypt. Add this\nto DEPENDS to make sure the build dependency is satisfied.\n\nSigned-off-by: Joe Developer &lt;joe.developer@example.com&gt;\n</code></pre>"},{"location":"contributing/github-contributions/#creating-pull-requests","title":"Creating pull requests","text":"<p>Once your changes have been pushed to your fork, you are ready to prepare a pull request.</p> <ol> <li>Go to your repository in an internet browser.</li> <li>Create a pull request by clicking <code>Contribute</code> and press <code>Open pull request</code>.     Add an explainable description and     create a pull request. Alternatively, you can enter the website of     your fork. You should see a message that you pushed your branch to     the repository. In the same section you can press     <code>Open pull request</code>.</li> <li>Before merging, it has to be reviewed and approved by repository     maintainers. Read their review and add any required changes to your     pull request.</li> <li>After you polish your pull request, the maintainers will run the     pipelines which check if your changes do not break the project and     approve them. If everything is correct, your work is merged to the     main project. Remember that each commit of the pull request should     be a minimum, self-contained building block.</li> </ol>"},{"location":"contributing/quick-start-guide-for-new-developers/","title":"Quick Start Guide for New Developer","text":"<p>This page describes a quick start contribution guide for new developers who would like to join the Oniro project.</p>"},{"location":"contributing/quick-start-guide-for-new-developers/#setting-up","title":"Setting up","text":""},{"location":"contributing/quick-start-guide-for-new-developers/#creating-an-account-on-eclipse","title":"Creating an account on Eclipse","text":"<p>Head to the Eclipse foundation website and set up an account by entering your:</p> <ul> <li>Email</li> <li>Username</li> <li>Full name</li> <li>Organization</li> <li>Password</li> <li>Country</li> </ul> <p>Then read and check the box to agree to Terms of Use, Privacy Policy and Code of Conduct. When you complete that, follow the instructions sent to your email to activate the account.</p>"},{"location":"contributing/quick-start-guide-for-new-developers/#signing-the-eca","title":"Signing the ECA","text":"<p>In order to contribute to the you need to sign the Eclipse Contributor Agreement, which describes the terms under which you can contribute to the project.</p> <p>If you sign this ECA, you confirm your legal rights to submit the code to the project. You also provide license to your contributions to Eclipse and specified users, however you still own your contributions.</p>"},{"location":"contributing/quick-start-guide-for-new-developers/#github-account","title":"GitHub Account","text":"<p>To contribute to Oniro your regular GitHub account can be used. If you do not have one already, head to GitHub and create one.</p>"},{"location":"contributing/reuse-compliance/","title":"SPDX Information and REUSE Standard","text":"<p>All projects and files for an hosted project MUST be REUSE compliant. REUSE requires SPDX information for each file, rules for which are as follows:</p> <ul> <li>for files copyrighted by projects contributors (\"First Party   Files\"):</li> <li>any new file MUST have a SPDX header (copyright and license);</li> <li>for files that don't support headers (for example binaries,     patches etc.) an associated <code>.license</code> file MUST be included     with the relevant SPDX information;</li> <li>do not add Copyright Year as part of the SPDX header     information;</li> <li>the general rule for patch files is to use the MIT license and     not the license of the component for which the patch applies -     the latter solution would be error-prone and hard to manage and     maintain in the long run, and there may be difficult-to-handle     cases (what if the patches modifies multiple files in the same     component - eg. gcc - which are subject to different licenses);</li> <li>when modifying a file through this contribution process, you may     (but don't have to) claim copyright by adding a copyright line;</li> <li>you MUST NOT alter copyright statements made by others, but only     add your own;</li> <li>for files copyrighted by third parties and just added to the project   by contributors, eg. files copied from other projects or back-ported   patches (\"Third Party Files\"):</li> <li>if upstream files already have SPDX headers, they MUST be left     unchanged;</li> <li>if upstream files do not have SPDX headers:<ul> <li>the exact upstream provenance (repo, revision, path) MUST be   identified;</li> <li>you MUST NOT add SPDX headers to Third Party Files;</li> <li>copyright and license information, as well as upstream   provenance information (in the \"Comment\" section), MUST be   stored in [.reuse/dep5]{.title-ref} following Debian dep5   specification   (see examples below);</li> <li>you MUST NOT use wildcards (*) in dep5 \"Files\" paragraphs   even if Debian specs allow it: it may lead to unnoticed   errors or inconsistencies in case of future file additions   that may be covered by wildcard expressions even if they   have a different license;</li> <li>in case of doubts or problems in finding the correct license   and copyright information for Third Party Files,   contributors may ask the project's Legal Team in the   project mailing list oniro-dev@eclipse.org;</li> </ul> </li> </ul>"},{"location":"contributing/reuse-compliance/#spdx-header-example","title":"SPDX Header Example","text":"<p>Make sure all of your submitted new files have a licensing statement in the headers. Please make sure that the license for your file is consistent with the licensing choice at project level and that you select the correct SPDX identifier, as in the following example for Apache 2.0 license:</p> <pre><code>/*\n * SPDX-FileCopyrightText: Jane Doe &lt;jane@example.com&gt;\n *\n * SPDX-License-Identifier: Apache-2.0\n */\n</code></pre>"},{"location":"contributing/reuse-compliance/#dep5-files-paragraph-examples","title":"DEP5 \"Files\" Paragraph Examples","text":"<pre><code>Files: meta-oniro-staging/recipes-containers/buildah/buildah_git.bb\nCopyright: OpenEmbedded Contributors\nLicense: MIT\nComment: Recipe file for buildah copied from meta-virtualization project at\n         https://git.yoctoproject.org/meta-virtualization,\n         recipes-containers/buildah.\n         README file of meta-virtualization project states:\n         \"All metadata is MIT licensed unless otherwise stated.\"\n\nFiles: meta-oniro-staging/recipes-devtools/ninja/ninja/0001-feat-support-cpu-limit-by-cgroups-on-linux.patch\nCopyright: Google Inc.\nLicense: Apache-2.0\nComment: Patch for ninja backported from Ninja project at\n        https://github.com/ninja-build/ninja, commit 540be33\n        Copyright text left as found in the header of the patched file.\n</code></pre>"},{"location":"contributing/reuse-compliance/#substantial-contributions","title":"Substantial Contributions","text":"<p>Therefore, if your contribution is only a patch directly applied to an existing file, then you are not required to do anything. If your contribution is an entire new project, or a substantial, copyrighted contribution, you MUST make sure that you do that following the IP Policy and that you comply with REUSE standard to include the licensing information where they are required.</p>"},{"location":"device-development/","title":"Device Development","text":"<p>This section provides an overview and entry points for developing devices with Eclipse Oniro, which is based on OpenHarmony and currently focuses on the standard system type.</p>"},{"location":"device-development/#system-types","title":"System Types","text":"<p>OpenHarmony defines three system types: Mini, Small, and Standard. - Mini system: For devices with MCUs (e.g., Arm Cortex-M, 32-bit RISC-V) and \u2265128 KiB RAM. Offers lightweight networking, graphics, and IoT bus support. Typical products: sensors, wearables, connection modules. - Small system: For devices with application processors (e.g., Arm Cortex-A) and \u22651 MiB RAM. Provides higher security, standard graphics, and video capabilities. Typical products: smart cameras, routers, EDRs. - Standard system: Oniro currently targets this type, designed for devices with application processors (e.g., Arm Cortex-A) and at least 128 MiB of RAM. The standard system provides a complete application framework, 3D GPU support, hardware composer, and a wide range of components and animations. Typical products include high-end displays and smart appliances.</p>"},{"location":"device-development/#development-flow","title":"Development Flow","text":"<ol> <li> <p>Obtaining the Source Code    Follow the instructions in Building Oniro to fetch the source code and set up your environment.</p> </li> <li> <p>Supported Hardware    See Developer Boards for details on supported hardware. Currently, Oniro actively supports the HiHope HH-SCDAYU200 and Raspberry Pi 4 Model B boards, with step-by-step build and flashing instructions for each.</p> </li> <li> <p>Building and Flashing </p> </li> <li>Use Docker for a clean build environment.  </li> <li>Set the target device (e.g., <code>rk3568</code> for HiHope, <code>rpi4</code> for Raspberry Pi).  </li> <li> <p>Flashing instructions are hardware-specific and detailed in each board's documentation.</p> </li> <li> <p>Debugging and Tools </p> </li> <li>Use the HDC tool for device communication and debugging.  </li> <li>Serial console access and other debugging tips are provided per board.</li> </ol>"},{"location":"device-development/building-oniro/","title":"Building Oniro","text":"<p>Before beginning, ensure that <code>git-lfs</code> and <code>repo</code> are installed. It is recommended to have at least 100GB of free disk space available for the full build.</p>"},{"location":"device-development/building-oniro/#obtaining-the-source-code","title":"Obtaining the Source Code","text":"<p>To download the source code, execute the following commands in your terminal:</p> <pre><code>repo init -u https://github.com/eclipse-oniro4openharmony/manifest.git -b OpenHarmony-4.1-Release -m oniro.xml --no-repo-verify\nrepo sync -c\nrepo forall -c 'git lfs pull'\n</code></pre>"},{"location":"device-development/building-oniro/#fetching-prebuilt-tools","title":"Fetching Prebuilt Tools","text":"<p>Once you have the source code run the following script to fetch the prebuilt tools:</p> <pre><code>./build/prebuilts_download.sh\n</code></pre>"},{"location":"device-development/building-oniro/#setting-up-the-build-environment","title":"Setting Up the Build Environment","text":"<p>For building the project, using an isolated Docker container is recommended for a clean and controlled build environment. Run the following command to start the Docker container:</p> <pre><code>docker run -it -v $(pwd):/home/openharmony swr.cn-south-1.myhuaweicloud.com/openharmony-docker/docker_oh_standard:3.2\n</code></pre>"},{"location":"device-development/building-oniro/#configuring-and-starting-the-build","title":"Configuring and Starting the Build","text":"<p>Inside the Docker instance, set the target device for the build (e.g. rk3568) and use ccache to speed up subsequent builds:</p> <pre><code>./build.sh --product-name rk3568 --ccache\n</code></pre>"},{"location":"device-development/building-oniro/#flashing","title":"Flashing","text":"<p>The flashing procedure is highly hardware specific and can be found in the Developer Boards section for each individual device.</p>"},{"location":"device-development/building-oniro/#additional-tips-and-troubleshooting","title":"Additional Tips and Troubleshooting","text":""},{"location":"device-development/building-oniro/#no-hdc-available-in-the-system","title":"No HDC available in the system","text":"<p>If the <code>hdc</code> tool is not available on your host system, build it using the <code>ohos-sdk</code>:</p> <pre><code>./build.sh --product-name ohos-sdk --ccache\n</code></pre> <p>Find the <code>hdc</code> tool in <code>out/sdk/ohos-sdk/linux/toolchains</code>. To verify the connection with the device, run:</p> <pre><code>$ hdc list targets\n150100424a544434520325874bb44900\n</code></pre> <p>For sending commands to the device:</p> <pre><code>hdc shell\n</code></pre> <p>To read hilog output:</p> <pre><code>hdc hilog\n</code></pre>"},{"location":"device-development/building-oniro/#speeding-up-build-times","title":"Speeding Up Build Times","text":"<p>You can significantly reduce build times for subsequent builds by mounting directories for prebuilts and ccache when initiating the Docker container. This approach ensures that once the prebuilts are downloaded, they don't need to be fetched again, and the compilation cache is maintained across builds.</p> <p>To apply this optimization, use the following command to start your Docker container:</p> <pre><code>docker run -it -v $(pwd):/home/openharmony/workdir -v ~/openharmony_prebuilts:/home/openharmony/openharmony_prebuilts -v ~/.ccache:/root/.ccache swr.cn-south-1.myhuaweicloud.com/openharmony-docker/docker_oh_standard:3.2\n</code></pre> <p>After starting the container with the above command, navigate to the <code>workdir</code> directory before initiating the build process:</p> <pre><code>cd workdir\n</code></pre>"},{"location":"device-development/developer-boards/","title":"Developer Boards supported by Eclipse Oniro","text":"<p>This section delves into the specifics of Eclipse Oniro's supported developer  boards. 'Supported' here means being in active use by its developers and being part of the  CI/CD pipeline that guards the development processes.</p> <p>Given Eclipse Oniro is based on OpenHarmony, a way broader set of hardware support is available in the codebase. The only reason the other devices are not listed here, is the missing active use and CI/CD testing.</p>"},{"location":"device-development/developer-boards/emulator/","title":"Oniro Emulator","text":"<p>The Oniro Emulator provides an easy and accessible way to develop and test applications or system components without the need for physical hardware. It is based on QEMU, a powerful open-source machine emulator and virtualizer. The emulator uses the x86_64 architecture, which, when run on an x86 host PC, enables faster emulation by leveraging KVM on Linux and Hyper-V on Windows for hardware-assisted virtualization.</p> <p>This guide provides step-by-step instructions to build and run the Oniro Emulator.</p> <p></p>"},{"location":"device-development/developer-boards/emulator/#prerequisites","title":"\ud83d\udce6 Prerequisites","text":"<p>Before proceeding, make sure you have followed the Quick Build Setup guide to prepare your build environment.</p>"},{"location":"device-development/developer-boards/emulator/#download-oniro-source-code","title":"\u2b07\ufe0f Download Oniro Source Code","text":"<p>Use the following commands to fetch the Oniro source:</p> <pre><code>repo init -u https://github.com/eclipse-oniro4openharmony/manifest.git -b OpenHarmony-5.0.2-Release -m oniro.xml --no-repo-verify\nrepo sync -c\nrepo forall -c 'git lfs pull'\n</code></pre>"},{"location":"device-development/developer-boards/emulator/#switch-to-required-kernel-version","title":"\ud83e\uddf0 Switch to Required Kernel Version","text":"<p>Replace the default kernel with the required version:</p> <pre><code>rm -rf kernel/linux/linux-6.6\ngit clone -b weekly_20241216 https://gitee.com/openharmony/kernel_linux_6.6.git kernel/linux/linux-6.6 --depth=1\n</code></pre>"},{"location":"device-development/developer-boards/emulator/#apply-source-patches","title":"\ud83e\ude79 Apply source patches","text":"<p>Run the patching script:</p> <pre><code>bash vendor/oniro/std_emulator/hook/hook_start.sh\n</code></pre>"},{"location":"device-development/developer-boards/emulator/#build-the-images","title":"\ud83d\udee0\ufe0f Build the images","text":"<p>Start the build with ccache enabled:</p> <pre><code>./build.sh --product-name std_emulator --ccache\n</code></pre>"},{"location":"device-development/developer-boards/emulator/#optional-revert-patches","title":"\ud83d\udd04 (Optional) Revert patches","text":"<p>If needed, you can undo the applied patches:</p> <pre><code>bash vendor/oobemulator/std_emulator/hook/hook_end.sh\n</code></pre>"},{"location":"device-development/developer-boards/emulator/#download-prebuilt-images","title":"\ud83d\udce5 Download Prebuilt Images","text":"<p>Alternatively, you can download the prebuilt Oniro Emulator images. </p> <p>Extract the archive and use the included run scripts as described below.</p>"},{"location":"device-development/developer-boards/emulator/#qemu-installation","title":"QEMU Installation","text":"<p>The emulator requires QEMU to be installed on your system.</p> <ul> <li>Download and install QEMU from the official website: https://www.qemu.org/download/</li> </ul> <p>Refer to the platform-specific instructions on the QEMU website for installation details.</p>"},{"location":"device-development/developer-boards/emulator/#running-the-emulator","title":"Running the Emulator","text":"<p>After building, you will find the emulator run scripts (<code>run.sh</code> for Linux, <code>run.bat</code> for Windows) in the output images directory:</p> <pre><code>out/std_emulator/packages/phone/images\n</code></pre> <p>These scripts launch QEMU with the correct parameters for the Oniro Emulator.</p> <p>To start the emulator, use the appropriate script for your operating system:</p> <ul> <li> <p>Linux: <pre><code>sudo ./run.sh\n</code></pre></p> <p>If you encounter permission errors, ensure the script is executable: <code>chmod +x run.sh</code></p> </li> <li> <p>Windows: <pre><code>.\\run.bat\n</code></pre></p> <p>Run the script from a Command Prompt or PowerShell window with administrator rights if required.</p> </li> </ul> <p>Note for Windows Users: The emulator requires Hyper-V to be enabled on your system.</p>"},{"location":"device-development/developer-boards/emulator/#enabling-hyper-v-on-windows","title":"Enabling Hyper-V on Windows","text":"<ol> <li>Open Start Menu and search for \u201cTurn Windows features on or off\u201d.</li> <li>In the Windows Features dialog, check the boxes for:</li> <li>Hyper-V</li> <li>Hyper-V Management Tools</li> <li>Hyper-V Platform</li> <li>Click OK and wait for the changes to apply.</li> </ol> <p>Restart your system after enabling Hyper-V.</p>"},{"location":"device-development/developer-boards/emulator/#connecting-to-the-emulator-with-hdc","title":"Connecting to the Emulator with HDC","text":"<p>Once the emulator is running, you can connect to it using HDC (the OpenHarmony Device Connector):</p> <pre><code>hdc tconn localhost:55555\n</code></pre> <p>This command connects your host to the emulator instance for debugging and file transfer.</p> <p>Note: <code>hdc</code> is included in the OpenHarmony SDK toolchain. Ensure it is in your <code>PATH</code>.</p>"},{"location":"device-development/developer-boards/emulator/#reference","title":"Reference","text":"<p>For additional information please refer to the Oniro Board Support Packages repository.</p>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/","title":"HiHope HH-SCDAYU200 Development Kit","text":""},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#introduction","title":"Introduction","text":"<p>Based on the Rockchip RK3568, this development kit integrates advanced features such as a dual-core architecture GPU and a high-performance NPU. Complemented by  an onboard quad-core 64-bit Cortex-A55 processor which has a frequency of up to 2.0GHz,  it ensures robust performance.</p> <p>The rich set of peripherals ranges from Bluetooth and Wi-Fi to audio, video, camera and a variety of Bosch Sensortec sensors.</p> <p>The expansion board offers rich expansion interfaces, and supports a variety of video input and output interfaces suited for applications with rich user interface requirements.</p> <p>It is also equipped with dual Gigabit adaptive RJ45 Ethernet ports, which can meet the needs of NVR, industrial gateway and other multi-network port products.</p> <p></p>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#specification","title":"Specification","text":""},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#development-board-specification","title":"Development Board Specification","text":"Category Specification SOC Model Rockchip RK3568 CPU Architecture Quad-core Cortex-A55 up to 2.0GHz GPU Mali-G52 GPU Supported APIs OpenGL ES 1.1/2.0/3.2, OpenCL 2.0, Vulkan 1.1 Video Decoding Supports 4K at 60fps H.265/H.264/VP9 video decoding Video Encoding Supports 1080P at 100fps H.265/H.264 video encoding NPU Performance 0.8TOPs Supported Operations INT8, INT16, FP16 operations RAM 2/4GB LPDDR4/LPDDR4x, running at 1600MHz Storage 16/32 GB Power Input DC 12V/2A Operating Systems OpenHarmony Connector Type SODIMM 314P (MXM 3.0)"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#expansion-board-specification","title":"Expansion Board Specification","text":"Category Specification HDMI 1x HDMI2.0(Type-A), supports 4K at 60fps output MIPI 2x MIPI interface, supports 1920x1080 at 60fps output eDP Interface 1x eDP interface, supports 2K at 60fps output I2S/TDM/PDM 1x 8 channel I2S/TDM/PDM Ethernet 2x GMAC(10/100/1000M) SDIO Supports Wi-Fi 5G/2.5G, BT4.2 Camera Interface MIPI-CSI2, 1x4-lane/2x2-lane at 2.5Gbps/lane USB 1x USB2.0 Host, Type-A; 1x USB3.0 Host, Type-A; 1x USB3.0 OTG M.2 Interface 4G LTE Module PCIe 1x 2 Lanes PCIe3.0 Connector (RC Mode) SATA 1x SATA3.0 Connector SDMMC 1x Micro SD Card3.0 Buttons 1x Vol+/Recovery; 1x Reset; 1x Power; 1x Vol-; 1x Mute RTC 1x RTC Infrared 1x IR LEDs 3x LED Sensors Bosch Sensortec BMA456, BMI270 and BMP581 Fan 1x Fan"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#building","title":"Building","text":"<p>To build Eclipse Oniro for this board the normal quick build procedure has to be used to fetch the needed source code and environment.</p> <p>During the build step, inside the Docker instance, the target device for the build has to be set to rk3568.</p> <pre><code>./build.sh --product-name rk3568 --ccache\n</code></pre>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#flashing","title":"Flashing","text":"<p>To begin, connect the board to your computer as outlined in the HiHope DAYU200 documentation. Use the USB-C and mini-USB cables included in the kit to connect to the USB 3.0 OTG port and the mini-USB DEBUG port, respectively.</p> <p>We have different steps for a standalone Linux system and for Windows systems with built-in WSL.</p> <ul> <li>Standalone Linux System </li> <li>Windows System with built-in WSL </li> </ul>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#in-standalone-linux-system","title":"In Standalone Linux System","text":"<p>Power on the device by attaching the power cable. Upon successful connection, your serial console should display output similar to:</p> <pre><code>Bus 002 Device 009: ID 2207:5000 Fuzhou Rockchip Electronics Company \"HDC Device\"\n...\nBus 001 Device 069: ID 0403:6001 Future Technology Devices International, Ltd FT232 Serial (UART) IC\n</code></pre> <p>Download the <code>flash.py</code> flashing tool from Gitee using the following commands:</p> <pre><code>git clone https://gitee.com/hihope_iot/docs.git hihope_iot_docs\nmkdir flash &amp;&amp; cp -r hihope_iot_docs/HiHope_DAYU200/\u70e7\u5199\u5de5\u5177\u53ca\u6307\u5357/linux/* flash/\nchmod +x flash/flash.py flash/bin/flash.x86_64\n</code></pre> <p>To ensure proper device recognition, install the <code>udev</code> rule:</p> <p><pre><code>sudo cp flash/etc/udev/rules.d/85-rk3568.rules /etc/udev/rules.d/85-rk3568.rules\n</code></pre> Then, either reload udev rules or reboot your system:</p> <pre><code>udevadm control --reload-rules\n</code></pre> <p>After this setup, running <code>flash/flash.py -q</code> should produce the following output, indicating readiness:</p> <pre><code>maskrom\n</code></pre> <p>To enable programming mode on the device, perform the following steps:</p> <ol> <li>Press and hold <code>VOL/RECOVERY</code> then <code>RESET</code> buttons.</li> <li>Release <code>RESET</code> button.</li> </ol> <p>Confirm the mode by running <code>lsusb</code>, which should show:</p> <pre><code>...\nBus 001 Device 070: ID 2207:350a Fuzhou Rockchip Electronics Company USB download gadget\n...\n\n$ flash/flash.py -q\nloader\n</code></pre> <p>Once the above steps are completed successfully, you can proceed to flash the board:</p> <pre><code>flash/flash.py -a -i ./out/rk3568/packages/phone/images\n</code></pre>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#connecting-to-serial-console","title":"Connecting to serial console","text":"<p>To read the serial output, ensure the board is correctly connected and powered on. The default baud rate for the HH-SCDAYU200 board is 1500000. You can use minicom or a similar serial terminal:</p> <pre><code>minicom -D /dev/ttyUSB0 -b 1500000\n</code></pre>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#windows-system-with-built-in-wsl","title":"Windows System with built-in WSL","text":"<p>Power on the device by attaching the power cable. Upon successful connection, type <code>lsusb</code> on WSL your serial console will display output similar to:</p> <p><pre><code>Bus 001 Device 001: ID 1d6b:0002 Linux Foundation 2.0 root hub\nBus 002 Device 001: ID 1d6b:0003 Linux Foundation 3.0 root hub\n</code></pre> It's not connected yet, but don't worry.</p> <p>Download the <code>flash.py</code> flashing tool from Gitee using the following commands on your WSL:</p> <pre><code>git clone https://gitee.com/hihope_iot/docs.git hihope_iot_docs\nmkdir flash &amp;&amp; cp -r hihope_iot_docs/HiHope_DAYU200/\u70e7\u5199\u5de5\u5177\u53ca\u6307\u5357/linux/* flash/\nchmod +x flash/flash.py flash/bin/flash.x86_64\n</code></pre> <p>To ensure proper device recognition, install the <code>udev</code> rule:</p> <p><pre><code>sudo cp flash/etc/udev/rules.d/85-rk3568.rules /etc/udev/rules.d/85-rk3568.rules\n</code></pre> Then, either reload udev rules or reboot your system:</p> <pre><code>sudo udevadm control --reload-rules\n</code></pre> <p>Then, we need to attach USB devices from Windows using Windows PowerShell to virtual Linux environment. Type <code>usbipd list</code> with output the following result, find busid for which device named \"HDC Device\".</p> <pre><code>Connected:\nBUSID  VID:PID    DEVICE                                                        STATE\n1-2    24ae:185a  USB Input Device                                              Not shared\n1-8    174f:2435  Integrated Camera                                             Not shared\n1-9    06cb:00bd  Synaptics UWP WBDI                                            Not shared\n1-14   8087:0029  Intel(R) Wireless Bluetooth(R)                                Not shared\n1-17   2207:5000  \"HDC Device\"                                                  Shared\n</code></pre> <p>In our case, we need take busid <code>1-17</code>.</p> <p>Note</p> <p>If the status of HDC Device is Not shared, type <code>usbpid bind --busid 1-17</code>, in above case the device busid is 1-17, change it to adjust your case if necessary.</p> <p>After re-running command <code>usbipd list</code>, you will find the device status changed into <code>Shared</code>.</p> <p>Then we need to attach the device to wsl using command <code>usbipd attach --wsl --busid 1-17</code>, the output should be like the following, wait until attach process finishes:</p> <pre><code>usbipd: info: Using WSL distribution 'Ubuntu' to attach; the device will be available in all WSL 2 distributions.\nusbipd: info: Detected networking mode 'nat'.\nusbipd: info: Using IP address 172.24.144.1 to reach the host.\n</code></pre> <p>Note</p> <p>If you are not sure about if the device had been attached already, detach it first using command <code>usbipd detach --busid 1-17</code></p> <p>After this setup, running <code>flash/flash.py -q</code> should produce the following output, indicating readiness:</p> <pre><code>maskrom\n</code></pre> <p>Note</p> <p>If the output is <code>none</code>, try to re-run detach and attach procedures above, you can also check your device connection details using <code>dmesg | tail -n 50</code> command on WSL.</p> <p>If still not working, try to change a cable, switch to connect another port on your PC or keep your board screen unlocked.</p> <p>To enable programming mode on the device, perform the following steps:</p> <ol> <li>Press and hold <code>VOL/RECOVERY</code> then <code>RESET</code> buttons.</li> <li>Release <code>RESET</code> button.</li> </ol> <p>When your run <code>flash/flash.py -q</code> again, you will find the output is <code>none</code> again. </p> <p>Open Windows PowerShell again and type <code>usbipd list</code>, the output will be like the following: <pre><code>Connected:\nBUSID  VID:PID    DEVICE                                                        STATE\n1-1    24ae:185a  USB Input Device                                              Not shared\n1-2    2207:350a  USB download gadget                                           Not shared\n1-8    174f:2435  Integrated Camera                                             Not shared\n1-9    06cb:00bd  Synaptics UWP WBDI                                            Not shared\n1-14   8087:0029  Intel(R) Wireless Bluetooth(R)                                Not shared\n</code></pre></p> <p>Find the busid for device which named 'USB download gadget', in our case it is <code>1-2</code>. Bind it first <code>usbipd bind --busid 1-2</code>, it requires to run the <code>Windows PowerShell</code> as administrator.</p> <p>Then attach it to WSL, run <code>usbipd attach --wsl --busid 1-2</code>.</p> <p>After that, switch to WSL and run <code>flash/flash.py -q</code> again you will find the output is <code>loader</code>, which means the device is under development mode now.</p> <p>Once the above steps are completed successfully, you can proceed to flash the board:</p> <pre><code>flash/flash.py -a -i ./out/rk3568/packages/phone/images\n</code></pre>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#connecting-to-serial-console_1","title":"Connecting to serial console","text":"<p>To read the serial output, ensure the board is correctly connected and powered on. The default baud rate for the HH-SCDAYU200 board is 1500000. You can use minicom or a similar serial terminal:</p> <pre><code>minicom -D /dev/ttyUSB0 -b 1500000\n</code></pre>"},{"location":"device-development/developer-boards/hihope-hh-scdayu200/#reference","title":"Reference","text":"<p>The original specification and some hardware description comes form the original (Chinese) HiHope documentation published on Gitee.</p> <p>More details and purchase options can be found at the manufactures product page.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/","title":"Raspberry Pi 4 Model B Development Kit","text":""},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#introduction","title":"Introduction","text":"<p>The Raspberry Pi 4B is powered by the Broadcom BCM2711, a quad-core Cortex-A72 (ARM v8) 64-bit SoC clocked at 1.8GHz. It offers significant performance improvements over previous models, making it an ideal choice for projects requiring higher processing power. The board also supports a variety of peripherals including high-speed USB 3.0, dual HDMI outputs, and Gigabit Ethernet.</p> <p>The onboard wireless capabilities (Wi-Fi and Bluetooth) and the Raspberry Pi's standard 40-pin GPIO header ensure a wide range of expansion possibilities. It\u2019s an excellent platform for IoT, media centers, and general-purpose computing projects.</p> <p>The Oniro Project supports the Raspberry Pi 4B, and the following features have been verified to be working: - GPU graphical acceleration - USB camera support - HDMI output - Touch input - Mouse input</p> <p>\\ Oniro on Raspberry Pi 4b and waveshare 7inch touch screen</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#specification","title":"Specification","text":""},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#development-board-specification","title":"Development Board Specification","text":"Category Specification SOC Model Broadcom BCM2711 CPU Architecture Quad-core Cortex-A72 (ARM v8) 64-bit SoC @ 1.8GHz GPU OpenGL ES 3.1, Vulkan 1.0 Wireless 2.4 GHz and 5.0 GHz IEEE 802.11ac wireless, Bluetooth 5.0, BLE Ethernet Gigabit Ethernet RAM 1GB, 2GB, 4GB, or 8GB LPDDR4-3200 SDRAM (depending on model) Video Decoding H.265 (4kp60 decode), H.264 (1080p60 decode, 1080p30 encode) Power Input 5V DC via USB-C connector (minimum 3A) or GPIO header Operating Temperature 0 \u2013 50 degrees C ambient Storage Micro-SD card slot for OS and data storage Operating Systems Supports various Linux distributions, including Oniro"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#expansion-board-specification","title":"Expansion Board Specification","text":"Category Specification HDMI 2x micro-HDMI (supports 4K at 60fps output) MIPI 2-lane MIPI DSI display port, 2-lane MIPI CSI camera port USB 2x USB 3.0 ports, 2x USB 2.0 ports GPIO 40-pin GPIO header (fully backwards compatible) Audio/Video 4-pole stereo audio and composite video port PoE Power over Ethernet (requires separate PoE HAT)"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#building","title":"Building","text":"<p>After completing the steps in the quick build documentation to set up your build environment, proceed with the following steps to compile and build the system image for the Raspberry Pi 4B.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-1-prepare-the-build-environment","title":"Step 1: Prepare the Build Environment","text":"<p>Run the following script to apply system patches:</p> <pre><code>chmod 777 device/board/rpi/system_patch/system_patch.sh\n./device/board/rpi/system_patch/system_patch.sh\n</code></pre>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-2-compile-the-system-image","title":"Step 2: Compile the System Image","text":"<p>Execute the following command to build the system image:</p> <pre><code>./build.sh --product-name rpi4 --ccache\n</code></pre>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-3-package-the-system-image","title":"Step 3: Package the System Image","text":"<p>Once the compilation is complete, package the image using this command:</p> <pre><code>./build.sh --product-name rpi4 --ccache --build-target rpi_image\n</code></pre> <p>The compiled files will be archived in the <code>out/rpi4/</code> directory, and the final image will be located at:</p> <pre><code>out/rpi4/packages/phone/images/\n</code></pre>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#flashing","title":"Flashing","text":"<p>To flash the image, follow these steps in a Linux environment:</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-1-insert-the-sd-card","title":"Step 1: Insert the SD Card","text":"<p>Insert your SD card (at least 16GB) into the card reader and connect it to your computer.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-2-identify-the-device","title":"Step 2: Identify the Device","text":"<p>Run the following command to list all connected devices:</p> <pre><code>lsblk\n</code></pre> <p>Locate your SD card by identifying its size in the list. The device name will be something like <code>/dev/sdX</code>, where <code>X</code> is a letter such as <code>b</code>, <code>c</code>, etc. For example, it could be <code>/dev/sdc</code>.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-3-unmount-the-device","title":"Step 3: Unmount the Device","text":"<p>If the device has any mounted partitions, you must unmount them before flashing the image. For example, if your device is <code>/dev/sdc</code>, run the following command to unmount all partitions:</p> <pre><code>sudo umount /dev/sdc*\n</code></pre>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-4-flash-the-image","title":"Step 4: Flash the Image","text":"<p>Now, use the <code>dd</code> command to write the image file to the SD card. Replace <code>/dev/sdX</code> with the appropriate device name (e.g., <code>/dev/sdc</code>), and run the following command:</p> <pre><code>sudo dd if=out/rpi4/packages/phone/images/rpi_image.img of=/dev/sdX bs=4M conv=fsync status=progress\n</code></pre> <p>This will begin the flashing process. The <code>status=progress</code> option will display the progress of the flashing process.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#step-5-eject-the-sd-card","title":"Step 5: Eject the SD Card","text":"<p>Once the flashing is complete, safely eject the SD card using the following command:</p> <pre><code>sudo eject /dev/sdX\n</code></pre> <p>You can now insert the SD card into your Raspberry Pi 4B for use.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#debugging","title":"Debugging","text":""},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#1-connecting-via-serial","title":"1. Connecting via Serial","text":"<p>To debug via serial, use the following pin configuration:</p> <p></p> <p>Connect the pins as shown in the diagram (Pins 6, 8, and 10). Then, use the following Minicom command to establish the serial connection:</p> <pre><code>sudo minicom --device /dev/ttyUSB0 --baudrate 115200\n</code></pre> <p>Make sure to replace <code>/dev/ttyUSB0</code> with the appropriate serial port for your setup.</p> <p>Tip: After establishing the serial connection, you will have access to the device's shell. If the device is connected to a network, you can retrieve the IP address by running the <code>ifconfig</code> command. This will be useful for the next section on \"Using the HDC Tool\" to connect to the device over the network.</p>"},{"location":"device-development/developer-boards/raspberry-pi-4model-b/#2-using-the-hdc-tool","title":"2. Using the HDC Tool","text":"<p>The HDC tool can be used for various debugging tasks. To connect, first connect the device via Ethernet to obtain the IP address, and then run the following command:</p> <pre><code>hdc tconn &lt;device-ip&gt;:5555\n</code></pre> <p>You should see <code>Connect OK</code> if the connection is successful.</p> <p>Here are some useful HDC commands:</p> <ul> <li><code>hdc shell</code>: Opens a shell to the device.</li> <li><code>hdc file send {local_path} {device_path}</code>: Sends a file from your local system to the device.</li> <li><code>hdc file recv {device_path} {local_path}</code>: Receives a file from the device.</li> <li><code>hdc install &lt;filename.hap&gt;</code>: Installs a <code>.hap</code> package on the device.</li> </ul>"},{"location":"device-development/oniro-ide/","title":"Oniro IDE","text":""},{"location":"device-development/oniro-ide/#oniro-ide","title":"Oniro IDE","text":"<p>Oniro IDE is an Eclipse Theia based IDE for the Oniro operating system. It allows developers to build applications for a wide range of smart devices in what is called \"one-time development\". One code can adapt to multiple devices, improving development efficiency and implementing cross-end service ecosystem sharing.</p> <p>Here we provide a quick guide to various IDE features and what is expected to come in the future.</p>"},{"location":"device-development/oniro-ide/code-editing/","title":"Code Editing","text":""},{"location":"device-development/oniro-ide/code-editing/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"<p>Being able to keep your hands on the keyboard when writing code is crucial for high productivity. You can explore various keyboard shortcuts by navigating to <code>File -&gt; Preferences -&gt; Keyboard Shortcuts</code> from the menu tab or clicking <code>Ctrl+Alt+,</code>.</p>"},{"location":"device-development/oniro-ide/code-editing/#selection","title":"Selection","text":"<p>Different selection options can be explored from <code>Selection</code> in the menu tab. A few of the important ones are <code>Shift + Right/Left/Up/Down</code> for basic selection, <code>Ctrl + Shift + Right/Left</code>  for whole words selection, and column selection by placing the cursor in one corner and then holding <code>Shift+Alt</code> while dragging to the opposite corner.</p>"},{"location":"device-development/oniro-ide/code-editing/#save-auto-save","title":"Save &amp; Auto Save","text":"<p>To save a file press <code>Ctrl+S</code> or enable auto save from <code>File -&gt; Auto Save</code> which will save your changes after a configured delay or when focus leaves the editor.</p>"},{"location":"device-development/oniro-ide/code-editing/#find-replace","title":"Find &amp; Replace","text":"<p> Press <code>Ctrl+F</code> to toggle the <code>Find</code> feature of the IDE, write the word or phrase you're searching for and press <code>Enter</code> or <code>Shift+Enter</code> to go up and down the results. As seen in the above figure, there are several options to the search namely:</p> <ol> <li>Match Case: to find a word or phrase with the same case letters.</li> <li>Match Whole Word: to eliminate words or phrases that don't contain all the letters of each word from the results.</li> <li>Use Regular Expression: For an advanced search using regular expresions.</li> <li>Find in Selection: to first select a piece of code and then search only within the selection.</li> <li>Replace: to replace each search result with the word or phrase in the Replace field.</li> <li>Replace All: to replace all of the search result with the word or phrase in the Replace field, all in one click.</li> </ol> <p>Note:</p> <p>To search multiple files at once press <code>Ctrl+Shift+F</code>.</p>"},{"location":"device-development/oniro-ide/code-navigation/","title":"Code Navigation","text":"<p>A dynamic combination of programming languages' services and quick text editing gives Oniro IDE its power. In this topic we will give an overview of a few code navigation features which can be explored when you right click on a symbol (variable, function, method, class, etc.).</p>"},{"location":"device-development/oniro-ide/code-navigation/#go-to-definition","title":"Go to Definition","text":"<p>The \"Go to Definition\" feature is a code navigation tool that allows you to quickly navigate to the definition of a particular symbol in your codebase. This feature is commonly used to explore the implementation or declaration of functions, classes, variables, methods, and other code entities. You can do this by <code>Ctrl+Click</code> as with other IDEs or <code>Ctrl+F11</code>.</p>"},{"location":"device-development/oniro-ide/code-navigation/#go-to-type-definition","title":"Go to Type Definition","text":"<p>This feature specifically deals with navigating to the type definition of a symbol. It is useful in statically-typed languages where you might want to see the type information associated with a variable or entity.</p>"},{"location":"device-development/oniro-ide/code-navigation/#go-to-symbol","title":"Go to Symbol","text":"<p> This allows you to quickly navigate to symbols (ie. variables, functions, classes..etc) within your file.</p>"},{"location":"device-development/oniro-ide/code-navigation/#go-to-implementations","title":"Go to Implementations","text":"<p>The \"Go to Implementations\" feature allows you to quickly jump to the implementations of a particular function, method, or interface in your codebase. This feature is particularly useful in languages that support interfaces, classes, or methods with multiple implementations.</p> <p>Note:</p> <p>If you want to see all the places where a particular method or function is implemented, \"Find All Implementations\" is useful for a more comprehensive overview.</p>"},{"location":"device-development/oniro-ide/code-navigation/#find-all-references","title":"Find All References","text":"<p>This is a code analysis tool that allows you to locate all occurrences or references to a particular symbol (variable, function, method, class, etc.) within your codebase. Its purpose is to provide developers with a comprehensive overview of where a specific symbol is used throughout their project.</p>"},{"location":"device-development/oniro-ide/code-navigation/#peek","title":"Peek","text":"<p>This is a special feature that allows developers to quickly view the definition or implementation of a symbol inline without navigating away from the current code file to avoid context switching.</p> <p>You can navigate between different references in the peeked editor and make quick edits right there.</p>"},{"location":"device-development/oniro-ide/getting-started/","title":"Getting Started","text":""},{"location":"device-development/oniro-ide/getting-started/#installation","title":"Installation","text":"<p>Please make sure that your system follows the Theia development prerequisites.</p>"},{"location":"device-development/oniro-ide/getting-started/#building","title":"Building","text":"<p>The IDE can be built &amp; run in your browser, or as a packaged desktop application using Electron. You can build both browser and electron application by running the following script: <pre><code>yarn\nyarn compile\nyarn download:plugins\n</code></pre></p>"},{"location":"device-development/oniro-ide/getting-started/#running","title":"Running","text":"<p>To start the browser application you need to run: <pre><code>yarn browser start\n</code></pre> And similarly for the electron application:</p> <pre><code>yarn electron start\n</code></pre>"},{"location":"device-development/oniro-ide/getting-started/#watching","title":"Watching","text":"<p>To continuously compile the written TypeScript code, run the respective commands for your runtime:</p> <p><pre><code>yarn browser watch\n</code></pre> Or</p> <pre><code>yarn electron watch\n</code></pre>"},{"location":"device-development/oniro-ide/getting-started/#running-in-docker-container","title":"Running in Docker container","text":"<p>Install docker.</p> <p>To create <code>oniro-ide</code> docker image:</p> <p><pre><code>docker build -t oniro-ide .\n</code></pre> To start <code>oniro-ide-container</code> container:</p> <p><pre><code>docker run -dp 3000:3000 --name oniro-ide-container oniro-ide\n</code></pre> When you open the browser at <code>http://localhost:3000/</code> you will see the browser version of the IDE.</p>"},{"location":"device-development/oniro-ide/getting-started/#creating-and-running-a-project","title":"Creating and Running a Project","text":"<p> To create a new project navigate to <code>Project</code> from the menu tab and click <code>New Project</code>. From the pop-up window select the folder where you want to save your project and give your project a name. Finally select the hardware chip of your choice, click <code>Next</code> and <code>Finish</code>. This creates a new project workspace for your development.</p> <p>To open your project, navigate to <code>File -&gt; Open...</code> from the menu tab, navigate to your project's location, and click <code>Open</code>. This will open your project as you can see down in the <code>Explorer</code>.</p> <p>From here on out you can add files/folders using the <code>Explorer</code> pane or use tools such as npm package manager to help you create projects.</p> <p>Note:</p> <p>So far you can develop projects in the IDE in a plethora of languages. However, building and running project is still under construction.</p>"},{"location":"device-development/oniro-ide/language-support/","title":"Language Support","text":"<p>Oniro IDE is built using Theia, which is heavily influenced by VS Code. The languages supported by the IDE are all those supported by VS Code. Examples of such are:</p> Python C/C++ C# Go Java JavaScript <p>The Language Features are also shared with those in VS Code:</p> <ul> <li>Syntax highlighting and bracket matching  </li> <li>Smart completions  </li> <li>Linting and corrections  </li> <li>Code navigation  </li> <li>Debugging  </li> <li>Refactoring  </li> </ul>"},{"location":"device-development/oniro-ide/refactoring/","title":"Refactoring","text":"<p>Code Refactoring is an essential part of the software engineering life cycle. In this topic we will explain a few refactoring actions that are embedded into the IDE namely, <code>Rename Symbol</code>, <code>Extract Method</code>, and <code>Extract Variable</code>.</p>"},{"location":"device-development/oniro-ide/refactoring/#rename-symbol","title":"Rename Symbol","text":"<p>This refactoring tool allows you to consistently rename symbols (variables, functions, methods, classes, etc.) throughout your codebase. This is particularly useful when you want to rename a symbol without manually updating each occurrence in different files.</p> <p></p> <p>Right click on a symbol you want to rename and choose <code>Rename Symbol</code> or press F2. Write the new name and press <code>Enter</code>, or press <code>Shift+Enter</code> to preview your changes in a separate pane before applying them.</p>"},{"location":"device-development/oniro-ide/refactoring/#extract-method","title":"Extract Method","text":"<p>The \"Extract Method\" refactoring action in Oniro IDE allows you to take a block of code within a function and create a new method for that block. This can improve code readability, maintainability, and reusability. Here's an example in javascript to illustrate how to use the \"Extract Method\" feature:</p> <pre><code>function calculateTotal(price, quantity) {\n  let taxRate = 0.1;\n  let subtotal = price * quantity;\n  let tax = subtotal * taxRate;\n  let total = subtotal + tax;\n\n  console.log(\"Total: $\" + total.toFixed(2));\n}\n</code></pre> <p>If you want to extract tax calculation part into a separate method you could use the <code>Extract Method</code>. Simply select the code fragment, click on the light bulb and choose the scope for the new function. During the extract refactoring, you will be prompted to provide a meaningful name. The final code should look like this:</p> <pre><code>function calculateTotal(price, quantity) {\n  let taxRate = 0.1;\n  let subtotal = price * quantity;\n  let tax = calcTax(subtotal);\n  let total = subtotal + tax;\n\n  console.log(\"Total: $\" + total.toFixed(2));\n}\n\nfunction calcTax(subtotal) {\n  let taxRate = 0.1;\n  return subtotal * taxRate;\n}\n</code></pre>"},{"location":"device-development/oniro-ide/refactoring/#extract-variable","title":"Extract Variable","text":"<p>allows you to take an expression in your code and create a new variable to store the result of that expression. Let's revisit our initial example: <pre><code>function calculateTotal(price, quantity) {\n  let taxRate = 0.1;\n  let subtotal = price * quantity;\n  let total = subtotal + subtotal * taxRate;\n\n  console.log(\"Total: $\" + total.toFixed(2));\n}\n</code></pre> This time the total is calculated right away in long formula that includes the tax calculation. To make it more readable we want to extract the tax calculation in a separate variable. Hence, we select the <code>subtotal * taxRate</code> code fragment, click on the light bulb, choose <code>Extract to constant in enclosing scope</code> and give the constant a name e.g. tax. The outcome should be as follows: <pre><code>function calculateTotal(price, quantity) {\n  let taxRate = 0.1;\n  let subtotal = price * quantity;\n  const tax = subtotal * taxRate;\n  let total = subtotal + tax;\n\n  console.log(\"Total: $\" + total.toFixed(2));\n}\n</code></pre></p>"},{"location":"device-development/oniro-ide/user-interface/","title":"User Interface","text":"<p>At its heart, Oniro IDE is a code editor. Like many other code editors, Oniro IDE adopts a common user interface and layout of an explorer on the left, showing all of the files and folders you can access, and an editor on the right, showing the content of the files you have opened.</p> <p></p>"},{"location":"device-development/oniro-ide/user-interface/#basic-layout","title":"Basic Layout","text":"<p>The basic layout consists of 8 main areas: 1. Menu Bar: that contains the main menus such as File, Edit, View, Run..etc. 1. Tool Bar: for going home, and toggling the explorer and debugging side bars. 1. Layout Bar: for changing the layout and positioning of the tool bar. 1. Editor Groups: with all the different files you are editing. You open as many files as you want and stack them horizontally and vertically. 1. Primary Side Bar: usually hosts the <code>Explorer</code>  view to assist you in navigating and working on your project. 1. Panel: space for views below the editor area. It typically has the integrated terminal, output and errors. You can also stack multiple views in the panel or have it as a pop out in a separate window. 1. Status Bar: shows the status of the file you are currently editing such as the language used in the file. 1. Secondary Side Bar: hosts an extra view on the right hand side such as a <code>Debugging</code> side bar.</p>"},{"location":"device-development/oniro-ide/user-interface/#explorer","title":"Explorer","text":"<p>The explorer is used to browse, open, and manage all the files and folders in your project. You can create a new file or folder at any time in your project.</p> <p>You can do many things to files and folders in the explorer:</p> <ul> <li>Create, delete, rename files and folders by right click.</li> <li>Move files and folders by drag and drop.</li> <li>Duplicate, copy and paste files into a folder.</li> </ul> <p>Note:</p> <p>You could run commands in a folder by right clicking on the folder itself or a file in the folder and choosing <code>Open in Terminal</code> from the pop out menu.</p>"},{"location":"device-development/oniro-ide/user-interface/#open-editors","title":"Open Editors","text":"<p>On the top of the <code>Explorer</code> side view you can find a pane called <code>Open Editors</code> that shows all the files that you currently have open. This allows for quick navigation between the opened editor tabs.</p>"},{"location":"device-development/oniro-ide/user-interface/#views","title":"Views","text":"<p>The <code>Explorer</code> is one of multiple other views available in Oniro IDE.   By navigating to <code>View</code> from the menu bar, you can see the multiple views that can be opened, such as: * Search Provides global search and replace across your open folder. * Debug for debugging tools displaying the <code>Call Stack</code>, <code>Variables</code>, <code>Breakpoints</code> throughout the code, and a <code>Watch</code> monitoring select variables. * Outline shows a symbol tree of the currently active editor showing the variables in your code.</p>"},{"location":"eclipse-oniro-project/oniro-architecture/","title":"Oniro Architecture","text":"<p>The Eclipse Oniro architecture builds on the solid foundations of OpenHarmony, enhancing and expanding its capabilities. All system enhancements are rigorously managed by an advanced IP toolchain to ensure compliance throughout the development process. Within this framework:</p> <ul> <li>React Native extends the usability of existing applications and ecosystems on top of OpenHarmony, enabling seamless integration across platforms.</li> <li>Eclipse Kanto expands Oniro's ecosystem adaptability and scalability by empowering edge devices with advanced IoT functionalities, including seamless cloud connectivity and flexible device management.</li> <li>The incorporation of the Rust language, particularly for the Servo web engine, bolsters the overall system's safety and security.</li> <li>Eclipse Theia enhances the development workflow, simplifying application creation within the ecosystem.</li> <li>libvsync improves the performance and reliability of applications that require precise coordination across multiple processes. Future enhancements will include the integration of NearLink, offering an alternative to Wi-Fi and Bluetooth with lower latency and improved connectivity, particularly suited for automotive and industrial environments.</li> </ul>"},{"location":"eclipse-oniro-project/openharmony-mirror/","title":"OpenHarmony Mirror","text":"<p>The Eclipse Oniro project offers a complete GitHub-hosted mirror of the OpenHarmony project, originally hosted at Gitee. One-way synchronization of changes from Gitee to GitHub is performed once a day.</p> <p>The reason for this mirror is the increased speed and reliability it offers to the Eclipse Oniro project and its developers. We encourage using it to avoid disconnects during sync and slow download speeds for developers working outside of China. In addition to speed and reliability it also allows for streamlining the process of forking and merging within GitHub and its large user base.</p> <p>To ensure these mirrors are consistently up-to-date, a synchronization CI workflow is executed every 24 hours to incorporate the latest changes from Gitee into the existing repositories, as well as mirroring newly created repositories.</p> <p>For those involved in active development or wishing to contribute, please visit the Eclipse Oniro for OpenHarmony  GitHub organization. This is where a fork of the manifest and newly created add-ons are being developed. The mirror itself is read-only and no changes from GitHub will be merged into it.</p>"},{"location":"eclipse-oniro-project/openharmony-relationship/","title":"OpenHarmony Downstream / Upstream relationship","text":""},{"location":"eclipse-oniro-project/openharmony-relationship/#eclipse-oniro-downstream-integration","title":"Eclipse Oniro Downstream Integration","text":"<p>Eclipse Oniro currently bases its enhancements of OpenHarmony on the 4.1 release. Newer versions will be targeted as they become available and used by the working group members. To collect enhancements and fixes, check for consistency, and  run them through continuous integration (CI), the project is using a downstream fork to  incorporate these changes.</p> <p>The downstream fork consists of a forked manifest and forks of the changed components. All newly created or forked components will be referenced  in the manifest for inclusion in the build. The only change required would be to use a  different URL in <code>repo init</code>, enabling repo sync to pick up the correct repositories  and revisions from the manifest.</p> <pre><code>repo init -u https://github.com/eclipse-oniro4openharmony/manifest.git -b OpenHarmony-4.1-Release --no-repo-verify\n</code></pre> <p>Creating a new repository is necessary for new add-ons. Once the add-on is pushed, it can be referenced in the forked manifest and included in the CI build.</p> <p>We also encourage every developer, if possible, to directly upstream fixes and enhancements into OpenHarmony's Gitee repositories. These changes will return to Eclipse Oniro with the next release, or earlier if backported to the current release branches on Gitee.</p>"},{"location":"eclipse-oniro-project/openharmony-relationship/#upstreaming-into-openharmony","title":"Upstreaming into OpenHarmony","text":"<p>For Eclipse Oniro, a downstream OpenHarmony distribution, the primary focus is to  ensure  well integrated and tested features from and for partners. The downstream fork will hold all changes and will be tested by developers and CI for releases.</p> <p>However, this fork isn't intended as a permanent repository for most changes.  Any modification applicable to OpenHarmony upstream should be proposed  via a pull request on the Gitee master branch. By doing so we get crucial feedback from OpenHarmony developers. This will help in the design and implementation of changes, to fit well into the existing code base. Additionally, any changes viable for upstream inclusion will return to Eclipse Oniro with the next release synchronization, reducing the maintenance burden to carry patches downstream.</p> <p>Should a fix be integrated upstream, efforts should be directed towards backporting  it into the current release. This ensures its inclusion in our ongoing cycle.</p>"}]}